import Limit

spec DebitCard  
  pan: PanNumber,
  psn: Integer, 
	pinHash: String,
	expiry: Date,
  cardArrangement: CardArrangement,
  brandType: BrandType,
  cardNumber: CardNumber,  
  accountNumber: IBAN,
  sequenceNumber: Integer,
  limit: Limit,
  requestReason: RequestReason,
  pinRetention: Boolean, 
  createdOn: Date,
  closedOn: Date,  
  nrOfWrongPinEntries: Integer,
  pinReset: Boolean,
  stolenOn: Date;
	
	identity (pan, psn);
		
	init event newCardRequested(id: Integer, limit: Limit, expiry: Date) 
		pre: expiry = now.year + 5;
		post:
			this.id = id,
			this.limit = limit,
			this.expiry = expiry;
	
	init event replacementCardRequested(id: Integer, limit: Limit, expiry: Date)
    pre: expiry = now.year + 5;
    post:
      this.id = id,
      this.limit = limit,
      this.expiry = expiry;
	
	event produced(pinHash: String)
		pre: pinHash != "";
		post: this.pinHash = pinHash;
	
	event activated()
	
  event transactionOccurred(pinHash: String, amount: Money)
    pre: this.pinHash = pinHash, expiryDate < now.date;
    
    failure wrongPin 
      pre: this.pinHash != pinHash, exiryDate < now.date;
	   
    failure expired
      pre: this.expiryDate >= now, this.pinHash = pinHash;
  
  event unblocked()
  
  event closed()
  
  states:
  
    existing {
      blocked -> (*): tooManyResets;
      blocked -> noWrongPinEntries: unblock;
  
      active {
        noWrongPinEntries -> noWrongPinEntries: transactionOccurred;
        noWrongPinEntries -> oneWrongPinEntry: transactionOccurred::wrongPin;
        oneWrongPinEntry -> noWrongPinEntries: transactionOccurred;
        oneWrongPinEntry -> twoWrongPinEntries: transactionOccurred::wrongPin;
        twoWrongPinEntries -> noWrongPinEntries: transactionOccurred;
        twoWrongPinEntries -> blocked: transactionOccurred::wrongPin;
      }

      replacementRequested -> noWrongPinEntries: produced;

    
      requested [requestedNew, requestedLost, requestedStolen, requestedByCustomer] {}
      
      requested -> produced: produced;       
      produced -> noWrongPinEntries: activated;
      active -> expired: transactionOccurred::expired;
      expired -> (*): empty;
    } 

    (*) -> requestedNew: newCardRequested;
    (*) -> replacementRequested: replacementCardRequested;
    (*) -> requestedLost: replaceLost;
    (*) -> requestedStolen: replaceStolen;
    (*) -> requestedByCustomer: replaceByCustomer; 

    existing -> (*): closed;
    