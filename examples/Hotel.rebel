module Hotel

spec Key

spec Card
  frst: Key,
  second: Key;
  
  event create(fst: Key, snd: Key) 
    pre: fst != snd;
    post: this.frst' = fst, this.second' = snd;
  
  internal event equal(fst: Key, snd: Key)
    pre: this.frst = fst, this.second = snd;
    
  //internal event check(r: Room) 
  //  pre: r.check(this.second) || r.update(this.frst, this.second);  
    
  states:
    (*) -> created: create;
    created -> created: equal; //, check;
  
spec Guest
  card: Card,
  room: Room;
 
  internal event checkin(card: Card, room: Room)
    pre: card is initialized, room is initialized, card.frst = room.key;
    post: this.card' = card, this.room' = room; 
  
  event enterRoom()   
    pre: this.room.enterRoom(this.card);  
      
  states:  
    (*) -> checkedin: checkin;
    checkedin -> checkedin: enterRoom;
 
spec Room  
  key: Key;  
  
  event create(initialKey: Key)    
    post: this.key' = initialKey; 
     
  //internal event update(oldKey: Key, newKey: Key) 
  //  pre: this.key = oldKey;
  //  post: this.key' = newKey;  
   
  internal event enterRoom(card: Card) 
    variant normal
      pre: this.key = card.second;
    
    variant update
      pre: this.key = card.frst;
      post: this.key' = card.second;
    
    //pre: this.key = key;
  
  states:
    (*) -> created: create;
    created -> created: enterRoom::normal, enterRoom::update;   
  
spec FrontDesk
  issued: set Key;
    
  event initialize() 
    post: this.issued' = {};   
    
  event checkin(card: Card, room: Room, guest: Guest)
    pre:   
      guest.checkin(card, room),  
      //room.check(card.frst),  
      card.second notin this.issued;
    post: 
      this.issued' = this.issued + card.second;
    
  states:
    (*) -> open: initialize;
    open -> open: checkin;    
    
config EmptyHotel
  = k1,k2,k3: Key, g1,g2: Guest is uninitialized, ca1,ca2: Card is uninitialized, r1: Room is uninitialized, fd: FrontDesk is uninitialized;

assert CanEnterRoom
  = eventually exists g:Guest | enterRoom on g;
  
assert NoIntruder 
  = eventually exists g1:Guest | next exists g2: Guest |
      g1 != g2 && 
      next (enterRoom on g1 && 
        next (enterRoom on g2 && 
          next enterRoom on g1)); 
      
check NoIntruder from EmptyHotel in max 10 steps;
check CanEnterRoom from EmptyHotel in max 10 steps;