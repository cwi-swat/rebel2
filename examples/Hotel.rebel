module Hotel

spec Key

spec Card
  first: Key,
  second: Key;
  
  event create(fst: Key, snd: Key) 
    post: this.first' = fst, this.second' = snd;
  
  internal event equal(fst: Key, snd: Key)
    pre: this.first = fst, this.second = snd;
    
  internal event check(r: Room) 
    pre: r.check(this.second) || r.update(this.first, this.second);  
    
  states:
    (*) -> created: create;
    created -> created: equal, check;
  
spec Guest
  card: Card;
 
  internal event checkin(card: Card)
    pre: card is initialized;
    post: this.card' = card; 
  
  event enterRoom(r: Room)
    pre: this.card.check(r);
      
  states:
    (*) -> checkedin: checkin;
    checkedin -> checkedin: enterRoom;

spec Room
  key: Key;
  
  event create(initialKey: Key) 
    post: this.key' = initialKey; 
    
  internal event update(oldKey: Key, newKey: Key) 
    pre: this.key = oldKey;
    post: this.key' = newKey;  
  
  internal event check(key: Key) 
    pre: this.key = key;
  
  states:
    (*) -> created: create;
    created -> created: update, check;
  
spec FrontDesk
  issued: set Key;
    
  event initialize()
    post: this.issued' = {};
    
  event checkin(fst: Key, snd: Key, c: Card, r: Room, g: Guest)
    pre:  
      g.checkin(c),
      r.check(fst),
      c.equal(fst,snd), 
      snd notin this.issued;
    post: 
      this.issued' = this.issued + snd;
  
  states:
    (*) -> open: initialize;
    open -> open: checkin;   
    
config EmptyHotel
  = k1,k2,k3: Key, g1,g2: Guest, ca1,ca2: Card, r1: Room, fd: FrontDesk;
  
assert NoIntruder
  = eventually exists g1,g2:Guest | 
      (g1 != g2) &&  
      next (enterRoom on g1 && 
        next (enterRoom on g2 && 
          next enterRoom on g1)); 
      
check NoIntruder starting at EmptyHotel in max 10 steps;