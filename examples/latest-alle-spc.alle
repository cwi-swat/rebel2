// Static configuration of state machines
// Define the specs that can take place in the transition system
PingPong (spec:id) = {<pingpong>}

// Define all possible states for all machines
State (state:id) = {<state_uninitialized>,<state_finalized>,<state_pingpong_ping>,<state_pingpong_pong>}
initialized (state:id) = {<state_pingpong_ping>,<state_pingpong_pong>}
finalized (state:id) = {<state_finalized>}
uninitialized (state:id) = {<state_uninitialized>}
StatePingPongPong (state:id) = {<state_pingpong_pong>}StatePingPongPing (state:id) = {<state_pingpong_ping>}

// Define which transitions are allowed (in the form of `from a state` -> ` via an event` -> `to a state`
allowedTransitions (from:id, to:id, event:id) = {<state_pingpong_pong,state_pingpong_ping,event_pingpong_hit>,<state_uninitialized,state_pingpong_ping,event_pingpong_start>,<state_pingpong_ping,state_pingpong_pong,event_pingpong_hit>}
// Define each event as single relation so that the events can be used as variables in the constraints 
EventPingPong__frame (event:id) = {<event_pingpong___frame>}
EventPingPongStart (event:id) = {<event_pingpong_start>}
EventPingPongHit (event:id) = {<event_pingpong_hit>}

// Dynamic configuration of state machines
Config (config:id) >= {<c1>} <= {<c1>,<c2>,<c3>,<c4>,<c5>,<c6>,<c7>}
order (cur:id, nxt:id) <= {<c1,c2>,<c2,c3>,<c3,c4>,<c4,c5>,<c5,c6>,<c6,c7>}
InitialConfig (config:id) = {<c1>}

Instance (spec:id, instance:id) = {<pingpong,p1>,<pingpong,p2>}
instanceInState (config:id, instance:id, state:id) >= {<c1,p1,state_uninitialized>,<c1,p2,state_uninitialized>}<= {<c1,p1,state_uninitialized>,<c1,p1,state_finalized>,<c1,p1,state_pingpong_ping>,<c1,p1,state_pingpong_pong>,<c1,p2,state_uninitialized>,<c1,p2,state_finalized>,<c1,p2,state_pingpong_ping>,<c1,p2,state_pingpong_pong>,<c2,p1,state_uninitialized>,<c2,p1,state_finalized>,<c2,p1,state_pingpong_ping>,<c2,p1,state_pingpong_pong>,<c2,p2,state_uninitialized>,<c2,p2,state_finalized>,<c2,p2,state_pingpong_ping>,<c2,p2,state_pingpong_pong>,<c3,p1,state_uninitialized>,<c3,p1,state_finalized>,<c3,p1,state_pingpong_ping>,<c3,p1,state_pingpong_pong>,<c3,p2,state_uninitialized>,<c3,p2,state_finalized>,<c3,p2,state_pingpong_ping>,<c3,p2,state_pingpong_pong>,<c4,p1,state_uninitialized>,<c4,p1,state_finalized>,<c4,p1,state_pingpong_ping>,<c4,p1,state_pingpong_pong>,<c4,p2,state_uninitialized>,<c4,p2,state_finalized>,<c4,p2,state_pingpong_ping>,<c4,p2,state_pingpong_pong>,<c5,p1,state_uninitialized>,<c5,p1,state_finalized>,<c5,p1,state_pingpong_ping>,<c5,p1,state_pingpong_pong>,<c5,p2,state_uninitialized>,<c5,p2,state_finalized>,<c5,p2,state_pingpong_ping>,<c5,p2,state_pingpong_pong>,<c6,p1,state_uninitialized>,<c6,p1,state_finalized>,<c6,p1,state_pingpong_ping>,<c6,p1,state_pingpong_pong>,<c6,p2,state_uninitialized>,<c6,p2,state_finalized>,<c6,p2,state_pingpong_ping>,<c6,p2,state_pingpong_pong>,<c7,p1,state_uninitialized>,<c7,p1,state_finalized>,<c7,p1,state_pingpong_ping>,<c7,p1,state_pingpong_pong>,<c7,p2,state_uninitialized>,<c7,p2,state_finalized>,<c7,p2,state_pingpong_ping>,<c7,p2,state_pingpong_pong>}
raisedEvent (cur:id, nxt:id, event:id, instance:id) <= {<c1,c2,event_pingpong_hit,p1>,<c1,c2,event_pingpong_start,p1>,<c1,c2,event_pingpong___frame,p1>,<c2,c3,event_pingpong_hit,p1>,<c2,c3,event_pingpong_start,p1>,<c2,c3,event_pingpong___frame,p1>,<c3,c4,event_pingpong_hit,p1>,<c3,c4,event_pingpong_start,p1>,<c3,c4,event_pingpong___frame,p1>,<c4,c5,event_pingpong_hit,p1>,<c4,c5,event_pingpong_start,p1>,<c4,c5,event_pingpong___frame,p1>,<c5,c6,event_pingpong_hit,p1>,<c5,c6,event_pingpong_start,p1>,<c5,c6,event_pingpong___frame,p1>,<c6,c7,event_pingpong_hit,p1>,<c6,c7,event_pingpong_start,p1>,<c6,c7,event_pingpong___frame,p1>,<c1,c2,event_pingpong_hit,p2>,<c1,c2,event_pingpong_start,p2>,<c1,c2,event_pingpong___frame,p2>,<c2,c3,event_pingpong_hit,p2>,<c2,c3,event_pingpong_start,p2>,<c2,c3,event_pingpong___frame,p2>,<c3,c4,event_pingpong_hit,p2>,<c3,c4,event_pingpong_start,p2>,<c3,c4,event_pingpong___frame,p2>,<c4,c5,event_pingpong_hit,p2>,<c4,c5,event_pingpong_start,p2>,<c4,c5,event_pingpong___frame,p2>,<c5,c6,event_pingpong_hit,p2>,<c5,c6,event_pingpong_start,p2>,<c5,c6,event_pingpong___frame,p2>,<c6,c7,event_pingpong_hit,p2>,<c6,c7,event_pingpong_start,p2>,<c6,c7,event_pingpong___frame,p2>}
changedInstance (cur:id, nxt:id, instance:id) <= {<c1,c2,p1>,<c1,c2,p2>,<c2,c3,p1>,<c2,c3,p2>,<c3,c4,p1>,<c3,c4,p2>,<c4,c5,p1>,<c4,c5,p2>,<c5,c6,p1>,<c5,c6,p2>,<c6,c7,p1>,<c6,c7,p2>}

SVPingPongOnePrims (config:id, instance:id, times:int) <= {<c1,p1,?>,<c1,p2,?>,<c2,p1,?>,<c2,p2,?>,<c3,p1,?>,<c3,p2,?>,<c4,p1,?>,<c4,p2,?>,<c5,p1,?>,<c5,p2,?>,<c6,p1,?>,<c6,p2,?>,<c7,p1,?>,<c7,p2,?>}



// Generic 'Type' constraints
order ⊆ Config[config as cur] ⨯ Config[config as nxt]
raisedEvent ⊆ order ⨯ allowedTransitions[event] ⨯ Instance[instance]
instanceInState ⊆ Instance[instance] ⨯ Config ⨯ State
changedInstance ⊆ order ⨯ Instance[instance]
    
// Machine specific `type` constraints
SVPingPongOnePrims[config,instance] ⊆ Config ⨯ (Instance ⨝ PingPong)[instance]




// Generic: All configurations are reachable
∀ c ∈ Config ∖ InitialConfig | c ⊆ (InitialConfig[config as cur] ⨝ ^<cur,nxt>order)[nxt -> config]

// Generic: Every transition can only happen by exactly one event
∀ o ∈ order | one o ⨝ raisedEvent

// Generic: In every configuration all machines have a state
∀ c ∈ Config, inst ∈ Instance | one instanceInState ⨝ c ⨝ inst

// Specific per machine: In every configuration iff a machine is in an initialized state then it must have values
∀ c ∈ Config, inst ∈ (Instance ⨝ PingPong)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇔ one SVPingPongOnePrims ⨝ c ⨝ inst)


// Generic: Transitions are only allowed between if an event is specified between two states
∀ o ∈ order ⨝ raisedEvent | (o[cur as config] ⨝ instanceInState)[state->from] ⨯ (o[nxt as config] ⨝ instanceInState)[state->to] ⨯ o[event] ⊆ allowedTransitions

// Transition function
∀ o ∈ order |  
  (
    // Events from PingPong  
    ∀ inst ∈ (Instance ⨝ PingPong)[instance] |  
      // Iff this is the instance that raised the event then one of the transitions must have happened 
      (some inst ∩ ((raisedEvent ⨝ o)[instance]) ⇔ 
        // Event PingPong.hit
        (let thisInst = inst,
             curPingPongState = (instanceInState ⨝ o[cur->config] ⨝ thisInst)[state],
             nxtPingPongState = (instanceInState ⨝ o[nxt->config] ⨝ thisInst)[state],
             curPingPongFlattened = (SVPingPongOnePrims ⨝ o[cur -> config] ⨝ thisInst)[times->curTimes],
             nxtPingPongFlattened = (SVPingPongOnePrims ⨝ o[nxt -> config] ⨝ thisInst)[times->nxtTimes] |
          ( 
             
            // Postconditions
            (some (curPingPongFlattened ⨯ nxtPingPongFlattened) where (nxtTimes = curTimes  +  1))  ∧ 
            // Generic event conditions
            // Force the instance to go to the correct next state
            nxtPingPongState = (curPingPongState[state as from] ⨝ (allowedTransitions ⨝ EventPingPongHit))[to->state] ∧
            // Make sure this instance is in the change set
            thisInst ⊆ (changedInstance ⨝ o)[instance]
            // Make sure the right event is raised
            ∧ (o ⨝ raisedEvent)[event] = EventPingPongHit ∧ 
            // Make sure that the changed instance set only contains as many tuples as where asserted as beign members 
            some (changedInstance ⨝ o)[instance][count() as nci] where nci = 1
          
          )
        )
         ∨ 
        // Event PingPong.start
        (let thisInst = inst,
             curPingPongState = (instanceInState ⨝ o[cur->config] ⨝ thisInst)[state],
             nxtPingPongState = (instanceInState ⨝ o[nxt->config] ⨝ thisInst)[state],
             curPingPongFlattened = (SVPingPongOnePrims ⨝ o[cur -> config] ⨝ thisInst)[times->curTimes],
             nxtPingPongFlattened = (SVPingPongOnePrims ⨝ o[nxt -> config] ⨝ thisInst)[times->nxtTimes] |
          ( 
             
            // Postconditions
            (some (nxtPingPongFlattened) where (nxtTimes = 0))  ∧ 
            // Generic event conditions
            // Force the instance to go to the correct next state
            nxtPingPongState = (curPingPongState[state as from] ⨝ (allowedTransitions ⨝ EventPingPongStart))[to->state] ∧
            // Make sure this instance is in the change set
            thisInst ⊆ (changedInstance ⨝ o)[instance]
            // Make sure the right event is raised
            ∧ (o ⨝ raisedEvent)[event] = EventPingPongStart ∧ 
            // Make sure that the changed instance set only contains as many tuples as where asserted as beign members 
            some (changedInstance ⨝ o)[instance][count() as nci] where nci = 1
          
          )
        )
      ) 
      ∧
      // Iff it is not a transitioning instance, frame the values
      (no inst ∩ (changedInstance ⨝ o)[instance] ⇔
        // Frame values if needed
        let thisInst = inst,
            curPingPongState = (instanceInState ⨝ o[cur->config] ⨝ thisInst)[state],
            nxtPingPongState = (instanceInState ⨝ o[nxt->config] ⨝ thisInst)[state],
            curPingPongFlattened = (SVPingPongOnePrims ⨝ o[cur -> config] ⨝ thisInst)[times->curTimes],
            nxtPingPongFlattened = (SVPingPongOnePrims ⨝ o[nxt -> config] ⨝ thisInst)[times->nxtTimes] | (
          // State must stay the same
          nxtPingPongState = curPingPongState
          ∧
          (
            (no curPingPongFlattened) ∨ 
            (  
              // Postconditions
              (some (curPingPongFlattened ⨯ nxtPingPongFlattened) where (nxtTimes = curTimes))
            )
          )  
        )
      )
  )

// Asserts: this is where the checks get added
exists c: Config, p: SVPingPongOnePrims | some (c |x| p) where times = 5

objectives: minimize Config[count()]
