// Static configuration of state machines
// Define the specs that can take place in the transition system
Process (spec:id) = {<process>}

// Define all possible states for all machines
State (state:id) = {<state_uninitialized>,<state_finalized>,<state_process_notelected>,<state_process_elected>}
initialized (state:id) = {<state_process_notelected>,<state_process_elected>}
finalized (state:id) = {<state_finalized>}
uninitialized (state:id) = {<state_uninitialized>}
StateProcessNotElected (state:id) = {<state_process_notelected>}StateProcessElected (state:id) = {<state_process_elected>}

// Define which transitions are allowed (in the form of `from a state` -> ` via an event` -> `to a state`
allowedTransitions (from:id, to:id, event:id) = {<state_process_notelected,state_process_notelected,event_process_received__lower>,<state_process_notelected,state_process_notelected,event_process_send>,<state_process_notelected,state_process_elected,event_process_received__elected>,<state_process_notelected,state_process_notelected,event_process_received__higher>}
// Define each event as single relation so that the events can be used as variables in the constraints 
EventProcessReceived__higher (event:id) = {<event_process_received__higher>}
EventProcessSend (event:id) = {<event_process_send>}
EventProcessReceived__elected (event:id) = {<event_process_received__elected>}
EventProcess__frame (event:id) = {<event_process___frame>}
EventProcessReceived__lower (event:id) = {<event_process_received__lower>}


// Dynamic configuration of state machines
Config (config:id) >= {<c1>} <= {<c1>,<c2>,<c3>,<c4>,<c5>}
order (cur:id, nxt:id) <= {<c1,c2>,<c2,c3>,<c3,c4>,<c4,c5>}
first (config:id) = {<c1>}
last (config:id) <= {<c1>,<c2>,<c3>,<c4>,<c5>}
back (config:id) <= {<c1>,<c2>,<c3>,<c4>,<c5>}
loop (cur:id, nxt:id) <= {<c2,c1>,<c2,c2>,<c3,c1>,<c3,c2>,<c3,c3>,<c4,c1>,<c4,c2>,<c4,c3>,<c4,c4>,<c5,c1>,<c5,c2>,<c5,c3>,<c5,c4>,<c5,c5>}

Instance (spec:id, instance:id) = {<process,p2>,<process,p3>,<process,p1>}
instanceInState (config:id, instance:id, state:id) >= {<c1,p2,state_process_notelected>,<c1,p3,state_process_notelected>,<c1,p1,state_process_notelected>}<= {<c1,p1,state_uninitialized>,<c1,p1,state_process_elected>,<c1,p1,state_finalized>,<c1,p1,state_process_notelected>,<c1,p2,state_uninitialized>,<c1,p2,state_process_elected>,<c1,p2,state_finalized>,<c1,p2,state_process_notelected>,<c1,p3,state_uninitialized>,<c1,p3,state_process_elected>,<c1,p3,state_finalized>,<c1,p3,state_process_notelected>,<c2,p1,state_uninitialized>,<c2,p1,state_process_elected>,<c2,p1,state_finalized>,<c2,p1,state_process_notelected>,<c2,p2,state_uninitialized>,<c2,p2,state_process_elected>,<c2,p2,state_finalized>,<c2,p2,state_process_notelected>,<c2,p3,state_uninitialized>,<c2,p3,state_process_elected>,<c2,p3,state_finalized>,<c2,p3,state_process_notelected>,<c3,p1,state_uninitialized>,<c3,p1,state_process_elected>,<c3,p1,state_finalized>,<c3,p1,state_process_notelected>,<c3,p2,state_uninitialized>,<c3,p2,state_process_elected>,<c3,p2,state_finalized>,<c3,p2,state_process_notelected>,<c3,p3,state_uninitialized>,<c3,p3,state_process_elected>,<c3,p3,state_finalized>,<c3,p3,state_process_notelected>,<c4,p1,state_uninitialized>,<c4,p1,state_process_elected>,<c4,p1,state_finalized>,<c4,p1,state_process_notelected>,<c4,p2,state_uninitialized>,<c4,p2,state_process_elected>,<c4,p2,state_finalized>,<c4,p2,state_process_notelected>,<c4,p3,state_uninitialized>,<c4,p3,state_process_elected>,<c4,p3,state_finalized>,<c4,p3,state_process_notelected>,<c5,p1,state_uninitialized>,<c5,p1,state_process_elected>,<c5,p1,state_finalized>,<c5,p1,state_process_notelected>,<c5,p2,state_uninitialized>,<c5,p2,state_process_elected>,<c5,p2,state_finalized>,<c5,p2,state_process_notelected>,<c5,p3,state_uninitialized>,<c5,p3,state_process_elected>,<c5,p3,state_finalized>,<c5,p3,state_process_notelected>}
raisedEvent (cur:id, nxt:id, event:id, instance:id) <= {<c1,c2,event_process_send,p1>,<c2,c3,event_process_send,p1>,<c3,c4,event_process_send,p1>,<c4,c5,event_process_send,p1>,<c5,c5,event_process_send,p1>,<c5,c4,event_process_send,p1>,<c5,c3,event_process_send,p1>,<c5,c2,event_process_send,p1>,<c5,c1,event_process_send,p1>,<c1,c2,event_process_send,p2>,<c2,c3,event_process_send,p2>,<c3,c4,event_process_send,p2>,<c4,c5,event_process_send,p2>,<c5,c5,event_process_send,p2>,<c5,c4,event_process_send,p2>,<c5,c3,event_process_send,p2>,<c5,c2,event_process_send,p2>,<c5,c1,event_process_send,p2>,<c1,c2,event_process_send,p3>,<c2,c3,event_process_send,p3>,<c3,c4,event_process_send,p3>,<c4,c5,event_process_send,p3>,<c5,c5,event_process_send,p3>,<c5,c4,event_process_send,p3>,<c5,c3,event_process_send,p3>,<c5,c2,event_process_send,p3>,<c5,c1,event_process_send,p3>}
changedInstance (cur:id, nxt:id, instance:id) <= {<c1,c2,p1>,<c1,c2,p2>,<c1,c2,p3>,<c2,c3,p1>,<c2,c3,p2>,<c2,c3,p3>,<c3,c4,p1>,<c3,c4,p2>,<c3,c4,p3>,<c4,c5,p1>,<c4,c5,p2>,<c4,c5,p3>,<c5,c5,p1>,<c5,c5,p2>,<c5,c5,p3>,<c5,c4,p1>,<c5,c4,p2>,<c5,c4,p3>,<c5,c3,p1>,<c5,c3,p2>,<c5,c3,p3>,<c5,c2,p1>,<c5,c2,p2>,<c5,c2,p3>,<c5,c1,p1>,<c5,c1,p2>,<c5,c1,p3>}

ProcessPid (config:id, instance:id, pid:int) <= {<c1,p1,?>,<c2,p1,?>,<c3,p1,?>,<c4,p1,?>,<c5,p1,?>,<c1,p2,?>,<c2,p2,?>,<c3,p2,?>,<c4,p2,?>,<c5,p2,?>,<c1,p3,?>,<c2,p3,?>,<c3,p3,?>,<c4,p3,?>,<c5,p3,?>}
ProcessToSend (config:id, instance:id, toSend:int) <= {<c1,p1,?>,<c2,p1,?>,<c3,p1,?>,<c4,p1,?>,<c5,p1,?>,<c1,p2,?>,<c2,p2,?>,<c3,p2,?>,<c4,p2,?>,<c5,p2,?>,<c1,p3,?>,<c2,p3,?>,<c3,p3,?>,<c4,p3,?>,<c5,p3,?>}
ProcessSucc (config:id, instance:id, succ:id) >= {<c1,p3,p1>,<c1,p1,p2>,<c1,p2,p3>} <= {<c2,p1,p1>,<c2,p1,p2>,<c2,p1,p3>,<c3,p1,p1>,<c3,p1,p2>,<c3,p1,p3>,<c4,p1,p1>,<c4,p1,p2>,<c4,p1,p3>,<c5,p1,p1>,<c5,p1,p2>,<c5,p1,p3>,<c2,p2,p1>,<c2,p2,p2>,<c2,p2,p3>,<c3,p2,p1>,<c3,p2,p2>,<c3,p2,p3>,<c4,p2,p1>,<c4,p2,p2>,<c4,p2,p3>,<c5,p2,p1>,<c5,p2,p2>,<c5,p2,p3>,<c2,p3,p1>,<c2,p3,p2>,<c2,p3,p3>,<c3,p3,p1>,<c3,p3,p2>,<c3,p3,p3>,<c4,p3,p1>,<c4,p3,p2>,<c4,p3,p3>,<c5,p3,p1>,<c5,p3,p2>,<c5,p3,p3>}


ParamEventProcessReceived__higherAnId (cur:id, nxt:id, anId:int) <= {<c1,c2,?>,<c2,c3,?>,<c3,c4,?>,<c4,c5,?>,<c5,c5,?>,<c5,c4,?>,<c5,c3,?>,<c5,c2,?>,<c5,c1,?>}
ParamEventProcessReceived__lowerAnId (cur:id, nxt:id, anId:int) <= {<c1,c2,?>,<c2,c3,?>,<c3,c4,?>,<c4,c5,?>,<c5,c5,?>,<c5,c4,?>,<c5,c3,?>,<c5,c2,?>,<c5,c1,?>}
ParamEventProcessReceived__electedAnId (cur:id, nxt:id, anId:int) <= {<c1,c2,?>,<c2,c3,?>,<c3,c4,?>,<c4,c5,?>,<c5,c5,?>,<c5,c4,?>,<c5,c3,?>,<c5,c2,?>,<c5,c1,?>}

// Constraints for the configuration and ordering relations
order ⊆ Config[config as cur] ⨯ Config[config as nxt]
last = Config ∖ order[cur->config]  // There is only one last configuration
back ⊆ Config 
lone back   
loop ⊆ last[config as cur] ⨯ back[config as nxt] // Loop contains at most one tuple going back from the last configuration to the 

// Generic 'Type' constraints    
raisedEvent ⊆ (order ∪ loop) ⨯ allowedTransitions[event] ⨯ Instance[instance]
instanceInState ⊆ Instance[instance] ⨯ Config ⨯ State
changedInstance ⊆ (order ∪ loop) ⨯ Instance[instance]
    
// Machine specific `type` constraints
ProcessPid[config,instance]  ⊆ Config ⨯ (Instance ⨝ Process)[instance]
ProcessToSend[config,instance]  ⊆ Config ⨯ (Instance ⨝ Process)[instance]
ProcessSucc  ⊆ Config ⨯ (Instance ⨝ Process)[instance] ⨯ (Instance ⨝ Process)[instance->succ]

ParamEventProcessReceived__lowerAnId[cur,nxt] ⊆ order ∪ loop
ParamEventProcessReceived__higherAnId[cur,nxt] ⊆ order ∪ loop
ParamEventProcessReceived__electedAnId[cur,nxt] ⊆ order ∪ loop

// Specific per event
∀ step ∈ (order ∪ loop) ⨝ raisedEvent | (
  (some (step ⨝ EventProcessReceived__lower) ⇔ one (step ⨝ ParamEventProcessReceived__lowerAnId)) ∧
  (some (step ⨝ EventProcessReceived__higher) ⇔ one (step ⨝ ParamEventProcessReceived__higherAnId)) ∧
  (some (step ⨝ EventProcessReceived__elected) ⇔ one (step ⨝ ParamEventProcessReceived__electedAnId))
)

// Generic: All configurations are reachable
∀ c ∈ Config ∖ first | c ⊆ (first[config as cur] ⨝ ^<cur,nxt>order)[nxt -> config]

// Generic: Every transition can only happen by exactly one event
∀ o ∈ order ∪ loop | one o ⨝ raisedEvent

// Specif: In every configuration all machines have a state IFF its a machine which is not empty
∀ c ∈ Config, inst ∈ Instance | one instanceInState ⨝ c ⨝ inst

// Specific per machine: In every configuration iff a machine is in an initialized state then it must have values
∀ c ∈ Config, inst ∈ (Instance ⨝ Process)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇔ one ProcessPid ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Process)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇔ one ProcessToSend ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Process)[instance] | (no (((c ⨯ inst) ⨝ instanceInState)[state] ∩ initialized) ⇒ no ProcessSucc ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Process)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇒ one ProcessSucc ⨝ c ⨝ inst)


// Generic: Transitions are only allowed between if an event is specified between two states
∀ o ∈ (order ∪ loop) ⨝ raisedEvent | (o[cur as config] ⨝ instanceInState)[state->from] ⨯ (o[nxt as config] ⨝ instanceInState)[state->to] ⨯ o[event] ⊆ allowedTransitions

// Change set predicates
pred inChangeSet[step: (cur:id, nxt:id), instances: (instance:id)]
  = instances ⊆ (changedInstance ⨝ step)[instance]
 
pred notInChangeSet[step: (cur:id, nxt:id), instances: (instance:id)]
  = no instances ∩ (changedInstance ⨝ step)[instance]

pred changeSetCanContain[step: (cur:id, nxt:id), instances: (instance:id)]
  = (changedInstance ⨝ step)[instance] ⊆ instances 

// Generic predicates
pred forceState[curState: (state:id), nxtState: (state:id), raisedEvent: (event:id)]
  = nxtState = (curState[state as from] ⨝ (allowedTransitions ⨝ raisedEvent))[to->state]

pred inState[config: (config:id), instance: (instance:id), state: (state:id)]
  = ((instance ⨯ config) ⨝ instanceInState)[state] ⊆ state

pred eventProcessSend[step:(cur:id, nxt:id), process: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ process)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ process)[state] |
    ( 
      // Preconditions 
      (((((some ((process ⨝ (ProcessToSend ⨝ cur))[toSend][toSend as cur_toSend] ⨯ (process ⨝ (ProcessPid ⨝ cur))[pid][pid as cur_pid]) where (cur_pid > cur_toSend))) ⇒ ((eventProcessReceived__elected[step, (process ⨝ (ProcessSucc ⨝ cur))[succ][succ as instance], (process ⨝ (ProcessPid ⨝ cur))[pid][pid as anId]] ∨ (eventProcessReceived__higher[step, (process ⨝ (ProcessSucc ⨝ cur))[succ][succ as instance], (process ⨝ (ProcessPid ⨝ cur))[pid][pid as anId]] ∨ eventProcessReceived__lower[step, (process ⨝ (ProcessSucc ⨝ cur))[succ][succ as instance], (process ⨝ (ProcessPid ⨝ cur))[pid][pid as anId]]))))) ∧ ((¬ ((((some ((process ⨝ (ProcessToSend ⨝ cur))[toSend][toSend as cur_toSend] ⨯ (process ⨝ (ProcessPid ⨝ cur))[pid][pid as cur_pid]) where (cur_pid > cur_toSend))))) ⇒ ((eventProcessReceived__elected[step, (process ⨝ (ProcessSucc ⨝ cur))[succ][succ as instance], (process ⨝ (ProcessToSend ⨝ cur))[toSend][toSend as anId]] ∨ (eventProcessReceived__higher[step, (process ⨝ (ProcessSucc ⨝ cur))[succ][succ as instance], (process ⨝ (ProcessToSend ⨝ cur))[toSend][toSend as anId]] ∨ eventProcessReceived__lower[step, (process ⨝ (ProcessSucc ⨝ cur))[succ][succ as instance], (process ⨝ (ProcessToSend ⨝ cur))[toSend][toSend as anId]]))))))  ∧ 
      // Postconditions
      (some ((process ⨝ (ProcessPid ⨝ nxt))[pid][pid as nxt_pid] ⨯ (process ⨝ (ProcessPid ⨝ cur))[pid][pid as cur_pid]) where (nxt_pid = cur_pid)) ∧
      (some ((process ⨝ (ProcessToSend ⨝ nxt))[toSend][toSend as nxt_toSend] ⨯ (process ⨝ (ProcessToSend ⨝ cur))[toSend][toSend as cur_toSend]) where (nxt_toSend = cur_toSend)) ∧
      (process ⨝ (ProcessSucc ⨝ nxt))[succ] = (process ⨝ (ProcessSucc ⨝ cur))[succ]  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventProcessSend] ∧
      // Make sure this instance is in the change set
      inChangeSet[step, process]
    )

pred eventProcessReceived__higher[step:(cur:id, nxt:id), process: (instance:id), anId: (anId:int)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ process)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ process)[state] |
    ( 
      // Preconditions 
      (some ((process ⨝ (ProcessPid ⨝ cur))[pid][pid as cur_pid] ⨯ anId[anId as param_anId]) where (cur_pid < param_anId))  ∧ 
      // Postconditions
      (some ((process ⨝ (ProcessPid ⨝ nxt))[pid][pid as nxt_pid] ⨯ (process ⨝ (ProcessPid ⨝ cur))[pid][pid as cur_pid]) where (nxt_pid = cur_pid)) ∧
      (process ⨝ (ProcessSucc ⨝ nxt))[succ] = (process ⨝ (ProcessSucc ⨝ cur))[succ] ∧
      (some ((process ⨝ (ProcessToSend ⨝ nxt))[toSend][toSend as nxt_toSend] ⨯ anId[anId as param_anId]) where (nxt_toSend = param_anId))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventProcessReceived__higher] ∧
      // Make sure this instance is in the change set
      inChangeSet[step, process]
    )

pred eventProcessReceived__lower[step:(cur:id, nxt:id), process: (instance:id), anId: (anId:int)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ process)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ process)[state] |
    ( 
      // Preconditions 
      (some ((process ⨝ (ProcessPid ⨝ cur))[pid][pid as cur_pid] ⨯ anId[anId as param_anId]) where (param_anId < cur_pid))  ∧ 
      // Postconditions
      (some ((process ⨝ (ProcessPid ⨝ nxt))[pid][pid as nxt_pid] ⨯ (process ⨝ (ProcessPid ⨝ cur))[pid][pid as cur_pid]) where (nxt_pid = cur_pid)) ∧
      (some ((process ⨝ (ProcessToSend ⨝ nxt))[toSend][toSend as nxt_toSend] ⨯ (process ⨝ (ProcessToSend ⨝ cur))[toSend][toSend as cur_toSend]) where (nxt_toSend = cur_toSend)) ∧
      (process ⨝ (ProcessSucc ⨝ nxt))[succ] = (process ⨝ (ProcessSucc ⨝ cur))[succ]  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventProcessReceived__lower] ∧
      // Make sure this instance is in the change set
      inChangeSet[step, process]
    )

pred frameProcess[step: (cur:id, nxt:id), process: (instance:id)] 
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ process)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ process)[state] | (
    nxtState = curState ∧
    (
      curState ⊆ uninitialized ∨ 
      (// Postconditions
       (some ((process ⨝ (ProcessPid ⨝ nxt))[pid][pid as nxt_pid] ⨯ (process ⨝ (ProcessPid ⨝ cur))[pid][pid as cur_pid]) where (nxt_pid = cur_pid)) ∧
       (some ((process ⨝ (ProcessToSend ⨝ nxt))[toSend][toSend as nxt_toSend] ⨯ (process ⨝ (ProcessToSend ⨝ cur))[toSend][toSend as cur_toSend]) where (nxt_toSend = cur_toSend)) ∧
       (process ⨝ (ProcessSucc ⨝ nxt))[succ] = (process ⨝ (ProcessSucc ⨝ cur))[succ])
    )
  )

pred eventProcessReceived__elected[step:(cur:id, nxt:id), process: (instance:id), anId: (anId:int)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ process)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ process)[state] |
    ( 
      // Preconditions 
      (some ((process ⨝ (ProcessPid ⨝ cur))[pid][pid as cur_pid] ⨯ anId[anId as param_anId]) where (cur_pid = param_anId))  ∧ 
      // Postconditions
      (some ((process ⨝ (ProcessPid ⨝ nxt))[pid][pid as nxt_pid] ⨯ (process ⨝ (ProcessPid ⨝ cur))[pid][pid as cur_pid]) where (nxt_pid = cur_pid)) ∧
      (some ((process ⨝ (ProcessToSend ⨝ nxt))[toSend][toSend as nxt_toSend] ⨯ (process ⨝ (ProcessToSend ⨝ cur))[toSend][toSend as cur_toSend]) where (nxt_toSend = cur_toSend)) ∧
      (process ⨝ (ProcessSucc ⨝ nxt))[succ] = (process ⨝ (ProcessSucc ⨝ cur))[succ]  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventProcessReceived__elected] ∧
      // Make sure this instance is in the change set
      inChangeSet[step, process]
    )


pred possibleTransitionsProcess[step: (cur:id, nxt:id)] 
  = ∀ inst ∈ (Instance ⨝ Process)[instance] |
    (some inst ∩ ((raisedEvent ⨝ step)[instance]) ⇔ (
      (eventProcessSend[step,inst] ∧
      (step ⨝ raisedEvent)[event] = EventProcessSend ∧
      let cur = step[cur->config], process = inst, process = (process ⨝ (ProcessSucc ⨝ cur))[succ][succ as instance] | changeSetCanContain[step, inst ∪ process])
    ))
    ∧
    (notInChangeSet[step, inst] ⇒ frameProcess[step, inst])


// Transition function
∀ step ∈ order ∪ loop| possibleTransitionsProcess[step]


// Fact: UniqueIds
∀ cur_1 ∈ Config | (∀ p1 ∈ (Instance ⨝ Process)[instance],p2 ∈ (Instance ⨝ Process)[instance] | ((((inState[cur_1, p1, initialized] ∧ (inState[cur_1, p2, initialized] ∧ (some ((p2 ⨝ (ProcessPid ⨝ cur_1))[pid][pid as p2_pid] ⨯ (p1 ⨝ (ProcessPid ⨝ cur_1))[pid][pid as p1_pid]) where (p1_pid = p2_pid))))) ⇒ p1 = p2)))
// Fact: PositiveIds
∀ cur_1 ∈ Config | (∀ p ∈ (Instance ⨝ Process)[instance] | ((inState[cur_1, p, initialized] ⇒ (some ((p ⨝ (ProcessPid ⨝ cur_1))[pid][pid as p_pid]) where (p_pid > 0)))))
// Fact: InitialToSendIsZero
let cur_1 = first | (∀ p ∈ (Instance ⨝ Process)[instance] | (some ((p ⨝ (ProcessToSend ⨝ cur_1))[toSend][toSend as p_toSend]) where (p_toSend = 0)))
// Fact: Progress
(∀ p ∈ (Instance ⨝ Process)[instance] | ∃ cur_1 ∈ Config | let step_1 = (order ⨝ cur_1[config as cur]), prev = cur_1, cur_2 = step_1[nxt->config] | EventProcessSend ⊆ (raisedEvent ⨝ step_1 ⨝ p)[event])
// Assert: AProcessWillAlwaysBeElected
∀ cur_1 ∈ Config | (∀ p ∈ (Instance ⨝ Process)[instance] | ¬ ((inState[cur_1, p, StateProcessElected])))
// Force infinite traces
some loop 


// Minimize the number of steps by minimizing the number of Configurations
objectives: minimize Config[count()]