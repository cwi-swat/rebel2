// Static configuration of state machines
// Define the specs that can take place in the transition system
Tailer (spec:id) = {<tailer>}
Follower (spec:id) = {<follower>}
Leader (spec:id) = {<leader>}

// Define all possible states for all machines
State (state:id) = {<state_uninitialized>,<state_finalized>,<state_tailer_active>,<state_tailer_waiting>,<state_follower_active>,<state_leader_active>}
initialized (state:id) = {<state_tailer_active>,<state_tailer_waiting>,<state_follower_active>,<state_leader_active>}
finalized (state:id) = {<state_finalized>}
uninitialized (state:id) = {<state_uninitialized>}
StateTailerWaiting (state:id) = {<state_tailer_waiting>}StateTailerActive (state:id) = {<state_tailer_active>}
StateFollowerActive (state:id) = {<state_follower_active>}
StateLeaderActive (state:id) = {<state_leader_active>}

// Define which transitions are allowed (in the form of `from a state` -> ` via an event` -> `to a state`
allowedTransitions (from:id, to:id, event:id) = {<state_tailer_waiting,state_tailer_active,event_tailer_connected>,<state_uninitialized,state_tailer_waiting,event_tailer_start>,<state_tailer_active,state_tailer_active,event_tailer_hit>,<state_follower_active,state_follower_active,event_follower_hit>,<state_uninitialized,state_follower_active,event_follower_start>,<state_uninitialized,state_leader_active,event_leader_start>,<state_leader_active,state_leader_active,event_leader_hit>}
// Define each event as single relation so that the events can be used as variables in the constraints 
EventTailerConnected (event:id) = {<event_tailer_connected>}
EventTailer__frame (event:id) = {<event_tailer___frame>}
EventLeader__frame (event:id) = {<event_leader___frame>}
EventFollower__frame (event:id) = {<event_follower___frame>}
EventTailerStart (event:id) = {<event_tailer_start>}
EventLeaderStart (event:id) = {<event_leader_start>}
EventFollowerStart (event:id) = {<event_follower_start>}
EventLeaderHit (event:id) = {<event_leader_hit>}
EventFollowerHit (event:id) = {<event_follower_hit>}
EventTailerHit (event:id) = {<event_tailer_hit>}


// Dynamic configuration of state machines
Config (config:id) >= {<c1>} <= {<c1>,<c2>,<c3>,<c4>,<c5>,<c6>,<c7>,<c8>,<c9>}
order (cur:id, nxt:id) <= {<c1,c2>,<c2,c3>,<c3,c4>,<c4,c5>,<c5,c6>,<c6,c7>,<c7,c8>,<c8,c9>}
InitialConfig (config:id) = {<c1>}

Instance (spec:id, instance:id) = {<follower,f1>,<follower,f2>,<tailer,t2>,<tailer,t1>,<leader,l1>,<leader,l2>}
instanceInState (config:id, instance:id, state:id) >= {<c1,f1,state_uninitialized>,<c1,f2,state_uninitialized>,<c1,t2,state_uninitialized>,<c1,t1,state_uninitialized>,<c1,l1,state_uninitialized>,<c1,l2,state_uninitialized>}<= {<c1,t1,state_uninitialized>,<c1,t1,state_finalized>,<c1,t1,state_tailer_waiting>,<c1,t1,state_tailer_active>,<c1,t2,state_uninitialized>,<c1,t2,state_finalized>,<c1,t2,state_tailer_waiting>,<c1,t2,state_tailer_active>,<c1,f1,state_uninitialized>,<c1,f1,state_finalized>,<c1,f1,state_follower_active>,<c1,f2,state_uninitialized>,<c1,f2,state_finalized>,<c1,f2,state_follower_active>,<c1,l1,state_uninitialized>,<c1,l1,state_leader_active>,<c1,l1,state_finalized>,<c1,l2,state_uninitialized>,<c1,l2,state_leader_active>,<c1,l2,state_finalized>,<c2,t1,state_uninitialized>,<c2,t1,state_finalized>,<c2,t1,state_tailer_waiting>,<c2,t1,state_tailer_active>,<c2,t2,state_uninitialized>,<c2,t2,state_finalized>,<c2,t2,state_tailer_waiting>,<c2,t2,state_tailer_active>,<c2,f1,state_uninitialized>,<c2,f1,state_finalized>,<c2,f1,state_follower_active>,<c2,f2,state_uninitialized>,<c2,f2,state_finalized>,<c2,f2,state_follower_active>,<c2,l1,state_uninitialized>,<c2,l1,state_leader_active>,<c2,l1,state_finalized>,<c2,l2,state_uninitialized>,<c2,l2,state_leader_active>,<c2,l2,state_finalized>,<c3,t1,state_uninitialized>,<c3,t1,state_finalized>,<c3,t1,state_tailer_waiting>,<c3,t1,state_tailer_active>,<c3,t2,state_uninitialized>,<c3,t2,state_finalized>,<c3,t2,state_tailer_waiting>,<c3,t2,state_tailer_active>,<c3,f1,state_uninitialized>,<c3,f1,state_finalized>,<c3,f1,state_follower_active>,<c3,f2,state_uninitialized>,<c3,f2,state_finalized>,<c3,f2,state_follower_active>,<c3,l1,state_uninitialized>,<c3,l1,state_leader_active>,<c3,l1,state_finalized>,<c3,l2,state_uninitialized>,<c3,l2,state_leader_active>,<c3,l2,state_finalized>,<c4,t1,state_uninitialized>,<c4,t1,state_finalized>,<c4,t1,state_tailer_waiting>,<c4,t1,state_tailer_active>,<c4,t2,state_uninitialized>,<c4,t2,state_finalized>,<c4,t2,state_tailer_waiting>,<c4,t2,state_tailer_active>,<c4,f1,state_uninitialized>,<c4,f1,state_finalized>,<c4,f1,state_follower_active>,<c4,f2,state_uninitialized>,<c4,f2,state_finalized>,<c4,f2,state_follower_active>,<c4,l1,state_uninitialized>,<c4,l1,state_leader_active>,<c4,l1,state_finalized>,<c4,l2,state_uninitialized>,<c4,l2,state_leader_active>,<c4,l2,state_finalized>,<c5,t1,state_uninitialized>,<c5,t1,state_finalized>,<c5,t1,state_tailer_waiting>,<c5,t1,state_tailer_active>,<c5,t2,state_uninitialized>,<c5,t2,state_finalized>,<c5,t2,state_tailer_waiting>,<c5,t2,state_tailer_active>,<c5,f1,state_uninitialized>,<c5,f1,state_finalized>,<c5,f1,state_follower_active>,<c5,f2,state_uninitialized>,<c5,f2,state_finalized>,<c5,f2,state_follower_active>,<c5,l1,state_uninitialized>,<c5,l1,state_leader_active>,<c5,l1,state_finalized>,<c5,l2,state_uninitialized>,<c5,l2,state_leader_active>,<c5,l2,state_finalized>,<c6,t1,state_uninitialized>,<c6,t1,state_finalized>,<c6,t1,state_tailer_waiting>,<c6,t1,state_tailer_active>,<c6,t2,state_uninitialized>,<c6,t2,state_finalized>,<c6,t2,state_tailer_waiting>,<c6,t2,state_tailer_active>,<c6,f1,state_uninitialized>,<c6,f1,state_finalized>,<c6,f1,state_follower_active>,<c6,f2,state_uninitialized>,<c6,f2,state_finalized>,<c6,f2,state_follower_active>,<c6,l1,state_uninitialized>,<c6,l1,state_leader_active>,<c6,l1,state_finalized>,<c6,l2,state_uninitialized>,<c6,l2,state_leader_active>,<c6,l2,state_finalized>,<c7,t1,state_uninitialized>,<c7,t1,state_finalized>,<c7,t1,state_tailer_waiting>,<c7,t1,state_tailer_active>,<c7,t2,state_uninitialized>,<c7,t2,state_finalized>,<c7,t2,state_tailer_waiting>,<c7,t2,state_tailer_active>,<c7,f1,state_uninitialized>,<c7,f1,state_finalized>,<c7,f1,state_follower_active>,<c7,f2,state_uninitialized>,<c7,f2,state_finalized>,<c7,f2,state_follower_active>,<c7,l1,state_uninitialized>,<c7,l1,state_leader_active>,<c7,l1,state_finalized>,<c7,l2,state_uninitialized>,<c7,l2,state_leader_active>,<c7,l2,state_finalized>,<c8,t1,state_uninitialized>,<c8,t1,state_finalized>,<c8,t1,state_tailer_waiting>,<c8,t1,state_tailer_active>,<c8,t2,state_uninitialized>,<c8,t2,state_finalized>,<c8,t2,state_tailer_waiting>,<c8,t2,state_tailer_active>,<c8,f1,state_uninitialized>,<c8,f1,state_finalized>,<c8,f1,state_follower_active>,<c8,f2,state_uninitialized>,<c8,f2,state_finalized>,<c8,f2,state_follower_active>,<c8,l1,state_uninitialized>,<c8,l1,state_leader_active>,<c8,l1,state_finalized>,<c8,l2,state_uninitialized>,<c8,l2,state_leader_active>,<c8,l2,state_finalized>,<c9,t1,state_uninitialized>,<c9,t1,state_finalized>,<c9,t1,state_tailer_waiting>,<c9,t1,state_tailer_active>,<c9,t2,state_uninitialized>,<c9,t2,state_finalized>,<c9,t2,state_tailer_waiting>,<c9,t2,state_tailer_active>,<c9,f1,state_uninitialized>,<c9,f1,state_finalized>,<c9,f1,state_follower_active>,<c9,f2,state_uninitialized>,<c9,f2,state_finalized>,<c9,f2,state_follower_active>,<c9,l1,state_uninitialized>,<c9,l1,state_leader_active>,<c9,l1,state_finalized>,<c9,l2,state_uninitialized>,<c9,l2,state_leader_active>,<c9,l2,state_finalized>}
raisedEvent (cur:id, nxt:id, event:id, instance:id) <= {<c1,c2,event_tailer_start,t1>,<c1,c2,event_tailer_connected,t1>,<c1,c2,event_tailer___frame,t1>,<c1,c2,event_tailer_hit,t1>,<c2,c3,event_tailer_start,t1>,<c2,c3,event_tailer_connected,t1>,<c2,c3,event_tailer___frame,t1>,<c2,c3,event_tailer_hit,t1>,<c3,c4,event_tailer_start,t1>,<c3,c4,event_tailer_connected,t1>,<c3,c4,event_tailer___frame,t1>,<c3,c4,event_tailer_hit,t1>,<c4,c5,event_tailer_start,t1>,<c4,c5,event_tailer_connected,t1>,<c4,c5,event_tailer___frame,t1>,<c4,c5,event_tailer_hit,t1>,<c5,c6,event_tailer_start,t1>,<c5,c6,event_tailer_connected,t1>,<c5,c6,event_tailer___frame,t1>,<c5,c6,event_tailer_hit,t1>,<c6,c7,event_tailer_start,t1>,<c6,c7,event_tailer_connected,t1>,<c6,c7,event_tailer___frame,t1>,<c6,c7,event_tailer_hit,t1>,<c7,c8,event_tailer_start,t1>,<c7,c8,event_tailer_connected,t1>,<c7,c8,event_tailer___frame,t1>,<c7,c8,event_tailer_hit,t1>,<c8,c9,event_tailer_start,t1>,<c8,c9,event_tailer_connected,t1>,<c8,c9,event_tailer___frame,t1>,<c8,c9,event_tailer_hit,t1>,<c1,c2,event_tailer_start,t2>,<c1,c2,event_tailer_connected,t2>,<c1,c2,event_tailer___frame,t2>,<c1,c2,event_tailer_hit,t2>,<c2,c3,event_tailer_start,t2>,<c2,c3,event_tailer_connected,t2>,<c2,c3,event_tailer___frame,t2>,<c2,c3,event_tailer_hit,t2>,<c3,c4,event_tailer_start,t2>,<c3,c4,event_tailer_connected,t2>,<c3,c4,event_tailer___frame,t2>,<c3,c4,event_tailer_hit,t2>,<c4,c5,event_tailer_start,t2>,<c4,c5,event_tailer_connected,t2>,<c4,c5,event_tailer___frame,t2>,<c4,c5,event_tailer_hit,t2>,<c5,c6,event_tailer_start,t2>,<c5,c6,event_tailer_connected,t2>,<c5,c6,event_tailer___frame,t2>,<c5,c6,event_tailer_hit,t2>,<c6,c7,event_tailer_start,t2>,<c6,c7,event_tailer_connected,t2>,<c6,c7,event_tailer___frame,t2>,<c6,c7,event_tailer_hit,t2>,<c7,c8,event_tailer_start,t2>,<c7,c8,event_tailer_connected,t2>,<c7,c8,event_tailer___frame,t2>,<c7,c8,event_tailer_hit,t2>,<c8,c9,event_tailer_start,t2>,<c8,c9,event_tailer_connected,t2>,<c8,c9,event_tailer___frame,t2>,<c8,c9,event_tailer_hit,t2>,<c1,c2,event_follower_start,f1>,<c1,c2,event_follower___frame,f1>,<c1,c2,event_follower_hit,f1>,<c2,c3,event_follower_start,f1>,<c2,c3,event_follower___frame,f1>,<c2,c3,event_follower_hit,f1>,<c3,c4,event_follower_start,f1>,<c3,c4,event_follower___frame,f1>,<c3,c4,event_follower_hit,f1>,<c4,c5,event_follower_start,f1>,<c4,c5,event_follower___frame,f1>,<c4,c5,event_follower_hit,f1>,<c5,c6,event_follower_start,f1>,<c5,c6,event_follower___frame,f1>,<c5,c6,event_follower_hit,f1>,<c6,c7,event_follower_start,f1>,<c6,c7,event_follower___frame,f1>,<c6,c7,event_follower_hit,f1>,<c7,c8,event_follower_start,f1>,<c7,c8,event_follower___frame,f1>,<c7,c8,event_follower_hit,f1>,<c8,c9,event_follower_start,f1>,<c8,c9,event_follower___frame,f1>,<c8,c9,event_follower_hit,f1>,<c1,c2,event_follower_start,f2>,<c1,c2,event_follower___frame,f2>,<c1,c2,event_follower_hit,f2>,<c2,c3,event_follower_start,f2>,<c2,c3,event_follower___frame,f2>,<c2,c3,event_follower_hit,f2>,<c3,c4,event_follower_start,f2>,<c3,c4,event_follower___frame,f2>,<c3,c4,event_follower_hit,f2>,<c4,c5,event_follower_start,f2>,<c4,c5,event_follower___frame,f2>,<c4,c5,event_follower_hit,f2>,<c5,c6,event_follower_start,f2>,<c5,c6,event_follower___frame,f2>,<c5,c6,event_follower_hit,f2>,<c6,c7,event_follower_start,f2>,<c6,c7,event_follower___frame,f2>,<c6,c7,event_follower_hit,f2>,<c7,c8,event_follower_start,f2>,<c7,c8,event_follower___frame,f2>,<c7,c8,event_follower_hit,f2>,<c8,c9,event_follower_start,f2>,<c8,c9,event_follower___frame,f2>,<c8,c9,event_follower_hit,f2>,<c1,c2,event_leader_hit,l1>,<c1,c2,event_leader_start,l1>,<c1,c2,event_leader___frame,l1>,<c2,c3,event_leader_hit,l1>,<c2,c3,event_leader_start,l1>,<c2,c3,event_leader___frame,l1>,<c3,c4,event_leader_hit,l1>,<c3,c4,event_leader_start,l1>,<c3,c4,event_leader___frame,l1>,<c4,c5,event_leader_hit,l1>,<c4,c5,event_leader_start,l1>,<c4,c5,event_leader___frame,l1>,<c5,c6,event_leader_hit,l1>,<c5,c6,event_leader_start,l1>,<c5,c6,event_leader___frame,l1>,<c6,c7,event_leader_hit,l1>,<c6,c7,event_leader_start,l1>,<c6,c7,event_leader___frame,l1>,<c7,c8,event_leader_hit,l1>,<c7,c8,event_leader_start,l1>,<c7,c8,event_leader___frame,l1>,<c8,c9,event_leader_hit,l1>,<c8,c9,event_leader_start,l1>,<c8,c9,event_leader___frame,l1>,<c1,c2,event_leader_hit,l2>,<c1,c2,event_leader_start,l2>,<c1,c2,event_leader___frame,l2>,<c2,c3,event_leader_hit,l2>,<c2,c3,event_leader_start,l2>,<c2,c3,event_leader___frame,l2>,<c3,c4,event_leader_hit,l2>,<c3,c4,event_leader_start,l2>,<c3,c4,event_leader___frame,l2>,<c4,c5,event_leader_hit,l2>,<c4,c5,event_leader_start,l2>,<c4,c5,event_leader___frame,l2>,<c5,c6,event_leader_hit,l2>,<c5,c6,event_leader_start,l2>,<c5,c6,event_leader___frame,l2>,<c6,c7,event_leader_hit,l2>,<c6,c7,event_leader_start,l2>,<c6,c7,event_leader___frame,l2>,<c7,c8,event_leader_hit,l2>,<c7,c8,event_leader_start,l2>,<c7,c8,event_leader___frame,l2>,<c8,c9,event_leader_hit,l2>,<c8,c9,event_leader_start,l2>,<c8,c9,event_leader___frame,l2>}
changedInstance (cur:id, nxt:id, instance:id) <= {<c1,c2,l1>,<c1,c2,l2>,<c1,c2,f1>,<c1,c2,f2>,<c1,c2,t1>,<c1,c2,t2>,<c2,c3,l1>,<c2,c3,l2>,<c2,c3,f1>,<c2,c3,f2>,<c2,c3,t1>,<c2,c3,t2>,<c3,c4,l1>,<c3,c4,l2>,<c3,c4,f1>,<c3,c4,f2>,<c3,c4,t1>,<c3,c4,t2>,<c4,c5,l1>,<c4,c5,l2>,<c4,c5,f1>,<c4,c5,f2>,<c4,c5,t1>,<c4,c5,t2>,<c5,c6,l1>,<c5,c6,l2>,<c5,c6,f1>,<c5,c6,f2>,<c5,c6,t1>,<c5,c6,t2>,<c6,c7,l1>,<c6,c7,l2>,<c6,c7,f1>,<c6,c7,f2>,<c6,c7,t1>,<c6,c7,t2>,<c7,c8,l1>,<c7,c8,l2>,<c7,c8,f1>,<c7,c8,f2>,<c7,c8,t1>,<c7,c8,t2>,<c8,c9,l1>,<c8,c9,l2>,<c8,c9,f1>,<c8,c9,f2>,<c8,c9,t1>,<c8,c9,t2>}

TailerNrOfHits (config:id, instance:id, nrOfHits:int) <= {<c1,t1,?>,<c2,t1,?>,<c3,t1,?>,<c4,t1,?>,<c5,t1,?>,<c6,t1,?>,<c7,t1,?>,<c8,t1,?>,<c9,t1,?>,<c1,t2,?>,<c2,t2,?>,<c3,t2,?>,<c4,t2,?>,<c5,t2,?>,<c6,t2,?>,<c7,t2,?>,<c8,t2,?>,<c9,t2,?>}
FollowerTailer (config:id, instance:id, tailer:id) <= {<c1,f1,t1>,<c1,f1,t2>,<c2,f1,t1>,<c2,f1,t2>,<c3,f1,t1>,<c3,f1,t2>,<c4,f1,t1>,<c4,f1,t2>,<c5,f1,t1>,<c5,f1,t2>,<c6,f1,t1>,<c6,f1,t2>,<c7,f1,t1>,<c7,f1,t2>,<c8,f1,t1>,<c8,f1,t2>,<c9,f1,t1>,<c9,f1,t2>,<c1,f2,t1>,<c1,f2,t2>,<c2,f2,t1>,<c2,f2,t2>,<c3,f2,t1>,<c3,f2,t2>,<c4,f2,t1>,<c4,f2,t2>,<c5,f2,t1>,<c5,f2,t2>,<c6,f2,t1>,<c6,f2,t2>,<c7,f2,t1>,<c7,f2,t2>,<c8,f2,t1>,<c8,f2,t2>,<c9,f2,t1>,<c9,f2,t2>}
FollowerTimes (config:id, instance:id, times:int) <= {<c1,f1,?>,<c2,f1,?>,<c3,f1,?>,<c4,f1,?>,<c5,f1,?>,<c6,f1,?>,<c7,f1,?>,<c8,f1,?>,<c9,f1,?>,<c1,f2,?>,<c2,f2,?>,<c3,f2,?>,<c4,f2,?>,<c5,f2,?>,<c6,f2,?>,<c7,f2,?>,<c8,f2,?>,<c9,f2,?>}
LeaderTimes (config:id, instance:id, times:int) <= {<c1,l1,?>,<c2,l1,?>,<c3,l1,?>,<c4,l1,?>,<c5,l1,?>,<c6,l1,?>,<c7,l1,?>,<c8,l1,?>,<c9,l1,?>,<c1,l2,?>,<c2,l2,?>,<c3,l2,?>,<c4,l2,?>,<c5,l2,?>,<c6,l2,?>,<c7,l2,?>,<c8,l2,?>,<c9,l2,?>}
LeaderFollower (config:id, instance:id, follower:id) <= {<c1,l1,f1>,<c1,l1,f2>,<c2,l1,f1>,<c2,l1,f2>,<c3,l1,f1>,<c3,l1,f2>,<c4,l1,f1>,<c4,l1,f2>,<c5,l1,f1>,<c5,l1,f2>,<c6,l1,f1>,<c6,l1,f2>,<c7,l1,f1>,<c7,l1,f2>,<c8,l1,f1>,<c8,l1,f2>,<c9,l1,f1>,<c9,l1,f2>,<c1,l2,f1>,<c1,l2,f2>,<c2,l2,f1>,<c2,l2,f2>,<c3,l2,f1>,<c3,l2,f2>,<c4,l2,f1>,<c4,l2,f2>,<c5,l2,f1>,<c5,l2,f2>,<c6,l2,f1>,<c6,l2,f2>,<c7,l2,f1>,<c7,l2,f2>,<c8,l2,f1>,<c8,l2,f2>,<c9,l2,f1>,<c9,l2,f2>}

ParamEventFollowerStartTailer (cur:id, nxt:id, tailer:id) <= {<c1,c2,t1>,<c1,c2,t2>,<c2,c3,t1>,<c2,c3,t2>,<c3,c4,t1>,<c3,c4,t2>,<c4,c5,t1>,<c4,c5,t2>,<c5,c6,t1>,<c5,c6,t2>,<c6,c7,t1>,<c6,c7,t2>,<c7,c8,t1>,<c7,c8,t2>,<c8,c9,t1>,<c8,c9,t2>}
ParamEventLeaderStartFollower (cur:id, nxt:id, follower:id) <= {<c1,c2,f1>,<c1,c2,f2>,<c2,c3,f1>,<c2,c3,f2>,<c3,c4,f1>,<c3,c4,f2>,<c4,c5,f1>,<c4,c5,f2>,<c5,c6,f1>,<c5,c6,f2>,<c6,c7,f1>,<c6,c7,f2>,<c7,c8,f1>,<c7,c8,f2>,<c8,c9,f1>,<c8,c9,f2>}

// Generic 'Type' constraints
order ⊆ Config[config as cur] ⨯ Config[config as nxt]
raisedEvent ⊆ order ⨯ allowedTransitions[event] ⨯ Instance[instance]
instanceInState ⊆ Instance[instance] ⨯ Config ⨯ State
changedInstance ⊆ order ⨯ Instance[instance]
    
// Machine specific `type` constraints
TailerNrOfHits[config,instance]  ⊆ Config ⨯ (Instance ⨝ Tailer)[instance]
FollowerTailer  ⊆ Config ⨯ (Instance ⨝ Follower)[instance] ⨯ (Instance ⨝ Tailer)[instance->tailer]
FollowerTimes[config,instance]  ⊆ Config ⨯ (Instance ⨝ Follower)[instance]
LeaderTimes[config,instance]  ⊆ Config ⨯ (Instance ⨝ Leader)[instance]
LeaderFollower  ⊆ Config ⨯ (Instance ⨝ Leader)[instance] ⨯ (Instance ⨝ Follower)[instance->follower]

ParamEventFollowerStartTailer ⊆ order ⨯ (Instance ⨝ Tailer)[instance->tailer]
ParamEventLeaderStartFollower ⊆ order ⨯ (Instance ⨝ Follower)[instance->follower]

// Specific per event
∀ step ∈ order ⨝ raisedEvent | (
  (some (step ⨝ EventFollowerStart) ⇔ one (step ⨝ ParamEventFollowerStartTailer)) ∧
  (some (step ⨝ EventLeaderStart) ⇔ one (step ⨝ ParamEventLeaderStartFollower))
)

// Generic: All configurations are reachable
∀ c ∈ Config ∖ InitialConfig | c ⊆ (InitialConfig[config as cur] ⨝ ^<cur,nxt>order)[nxt -> config]

// Generic: Every transition can only happen by exactly one event
∀ o ∈ order | one o ⨝ raisedEvent

// Generic: In every configuration all machines have a state
∀ c ∈ Config, inst ∈ Instance | one instanceInState ⨝ c ⨝ inst

// Specific per machine: In every configuration iff a machine is in an initialized state then it must have values
∀ c ∈ Config, inst ∈ (Instance ⨝ Tailer)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇔ one TailerNrOfHits ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Follower)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇒ one FollowerTailer ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Follower)[instance] | (no (((c ⨯ inst) ⨝ instanceInState)[state] ∩ initialized) ⇒ no FollowerTailer ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Follower)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇔ one FollowerTimes ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Leader)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇔ one LeaderTimes ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Leader)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇒ one LeaderFollower ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Leader)[instance] | (no (((c ⨯ inst) ⨝ instanceInState)[state] ∩ initialized) ⇒ no LeaderFollower ⨝ c ⨝ inst)


// Generic: Transitions are only allowed between if an event is specified between two states
∀ o ∈ order ⨝ raisedEvent | (o[cur as config] ⨝ instanceInState)[state->from] ⨯ (o[nxt as config] ⨝ instanceInState)[state->to] ⨯ o[event] ⊆ allowedTransitions

// Generic predicates
pred forceState[curState: (state:id), nxtState: (state:id), raisedEvent: (event:id)]
  = nxtState = (curState[state as from] ⨝ (allowedTransitions ⨝ raisedEvent))[to->state]

pred inState[config: (config:id), instance: (instance:id), state: (state:id)]
  = ((instance ⨯ config) ⨝ instanceInState)[state] ⊆ state

pred eventTailerConnected[step:(cur:id, nxt:id), tailer: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ tailer)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ tailer)[state],
        curNrOfHits = (cur ⨝ TailerNrOfHits ⨝ tailer)[nrOfHits->curNrOfHits],
        nxtNrOfHits = (nxt ⨝ TailerNrOfHits ⨝ tailer)[nrOfHits->nxtNrOfHits] |
    ( 
       
      // Postconditions
      (some (nxtNrOfHits ⨯ curNrOfHits) where (nxtNrOfHits = curNrOfHits))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventTailerConnected] ∧
      // Make sure this instance is in the change set
      tailer ⊆ (changedInstance ⨝ step)[instance]
    )

pred frameTailer[step: (cur:id, nxt:id), tailer: (instance:id)] 
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ tailer)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ tailer)[state],
        curNrOfHits = (cur ⨝ TailerNrOfHits ⨝ tailer)[nrOfHits->curNrOfHits],
        nxtNrOfHits = (nxt ⨝ TailerNrOfHits ⨝ tailer)[nrOfHits->nxtNrOfHits] | (
    nxtState = curState ∧
    (
      curState ⊆ uninitialized ∨ 
      (// Postconditions
       (some (nxtNrOfHits ⨯ curNrOfHits) where (nxtNrOfHits = curNrOfHits)))
    )
  )

pred eventTailerHit[step:(cur:id, nxt:id), tailer: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ tailer)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ tailer)[state],
        curNrOfHits = (cur ⨝ TailerNrOfHits ⨝ tailer)[nrOfHits->curNrOfHits],
        nxtNrOfHits = (nxt ⨝ TailerNrOfHits ⨝ tailer)[nrOfHits->nxtNrOfHits] |
    ( 
       
      // Postconditions
      (some (nxtNrOfHits ⨯ curNrOfHits) where (nxtNrOfHits = curNrOfHits + 1))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventTailerHit] ∧
      // Make sure this instance is in the change set
      tailer ⊆ (changedInstance ⨝ step)[instance]
    )

pred eventTailerStart[step:(cur:id, nxt:id), tailer: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ tailer)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ tailer)[state],
        curNrOfHits = (cur ⨝ TailerNrOfHits ⨝ tailer)[nrOfHits->curNrOfHits],
        nxtNrOfHits = (nxt ⨝ TailerNrOfHits ⨝ tailer)[nrOfHits->nxtNrOfHits] |
    ( 
       
      // Postconditions
      (some (nxtNrOfHits) where (nxtNrOfHits = 0))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventTailerStart] ∧
      // Make sure this instance is in the change set
      tailer ⊆ (changedInstance ⨝ step)[instance]
    )


pred possibleTransitionsTailer[step: (cur:id, nxt:id)] 
  = ∀ inst ∈ (Instance ⨝ Tailer)[instance] |
    (some inst ∩ ((raisedEvent ⨝ step)[instance]) ⇔ (
      (eventTailerConnected[step,inst] ∧
      (step ⨝ raisedEvent)[event] = EventTailerConnected ∧
      (changedInstance ⨝ step)[instance] ⊆ inst)
      ∨
      (eventTailerHit[step,inst] ∧
      (step ⨝ raisedEvent)[event] = EventTailerHit ∧
      (changedInstance ⨝ step)[instance] ⊆ inst)
      ∨
      (eventTailerStart[step,inst] ∧
      (step ⨝ raisedEvent)[event] = EventTailerStart ∧
      (changedInstance ⨝ step)[instance] ⊆ inst)
    ))
    ∧
    (no inst ∩ (changedInstance ⨝ step)[instance] ⇔ frameTailer[step, inst])

pred eventFollowerHit[step:(cur:id, nxt:id), follower: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ follower)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ follower)[state],
        curTailer = (cur ⨝ FollowerTailer ⨝ follower)[tailer],
        nxtTailer = (nxt ⨝ FollowerTailer ⨝ follower)[tailer],
        curTimes = (cur ⨝ FollowerTimes ⨝ follower)[times->curTimes],
        nxtTimes = (nxt ⨝ FollowerTimes ⨝ follower)[times->nxtTimes] |
    ( 
      // Preconditions 
      eventTailerHit[step, curTailer[tailer][tailer as instance]]  ∧ 
      // Postconditions
      nxtTailer[tailer] = curTailer[tailer] ∧
      (some (curTimes ⨯ nxtTimes) where (nxtTimes = curTimes + 1))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventFollowerHit] ∧
      // Make sure this instance is in the change set
      follower ⊆ (changedInstance ⨝ step)[instance]
    )

pred eventFollowerStart[step:(cur:id, nxt:id), follower: (instance:id), paramTailer: (tailer:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ follower)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ follower)[state],
        curTailer = (cur ⨝ FollowerTailer ⨝ follower)[tailer],
        nxtTailer = (nxt ⨝ FollowerTailer ⨝ follower)[tailer],
        curTimes = (cur ⨝ FollowerTimes ⨝ follower)[times->curTimes],
        nxtTimes = (nxt ⨝ FollowerTimes ⨝ follower)[times->nxtTimes] |
    ( 
      // Preconditions 
      inState[cur, paramTailer[tailer->instance], StateTailerWaiting] ∧
      eventTailerConnected[step, paramTailer[tailer as instance]]  ∧ 
      // Postconditions
      (some (nxtTimes) where (nxtTimes = 0)) ∧
      nxtTailer[tailer] = paramTailer  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventFollowerStart] ∧
      // Make sure this instance is in the change set
      follower ⊆ (changedInstance ⨝ step)[instance]
    )

pred frameFollower[step: (cur:id, nxt:id), follower: (instance:id)] 
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ follower)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ follower)[state],
        curTailer = (cur ⨝ FollowerTailer ⨝ follower)[tailer],
        nxtTailer = (nxt ⨝ FollowerTailer ⨝ follower)[tailer],
        curTimes = (cur ⨝ FollowerTimes ⨝ follower)[times->curTimes],
        nxtTimes = (nxt ⨝ FollowerTimes ⨝ follower)[times->nxtTimes] | (
    nxtState = curState ∧
    (
      curState ⊆ uninitialized ∨ 
      (// Postconditions
       nxtTailer[tailer] = curTailer[tailer] ∧
       (some (curTimes ⨯ nxtTimes) where (nxtTimes = curTimes)))
    )
  )


pred possibleTransitionsFollower[step: (cur:id, nxt:id)] 
  = ∀ inst ∈ (Instance ⨝ Follower)[instance] |
    (some inst ∩ ((raisedEvent ⨝ step)[instance]) ⇔ (
      (eventFollowerHit[step,inst] ∧
      (step ⨝ raisedEvent)[event] = EventFollowerHit ∧
      let cur = step[cur->config], tailer = (FollowerTailer |x| cur |x| inst)[tailer->instance] | (changedInstance ⨝ step)[instance] ⊆ inst ∪ tailer)
      ∨
      (eventFollowerStart[step,inst,(step ⨝ ParamEventFollowerStartTailer)[tailer]] ∧
      (step ⨝ raisedEvent)[event] = EventFollowerStart ∧
      let cur = step[cur->config], tailer = (ParamEventFollowerStartTailer |x| step)[tailer->instance] | (changedInstance ⨝ step)[instance] ⊆ inst ∪ tailer)
    ))
    ∧
    (no inst ∩ (changedInstance ⨝ step)[instance] ⇔ frameFollower[step, inst])

pred frameLeader[step: (cur:id, nxt:id), leader: (instance:id)] 
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ leader)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ leader)[state],
        curTimes = (cur ⨝ LeaderTimes ⨝ leader)[times->curTimes],
        nxtTimes = (nxt ⨝ LeaderTimes ⨝ leader)[times->nxtTimes],
        curFollower = (cur ⨝ LeaderFollower ⨝ leader)[follower],
        nxtFollower = (nxt ⨝ LeaderFollower ⨝ leader)[follower] | (
    nxtState = curState ∧
    (
      curState ⊆ uninitialized ∨ 
      (// Postconditions
       (some (curTimes ⨯ nxtTimes) where (nxtTimes = curTimes)) ∧
       nxtFollower[follower] = curFollower[follower])
    )
  )

pred eventLeaderStart[step:(cur:id, nxt:id), leader: (instance:id), paramFollower: (follower:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ leader)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ leader)[state],
        curTimes = (cur ⨝ LeaderTimes ⨝ leader)[times->curTimes],
        nxtTimes = (nxt ⨝ LeaderTimes ⨝ leader)[times->nxtTimes],
        curFollower = (cur ⨝ LeaderFollower ⨝ leader)[follower],
        nxtFollower = (nxt ⨝ LeaderFollower ⨝ leader)[follower] |
    ( 
      // Preconditions 
      inState[cur, paramFollower[follower->instance], StateFollowerActive]  ∧ 
      // Postconditions
      nxtFollower[follower] = paramFollower ∧
      (some (nxtTimes) where (nxtTimes = 0))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventLeaderStart] ∧
      // Make sure this instance is in the change set
      leader ⊆ (changedInstance ⨝ step)[instance]
    )

pred eventLeaderHit[step:(cur:id, nxt:id), leader: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ leader)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ leader)[state],
        curTimes = (cur ⨝ LeaderTimes ⨝ leader)[times->curTimes],
        nxtTimes = (nxt ⨝ LeaderTimes ⨝ leader)[times->nxtTimes],
        curFollower = (cur ⨝ LeaderFollower ⨝ leader)[follower],
        nxtFollower = (nxt ⨝ LeaderFollower ⨝ leader)[follower] |
    ( 
      // Preconditions 
      eventFollowerHit[step, curFollower[follower][follower as instance]]  ∧ 
      // Postconditions
      nxtFollower[follower] = curFollower[follower] ∧
      (some (curTimes ⨯ nxtTimes) where (nxtTimes = curTimes + 1))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventLeaderHit] ∧
      // Make sure this instance is in the change set
      leader ⊆ (changedInstance ⨝ step)[instance]
    )


pred possibleTransitionsLeader[step: (cur:id, nxt:id)] 
  = ∀ inst ∈ (Instance ⨝ Leader)[instance] |
    (some inst ∩ ((raisedEvent ⨝ step)[instance]) ⇔ (
      (eventLeaderStart[step,inst,(step ⨝ ParamEventLeaderStartFollower)[follower]] ∧
      (step ⨝ raisedEvent)[event] = EventLeaderStart ∧
      (changedInstance ⨝ step)[instance] ⊆ inst)
      ∨
      (eventLeaderHit[step,inst] ∧
      (step ⨝ raisedEvent)[event] = EventLeaderHit ∧
      let cur = step[cur->config], follower = (LeaderFollower |x| cur |x| inst)[follower->instance], tailer = (FollowerTailer |x| cur |x| follower)[tailer->instance] | (changedInstance ⨝ step)[instance] ⊆ inst ∪ tailer ∪ follower)
    ))
    ∧
    (no inst ∩ (changedInstance ⨝ step)[instance] ⇔ frameLeader[step, inst])


// Transition function
∀ step ∈ order | possibleTransitionsTailer[step] ∧ possibleTransitionsFollower[step] ∧ possibleTransitionsLeader[step]

// Asserts: this is where the checks get added
∃ c ∈ Config | (some (c ⨝ LeaderTimes) where times = 2)
exists c: Config | forall l : (Instance |x| Leader)[instance] | (l |x| instanceInState |x| c)[state] in initialized

// Minimize the number of steps by minimizing the number of Configurations
objectives: minimize Config[count()]
