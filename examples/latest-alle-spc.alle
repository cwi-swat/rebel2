// Static configuration of state machines
// Define the specs that can take place in the transition system
Id (spec:id) = {<id>}
Process (spec:id) = {<process>}

// Define all possible states for all machines
State (state:id) = {<state_uninitialized>,<state_finalized>,<state_id_created>,<state_process_notelected>,<state_process_elected>}
initialized (state:id) = {<state_id_created>,<state_process_notelected>,<state_process_elected>}
finalized (state:id) = {<state_finalized>}
uninitialized (state:id) = {<state_uninitialized>}
StateIdCreated (state:id) = {<state_id_created>}
StateProcessNotElected (state:id) = {<state_process_notelected>}StateProcessElected (state:id) = {<state_process_elected>}

// Define which transitions are allowed (in the form of `from a state` -> ` via an event` -> `to a state`
allowedTransitions (from:id, to:id, event:id) = {<state_id_created,state_id_created,event_id_lesserthan>,<state_id_created,state_id_created,event_id_equalval>,<state_uninitialized,state_id_created,event_id_create>,<state_id_created,state_id_created,event_id_greaterthaneqval>,<state_id_created,state_id_created,event_id_equal>,<state_process_notelected,state_process_notelected,event_process_receive>,<state_process_notelected,state_process_notelected,event_process_send>,<state_process_notelected,state_process_elected,event_process_receiveelected>}
// Define each event as single relation so that the events can be used as variables in the constraints 
EventId__frame (event:id) = {<event_id___frame>}
EventIdEqual (event:id) = {<event_id_equal>}
EventProcessSend (event:id) = {<event_process_send>}
EventProcessReceiveElected (event:id) = {<event_process_receiveelected>}
EventProcess__frame (event:id) = {<event_process___frame>}
EventProcessReceive (event:id) = {<event_process_receive>}
EventIdLesserThan (event:id) = {<event_id_lesserthan>}
EventIdEqualVal (event:id) = {<event_id_equalval>}
EventIdCreate (event:id) = {<event_id_create>}
EventIdGreaterThanEqVal (event:id) = {<event_id_greaterthaneqval>}


// Dynamic configuration of state machines
Config (config:id) >= {<c1>} <= {<c1>,<c2>,<c3>,<c4>,<c5>,<c6>}
order (cur:id, nxt:id) <= {<c1,c2>,<c2,c3>,<c3,c4>,<c4,c5>,<c5,c6>}
first (config:id) = {<c1>}
last (config:id) <= {<c1>,<c2>,<c3>,<c4>,<c5>,<c6>}
back (config:id) <= {<c1>,<c2>,<c3>,<c4>,<c5>,<c6>}
loop (cur:id, nxt:id) <= {<c2,c1>,<c2,c2>,<c3,c1>,<c3,c2>,<c3,c3>,<c4,c1>,<c4,c2>,<c4,c3>,<c4,c4>,<c5,c1>,<c5,c2>,<c5,c3>,<c5,c4>,<c5,c5>,<c6,c1>,<c6,c2>,<c6,c3>,<c6,c4>,<c6,c5>,<c6,c6>}

Instance (spec:id, instance:id) = {<process,p2>,<process,p3>,<id,id2>,<id,id1>,<process,p1>,<id,id3>}
instanceInState (config:id, instance:id, state:id) >= {<c1,p2,state_process_notelected>,<c1,p3,state_process_notelected>,<c1,id2,state_id_created>,<c1,id1,state_id_created>,<c1,p1,state_process_notelected>,<c1,id3,state_id_created>}<= {<c1,id1,state_uninitialized>,<c1,id1,state_id_created>,<c1,id1,state_finalized>,<c1,id2,state_uninitialized>,<c1,id2,state_id_created>,<c1,id2,state_finalized>,<c1,id3,state_uninitialized>,<c1,id3,state_id_created>,<c1,id3,state_finalized>,<c1,p1,state_uninitialized>,<c1,p1,state_process_elected>,<c1,p1,state_finalized>,<c1,p1,state_process_notelected>,<c1,p2,state_uninitialized>,<c1,p2,state_process_elected>,<c1,p2,state_finalized>,<c1,p2,state_process_notelected>,<c1,p3,state_uninitialized>,<c1,p3,state_process_elected>,<c1,p3,state_finalized>,<c1,p3,state_process_notelected>,<c2,id1,state_uninitialized>,<c2,id1,state_id_created>,<c2,id1,state_finalized>,<c2,id2,state_uninitialized>,<c2,id2,state_id_created>,<c2,id2,state_finalized>,<c2,id3,state_uninitialized>,<c2,id3,state_id_created>,<c2,id3,state_finalized>,<c2,p1,state_uninitialized>,<c2,p1,state_process_elected>,<c2,p1,state_finalized>,<c2,p1,state_process_notelected>,<c2,p2,state_uninitialized>,<c2,p2,state_process_elected>,<c2,p2,state_finalized>,<c2,p2,state_process_notelected>,<c2,p3,state_uninitialized>,<c2,p3,state_process_elected>,<c2,p3,state_finalized>,<c2,p3,state_process_notelected>,<c3,id1,state_uninitialized>,<c3,id1,state_id_created>,<c3,id1,state_finalized>,<c3,id2,state_uninitialized>,<c3,id2,state_id_created>,<c3,id2,state_finalized>,<c3,id3,state_uninitialized>,<c3,id3,state_id_created>,<c3,id3,state_finalized>,<c3,p1,state_uninitialized>,<c3,p1,state_process_elected>,<c3,p1,state_finalized>,<c3,p1,state_process_notelected>,<c3,p2,state_uninitialized>,<c3,p2,state_process_elected>,<c3,p2,state_finalized>,<c3,p2,state_process_notelected>,<c3,p3,state_uninitialized>,<c3,p3,state_process_elected>,<c3,p3,state_finalized>,<c3,p3,state_process_notelected>,<c4,id1,state_uninitialized>,<c4,id1,state_id_created>,<c4,id1,state_finalized>,<c4,id2,state_uninitialized>,<c4,id2,state_id_created>,<c4,id2,state_finalized>,<c4,id3,state_uninitialized>,<c4,id3,state_id_created>,<c4,id3,state_finalized>,<c4,p1,state_uninitialized>,<c4,p1,state_process_elected>,<c4,p1,state_finalized>,<c4,p1,state_process_notelected>,<c4,p2,state_uninitialized>,<c4,p2,state_process_elected>,<c4,p2,state_finalized>,<c4,p2,state_process_notelected>,<c4,p3,state_uninitialized>,<c4,p3,state_process_elected>,<c4,p3,state_finalized>,<c4,p3,state_process_notelected>,<c5,id1,state_uninitialized>,<c5,id1,state_id_created>,<c5,id1,state_finalized>,<c5,id2,state_uninitialized>,<c5,id2,state_id_created>,<c5,id2,state_finalized>,<c5,id3,state_uninitialized>,<c5,id3,state_id_created>,<c5,id3,state_finalized>,<c5,p1,state_uninitialized>,<c5,p1,state_process_elected>,<c5,p1,state_finalized>,<c5,p1,state_process_notelected>,<c5,p2,state_uninitialized>,<c5,p2,state_process_elected>,<c5,p2,state_finalized>,<c5,p2,state_process_notelected>,<c5,p3,state_uninitialized>,<c5,p3,state_process_elected>,<c5,p3,state_finalized>,<c5,p3,state_process_notelected>,<c6,id1,state_uninitialized>,<c6,id1,state_id_created>,<c6,id1,state_finalized>,<c6,id2,state_uninitialized>,<c6,id2,state_id_created>,<c6,id2,state_finalized>,<c6,id3,state_uninitialized>,<c6,id3,state_id_created>,<c6,id3,state_finalized>,<c6,p1,state_uninitialized>,<c6,p1,state_process_elected>,<c6,p1,state_finalized>,<c6,p1,state_process_notelected>,<c6,p2,state_uninitialized>,<c6,p2,state_process_elected>,<c6,p2,state_finalized>,<c6,p2,state_process_notelected>,<c6,p3,state_uninitialized>,<c6,p3,state_process_elected>,<c6,p3,state_finalized>,<c6,p3,state_process_notelected>}
raisedEvent (cur:id, nxt:id, event:id, instance:id) <= {<c1,c2,event_id_create,id1>,<c2,c3,event_id_create,id1>,<c3,c4,event_id_create,id1>,<c4,c5,event_id_create,id1>,<c5,c6,event_id_create,id1>,<c1,c2,event_id_create,id2>,<c2,c3,event_id_create,id2>,<c3,c4,event_id_create,id2>,<c4,c5,event_id_create,id2>,<c5,c6,event_id_create,id2>,<c1,c2,event_id_create,id3>,<c2,c3,event_id_create,id3>,<c3,c4,event_id_create,id3>,<c4,c5,event_id_create,id3>,<c5,c6,event_id_create,id3>,<c1,c2,event_process_send,p1>,<c2,c3,event_process_send,p1>,<c3,c4,event_process_send,p1>,<c4,c5,event_process_send,p1>,<c5,c6,event_process_send,p1>,<c1,c2,event_process_send,p2>,<c2,c3,event_process_send,p2>,<c3,c4,event_process_send,p2>,<c4,c5,event_process_send,p2>,<c5,c6,event_process_send,p2>,<c1,c2,event_process_send,p3>,<c2,c3,event_process_send,p3>,<c3,c4,event_process_send,p3>,<c4,c5,event_process_send,p3>,<c5,c6,event_process_send,p3>}
changedInstance (cur:id, nxt:id, instance:id) <= {<c1,c2,p1>,<c1,c2,p2>,<c1,c2,p3>,<c1,c2,id1>,<c1,c2,id2>,<c1,c2,id3>,<c2,c3,p1>,<c2,c3,p2>,<c2,c3,p3>,<c2,c3,id1>,<c2,c3,id2>,<c2,c3,id3>,<c3,c4,p1>,<c3,c4,p2>,<c3,c4,p3>,<c3,c4,id1>,<c3,c4,id2>,<c3,c4,id3>,<c4,c5,p1>,<c4,c5,p2>,<c4,c5,p3>,<c4,c5,id1>,<c4,c5,id2>,<c4,c5,id3>,<c5,c6,p1>,<c5,c6,p2>,<c5,c6,p3>,<c5,c6,id1>,<c5,c6,id2>,<c5,c6,id3>}

IdVal (config:id, instance:id, val:int) <= {<c1,id1,?>,<c2,id1,?>,<c3,id1,?>,<c4,id1,?>,<c5,id1,?>,<c6,id1,?>,<c1,id2,?>,<c2,id2,?>,<c3,id2,?>,<c4,id2,?>,<c5,id2,?>,<c6,id2,?>,<c1,id3,?>,<c2,id3,?>,<c3,id3,?>,<c4,id3,?>,<c5,id3,?>,<c6,id3,?>}
ProcessId (config:id, instance:id, id:id) >= {<c1,p3,id3>,<c1,p2,id2>,<c1,p1,id1>} <= {<c2,p1,id1>,<c2,p1,id2>,<c2,p1,id3>,<c3,p1,id1>,<c3,p1,id2>,<c3,p1,id3>,<c4,p1,id1>,<c4,p1,id2>,<c4,p1,id3>,<c5,p1,id1>,<c5,p1,id2>,<c5,p1,id3>,<c6,p1,id1>,<c6,p1,id2>,<c6,p1,id3>,<c2,p2,id1>,<c2,p2,id2>,<c2,p2,id3>,<c3,p2,id1>,<c3,p2,id2>,<c3,p2,id3>,<c4,p2,id1>,<c4,p2,id2>,<c4,p2,id3>,<c5,p2,id1>,<c5,p2,id2>,<c5,p2,id3>,<c6,p2,id1>,<c6,p2,id2>,<c6,p2,id3>,<c2,p3,id1>,<c2,p3,id2>,<c2,p3,id3>,<c3,p3,id1>,<c3,p3,id2>,<c3,p3,id3>,<c4,p3,id1>,<c4,p3,id2>,<c4,p3,id3>,<c5,p3,id1>,<c5,p3,id2>,<c5,p3,id3>,<c6,p3,id1>,<c6,p3,id2>,<c6,p3,id3>}
ProcessSucc (config:id, instance:id, succ:id) >= {<c1,p3,p1>,<c1,p1,p2>,<c1,p2,p3>} <= {<c2,p1,p1>,<c2,p1,p2>,<c2,p1,p3>,<c3,p1,p1>,<c3,p1,p2>,<c3,p1,p3>,<c4,p1,p1>,<c4,p1,p2>,<c4,p1,p3>,<c5,p1,p1>,<c5,p1,p2>,<c5,p1,p3>,<c6,p1,p1>,<c6,p1,p2>,<c6,p1,p3>,<c2,p2,p1>,<c2,p2,p2>,<c2,p2,p3>,<c3,p2,p1>,<c3,p2,p2>,<c3,p2,p3>,<c4,p2,p1>,<c4,p2,p2>,<c4,p2,p3>,<c5,p2,p1>,<c5,p2,p2>,<c5,p2,p3>,<c6,p2,p1>,<c6,p2,p2>,<c6,p2,p3>,<c2,p3,p1>,<c2,p3,p2>,<c2,p3,p3>,<c3,p3,p1>,<c3,p3,p2>,<c3,p3,p3>,<c4,p3,p1>,<c4,p3,p2>,<c4,p3,p3>,<c5,p3,p1>,<c5,p3,p2>,<c5,p3,p3>,<c6,p3,p1>,<c6,p3,p2>,<c6,p3,p3>}
ProcessToSend (config:id, instance:id, toSend:id) >= {<c1,p3,id3>,<c1,p1,id1>,<c1,p2,id2>} <= {<c2,p1,id1>,<c2,p1,id2>,<c2,p1,id3>,<c3,p1,id1>,<c3,p1,id2>,<c3,p1,id3>,<c4,p1,id1>,<c4,p1,id2>,<c4,p1,id3>,<c5,p1,id1>,<c5,p1,id2>,<c5,p1,id3>,<c6,p1,id1>,<c6,p1,id2>,<c6,p1,id3>,<c2,p2,id1>,<c2,p2,id2>,<c2,p2,id3>,<c3,p2,id1>,<c3,p2,id2>,<c3,p2,id3>,<c4,p2,id1>,<c4,p2,id2>,<c4,p2,id3>,<c5,p2,id1>,<c5,p2,id2>,<c5,p2,id3>,<c6,p2,id1>,<c6,p2,id2>,<c6,p2,id3>,<c2,p3,id1>,<c2,p3,id2>,<c2,p3,id3>,<c3,p3,id1>,<c3,p3,id2>,<c3,p3,id3>,<c4,p3,id1>,<c4,p3,id2>,<c4,p3,id3>,<c5,p3,id1>,<c5,p3,id2>,<c5,p3,id3>,<c6,p3,id1>,<c6,p3,id2>,<c6,p3,id3>}

ParamEventIdEqualOther (cur:id, nxt:id, other:id) <= {<c1,c2,id1>,<c1,c2,id2>,<c1,c2,id3>,<c2,c3,id1>,<c2,c3,id2>,<c2,c3,id3>,<c3,c4,id1>,<c3,c4,id2>,<c3,c4,id3>,<c4,c5,id1>,<c4,c5,id2>,<c4,c5,id3>,<c5,c6,id1>,<c5,c6,id2>,<c5,c6,id3>}
ParamEventIdEqualValVal (cur:id, nxt:id, val:int) <= {<c1,c2,?>,<c2,c3,?>,<c3,c4,?>,<c4,c5,?>,<c5,c6,?>}
ParamEventIdGreaterThanEqValVal (cur:id, nxt:id, val:int) <= {<c1,c2,?>,<c2,c3,?>,<c3,c4,?>,<c4,c5,?>,<c5,c6,?>}
ParamEventIdLesserThanOther (cur:id, nxt:id, other:id) <= {<c1,c2,id1>,<c1,c2,id2>,<c1,c2,id3>,<c2,c3,id1>,<c2,c3,id2>,<c2,c3,id3>,<c3,c4,id1>,<c3,c4,id2>,<c3,c4,id3>,<c4,c5,id1>,<c4,c5,id2>,<c4,c5,id3>,<c5,c6,id1>,<c5,c6,id2>,<c5,c6,id3>}
ParamEventIdCreateVal (cur:id, nxt:id, val:int) <= {<c1,c2,?>,<c2,c3,?>,<c3,c4,?>,<c4,c5,?>,<c5,c6,?>}
ParamEventProcessSendSomeId (cur:id, nxt:id, someId:id) <= {<c1,c2,id1>,<c1,c2,id2>,<c1,c2,id3>,<c2,c3,id1>,<c2,c3,id2>,<c2,c3,id3>,<c3,c4,id1>,<c3,c4,id2>,<c3,c4,id3>,<c4,c5,id1>,<c4,c5,id2>,<c4,c5,id3>,<c5,c6,id1>,<c5,c6,id2>,<c5,c6,id3>}
ParamEventProcessReceiveElectedSomeId (cur:id, nxt:id, someId:id) <= {<c1,c2,id1>,<c1,c2,id2>,<c1,c2,id3>,<c2,c3,id1>,<c2,c3,id2>,<c2,c3,id3>,<c3,c4,id1>,<c3,c4,id2>,<c3,c4,id3>,<c4,c5,id1>,<c4,c5,id2>,<c4,c5,id3>,<c5,c6,id1>,<c5,c6,id2>,<c5,c6,id3>}
ParamEventProcessReceiveSomeId (cur:id, nxt:id, someId:id) <= {<c1,c2,id1>,<c1,c2,id2>,<c1,c2,id3>,<c2,c3,id1>,<c2,c3,id2>,<c2,c3,id3>,<c3,c4,id1>,<c3,c4,id2>,<c3,c4,id3>,<c4,c5,id1>,<c4,c5,id2>,<c4,c5,id3>,<c5,c6,id1>,<c5,c6,id2>,<c5,c6,id3>}

// Constraints for the configuration and ordering relations
order ⊆ Config[config as cur] ⨯ Config[config as nxt]
last = Config ∖ order[cur->config]  // There is only one last configuration
back ⊆ Config 
lone back   
loop ⊆ last[config as cur] ⨯ back[config as nxt] // Loop contains at most one tuple going back from the last configuration to the 

// Generic 'Type' constraints    
raisedEvent ⊆ order ⨯ allowedTransitions[event] ⨯ Instance[instance]
instanceInState ⊆ Instance[instance] ⨯ Config ⨯ State
changedInstance ⊆ order ⨯ Instance[instance]
    
// Machine specific `type` constraints
IdVal[config,instance]  ⊆ Config ⨯ (Instance ⨝ Id)[instance]
ProcessId  ⊆ Config ⨯ (Instance ⨝ Process)[instance] ⨯ (Instance ⨝ Id)[instance->id]
ProcessSucc  ⊆ Config ⨯ (Instance ⨝ Process)[instance] ⨯ (Instance ⨝ Process)[instance->succ]
ProcessToSend  ⊆ Config ⨯ (Instance ⨝ Process)[instance] ⨯ (Instance ⨝ Id)[instance->toSend]

ParamEventIdCreateVal[cur,nxt] ⊆ order
ParamEventIdEqualValVal[cur,nxt] ⊆ order
ParamEventIdEqualOther ⊆ order ⨯ (Instance ⨝ Id)[instance->other]
ParamEventIdLesserThanOther ⊆ order ⨯ (Instance ⨝ Id)[instance->other]
ParamEventIdGreaterThanEqValVal[cur,nxt] ⊆ order
ParamEventProcessReceiveSomeId ⊆ order ⨯ (Instance ⨝ Id)[instance->someId]
ParamEventProcessReceiveElectedSomeId ⊆ order ⨯ (Instance ⨝ Id)[instance->someId]
ParamEventProcessSendSomeId ⊆ order ⨯ (Instance ⨝ Id)[instance->someId]

// Specific per event
∀ step ∈ order ⨝ raisedEvent | (
  (some (step ⨝ EventIdCreate) ⇔ one (step ⨝ ParamEventIdCreateVal)) ∧
  (some (step ⨝ EventIdEqualVal) ⇔ one (step ⨝ ParamEventIdEqualValVal)) ∧
  (some (step ⨝ EventIdEqual) ⇔ one (step ⨝ ParamEventIdEqualOther)) ∧
  (some (step ⨝ EventIdLesserThan) ⇔ one (step ⨝ ParamEventIdLesserThanOther)) ∧
  (some (step ⨝ EventIdGreaterThanEqVal) ⇔ one (step ⨝ ParamEventIdGreaterThanEqValVal)) ∧
  (some (step ⨝ EventProcessReceive) ⇔ one (step ⨝ ParamEventProcessReceiveSomeId)) ∧
  (some (step ⨝ EventProcessReceiveElected) ⇔ one (step ⨝ ParamEventProcessReceiveElectedSomeId)) ∧
  (some (step ⨝ EventProcessSend) ⇔ one (step ⨝ ParamEventProcessSendSomeId))
)

// Generic: All configurations are reachable
∀ c ∈ Config ∖ first | c ⊆ (first[config as cur] ⨝ ^<cur,nxt>order)[nxt -> config]

// Generic: Every transition can only happen by exactly one event
∀ o ∈ order | one o ⨝ raisedEvent

// Generic: In every configuration all machines have a state
∀ c ∈ Config, inst ∈ Instance | one instanceInState ⨝ c ⨝ inst

// Specific per machine: In every configuration iff a machine is in an initialized state then it must have values
∀ c ∈ Config, inst ∈ (Instance ⨝ Id)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇔ one IdVal ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Process)[instance] | (no (((c ⨯ inst) ⨝ instanceInState)[state] ∩ initialized) ⇒ no ProcessId ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Process)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇒ one ProcessId ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Process)[instance] | (no (((c ⨯ inst) ⨝ instanceInState)[state] ∩ initialized) ⇒ no ProcessSucc ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Process)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇒ one ProcessSucc ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Process)[instance] | (no (((c ⨯ inst) ⨝ instanceInState)[state] ∩ initialized) ⇒ no ProcessToSend ⨝ c ⨝ inst)


// Generic: Transitions are only allowed between if an event is specified between two states
∀ o ∈ order ⨝ raisedEvent | (o[cur as config] ⨝ instanceInState)[state->from] ⨯ (o[nxt as config] ⨝ instanceInState)[state->to] ⨯ o[event] ⊆ allowedTransitions

// Generic predicates
pred forceState[curState: (state:id), nxtState: (state:id), raisedEvent: (event:id)]
  = nxtState = (curState[state as from] ⨝ (allowedTransitions ⨝ raisedEvent))[to->state]

pred inState[config: (config:id), instance: (instance:id), state: (state:id)]
  = ((instance ⨯ config) ⨝ instanceInState)[state] ⊆ state

pred eventIdEqual[step:(cur:id, nxt:id), id: (instance:id), other: (other:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ id)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ id)[state],
        curVal = (cur ⨝ IdVal ⨝ id)[val->curVal],
        nxtVal = (nxt ⨝ IdVal ⨝ id)[val->nxtVal] |
    ( 
      // Preconditions 
      eventIdEqualVal[step, other[other as instance], curVal[curVal as val]]  ∧ 
      // Postconditions
      (some (curVal ⨯ nxtVal) where (nxtVal = curVal))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventIdEqual] ∧
      // Make sure this instance is in the change set
      id ⊆ (changedInstance ⨝ step)[instance]
    )

pred frameId[step: (cur:id, nxt:id), id: (instance:id)] 
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ id)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ id)[state],
        curVal = (cur ⨝ IdVal ⨝ id)[val->curVal],
        nxtVal = (nxt ⨝ IdVal ⨝ id)[val->nxtVal] | (
    nxtState = curState ∧
    (
      curState ⊆ uninitialized ∨ 
      (// Postconditions
       (some (curVal ⨯ nxtVal) where (nxtVal = curVal)))
    )
  )

pred eventIdEqualVal[step:(cur:id, nxt:id), id: (instance:id), val: (val:int)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ id)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ id)[state],
        curVal = (cur ⨝ IdVal ⨝ id)[val->curVal],
        nxtVal = (nxt ⨝ IdVal ⨝ id)[val->nxtVal] |
    ( 
      // Preconditions 
      (some (curVal ⨯ val) where (curVal = val))  ∧ 
      // Postconditions
      (some (curVal ⨯ nxtVal) where (nxtVal = curVal))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventIdEqualVal] ∧
      // Make sure this instance is in the change set
      id ⊆ (changedInstance ⨝ step)[instance]
    )

pred eventIdGreaterThanEqVal[step:(cur:id, nxt:id), id: (instance:id), val: (val:int)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ id)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ id)[state],
        curVal = (cur ⨝ IdVal ⨝ id)[val->curVal],
        nxtVal = (nxt ⨝ IdVal ⨝ id)[val->nxtVal] |
    ( 
      // Preconditions 
      (some (curVal ⨯ val) where (curVal >= val))  ∧ 
      // Postconditions
      (some (curVal ⨯ nxtVal) where (nxtVal = curVal))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventIdGreaterThanEqVal] ∧
      // Make sure this instance is in the change set
      id ⊆ (changedInstance ⨝ step)[instance]
    )

pred eventIdLesserThan[step:(cur:id, nxt:id), id: (instance:id), other: (other:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ id)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ id)[state],
        curVal = (cur ⨝ IdVal ⨝ id)[val->curVal],
        nxtVal = (nxt ⨝ IdVal ⨝ id)[val->nxtVal] |
    ( 
      // Preconditions 
      eventIdGreaterThanEqVal[step, other[other as instance], curVal[curVal as val]]  ∧ 
      // Postconditions
      (some (curVal ⨯ nxtVal) where (nxtVal = curVal))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventIdLesserThan] ∧
      // Make sure this instance is in the change set
      id ⊆ (changedInstance ⨝ step)[instance]
    )

pred eventIdCreate[step:(cur:id, nxt:id), id: (instance:id), val: (val:int)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ id)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ id)[state],
        curVal = (cur ⨝ IdVal ⨝ id)[val->curVal],
        nxtVal = (nxt ⨝ IdVal ⨝ id)[val->nxtVal] |
    ( 
      // Preconditions 
      (some (val) where (val > 0))  ∧ 
      // Postconditions
      (some (val ⨯ nxtVal) where (nxtVal = val))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventIdCreate] ∧
      // Make sure this instance is in the change set
      id ⊆ (changedInstance ⨝ step)[instance]
    )


pred possibleTransitionsId[step: (cur:id, nxt:id)] 
  = ∀ inst ∈ (Instance ⨝ Id)[instance] |
    (some inst ∩ ((raisedEvent ⨝ step)[instance]) ⇔ (
      (eventIdCreate[step,inst,(step ⨝ ParamEventIdCreateVal)[val]] ∧
      (step ⨝ raisedEvent)[event] = EventIdCreate ∧
      (changedInstance ⨝ step)[instance] ⊆ inst)
    ))
    ∧
    (no inst ∩ (changedInstance ⨝ step)[instance] ⇒ frameId[step, inst])

pred eventProcessSend[step:(cur:id, nxt:id), process: (instance:id), someId: (someId:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ process)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ process)[state],
        curId = (cur ⨝ ProcessId ⨝ process)[id],
        nxtId = (nxt ⨝ ProcessId ⨝ process)[id],
        curSucc = (cur ⨝ ProcessSucc ⨝ process)[succ],
        nxtSucc = (nxt ⨝ ProcessSucc ⨝ process)[succ],
        curToSend = (cur ⨝ ProcessToSend ⨝ process)[toSend],
        nxtToSend = (nxt ⨝ ProcessToSend ⨝ process)[toSend] |
    ( 
      // Preconditions 
      some (curToSend ∩ someId[someId -> toSend]) ∧
      ((eventProcessReceive[step, curSucc[succ as instance], someId] ∨ eventProcessReceiveElected[step, curSucc[succ as instance], someId]))  ∧ 
      // Postconditions
      nxtId = curId ∧
      nxtSucc = curSucc ∧
      nxtToSend = (curToSend - (someId[someId as toSend]))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventProcessSend] ∧
      // Make sure this instance is in the change set
      process ⊆ (changedInstance ⨝ step)[instance]
    )

pred frameProcess[step: (cur:id, nxt:id), process: (instance:id)] 
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ process)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ process)[state],
        curId = (cur ⨝ ProcessId ⨝ process)[id],
        nxtId = (nxt ⨝ ProcessId ⨝ process)[id],
        curSucc = (cur ⨝ ProcessSucc ⨝ process)[succ],
        nxtSucc = (nxt ⨝ ProcessSucc ⨝ process)[succ],
        curToSend = (cur ⨝ ProcessToSend ⨝ process)[toSend],
        nxtToSend = (nxt ⨝ ProcessToSend ⨝ process)[toSend] | (
    nxtState = curState ∧
    (
      curState ⊆ uninitialized ∨ 
      (// Postconditions
       nxtId = curId ∧
       nxtSucc = curSucc ∧
       nxtToSend = curToSend)
    )
  )

pred eventProcessReceiveElected[step:(cur:id, nxt:id), process: (instance:id), someId: (someId:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ process)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ process)[state],
        curId = (cur ⨝ ProcessId ⨝ process)[id],
        nxtId = (nxt ⨝ ProcessId ⨝ process)[id],
        curSucc = (cur ⨝ ProcessSucc ⨝ process)[succ],
        nxtSucc = (nxt ⨝ ProcessSucc ⨝ process)[succ],
        curToSend = (cur ⨝ ProcessToSend ⨝ process)[toSend],
        nxtToSend = (nxt ⨝ ProcessToSend ⨝ process)[toSend] |
    ( 
      // Preconditions 
      someId = curId[id as someId]  ∧ 
      // Postconditions
      nxtId = curId ∧
      nxtSucc = curSucc ∧
      (forall id:curToSend[toSend as id] | ((eventIdLesserThan[step, curId[id as instance], someId[someId as other]] ⇒ no (nxtToSend ∩ id[id -> toSend])))) ∧
      some (nxtToSend ∩ someId[someId -> toSend])  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventProcessReceiveElected] ∧
      // Make sure this instance is in the change set
      process ⊆ (changedInstance ⨝ step)[instance]
    )

pred eventProcessReceive[step:(cur:id, nxt:id), process: (instance:id), someId: (someId:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ process)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ process)[state],
        curId = (cur ⨝ ProcessId ⨝ process)[id],
        nxtId = (nxt ⨝ ProcessId ⨝ process)[id],
        curSucc = (cur ⨝ ProcessSucc ⨝ process)[succ],
        nxtSucc = (nxt ⨝ ProcessSucc ⨝ process)[succ],
        curToSend = (cur ⨝ ProcessToSend ⨝ process)[toSend],
        nxtToSend = (nxt ⨝ ProcessToSend ⨝ process)[toSend] |
    ( 
      // Preconditions 
      curId != someId[someId as id]  ∧ 
      // Postconditions
      nxtId = curId ∧
      nxtSucc = curSucc ∧
      (forall id:curToSend[toSend as id] | ((eventIdLesserThan[step, curId[id as instance], someId[someId as other]] ⇒ no (nxtToSend ∩ id[id -> toSend])))) ∧
      some (nxtToSend ∩ someId[someId -> toSend])  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventProcessReceive] ∧
      // Make sure this instance is in the change set
      process ⊆ (changedInstance ⨝ step)[instance]
    )


pred possibleTransitionsProcess[step: (cur:id, nxt:id)] 
  = ∀ inst ∈ (Instance ⨝ Process)[instance] |
    (some inst ∩ ((raisedEvent ⨝ step)[instance]) ⇔ (
      (eventProcessSend[step,inst,(step ⨝ ParamEventProcessSendSomeId)[someId]] ∧
      (step ⨝ raisedEvent)[event] = EventProcessSend ∧
      let cur = step[cur->config], succ = (ProcessSucc ⨝ cur ⨝ inst)[succ -> instance], id = (ProcessId ⨝ cur ⨝ succ)[id -> instance], someId = (ParamEventProcessSendSomeId ⨝ step)[someId -> instance] | (changedInstance ⨝ step)[instance] ⊆ succ ∪ inst ∪ someId ∪ id)
    ))
    ∧
    (no inst ∩ (changedInstance ⨝ step)[instance] ⇒ frameProcess[step, inst])


// Transition function
∀ step ∈ order | possibleTransitionsId[step] ∧ possibleTransitionsProcess[step]

// Fact: UniqueIds
∀ cur ∈ Config | (∀ id1 ∈ (Id ⨝ Instance)[instance],id2 ∈ (Id ⨝ Instance)[instance] | ((inState[cur, id1, initialized] ∧ inState[cur, id2, initialized] ∧ (some ((id2 ⨝ IdVal ⨝ cur)[val->id2Val] ⨯ (id1 ⨝ IdVal ⨝ cur)[val->id1Val]) where (id1Val = id2Val))) ⇒ id1 = id2))
// Asserts: this is where the checks get added
∃ cur ∈ Config | (∃ p ∈ (Process ⨝ Instance)[instance] | inState[cur, p, StateProcessElected])

// Minimize the number of steps by minimizing the number of Configurations
objectives: minimize Config[count()]
