// Static configuration of state machines
// Define the specs that can take place in the transition system
Tailer (spec:id) = {<tailer>}
Follower (spec:id) = {<follower>}
Leader (spec:id) = {<leader>}

// Define all possible states for all machines
State (state:id) = {<state_uninitialized>,<state_finalized>,<state_tailer_active>,<state_tailer_waiting>,<state_follower_active>,<state_leader_active>}
initialized (state:id) = {<state_tailer_active>,<state_tailer_waiting>,<state_follower_active>,<state_leader_active>}
finalized (state:id) = {<state_finalized>}
uninitialized (state:id) = {<state_uninitialized>}
StateTailerWaiting (state:id) = {<state_tailer_waiting>}StateTailerActive (state:id) = {<state_tailer_active>}
StateFollowerActive (state:id) = {<state_follower_active>}
StateLeaderActive (state:id) = {<state_leader_active>}

// Define which transitions are allowed (in the form of `from a state` -> ` via an event` -> `to a state`
allowedTransitions (from:id, to:id, event:id) = {<state_tailer_waiting,state_tailer_active,event_tailer_connected>,<state_uninitialized,state_tailer_waiting,event_tailer_start>,<state_tailer_active,state_tailer_active,event_tailer_hit>,<state_follower_active,state_follower_active,event_follower_hit>,<state_uninitialized,state_follower_active,event_follower_start>,<state_uninitialized,state_leader_active,event_leader_start>,<state_leader_active,state_leader_active,event_leader_hit>}
// Define each event as single relation so that the events can be used as variables in the constraints 
EventTailerConnected (event:id) = {<event_tailer_connected>}
EventTailer__frame (event:id) = {<event_tailer___frame>}
EventLeader__frame (event:id) = {<event_leader___frame>}
EventFollower__frame (event:id) = {<event_follower___frame>}
EventTailerStart (event:id) = {<event_tailer_start>}
EventLeaderStart (event:id) = {<event_leader_start>}
EventFollowerStart (event:id) = {<event_follower_start>}
EventLeaderHit (event:id) = {<event_leader_hit>}
EventFollowerHit (event:id) = {<event_follower_hit>}
EventTailerHit (event:id) = {<event_tailer_hit>}

// Dynamic configuration of state machines
Config (config:id) >= {<c1>} <= {<c1>,<c2>,<c3>,<c4>,<c5>,<c6>,<c7>,<c8>,<c9>}
order (cur:id, nxt:id) <= {<c1,c2>,<c2,c3>,<c3,c4>,<c4,c5>,<c5,c6>,<c6,c7>,<c7,c8>,<c8,c9>}
InitialConfig (config:id) = {<c1>}

Instance (spec:id, instance:id) = {<follower,f1>,<follower,f2>,<tailer,t2>,<tailer,t1>,<leader,l1>,<leader,l2>}
instanceInState (config:id, instance:id, state:id) >= {<c1,f1,state_uninitialized>,<c1,f2,state_uninitialized>,<c1,t2,state_uninitialized>,<c1,t1,state_uninitialized>,<c1,l1,state_uninitialized>,<c1,l2,state_uninitialized>}<= {<c1,t1,state_uninitialized>,<c1,t1,state_finalized>,<c1,t1,state_tailer_waiting>,<c1,t1,state_tailer_active>,<c1,t2,state_uninitialized>,<c1,t2,state_finalized>,<c1,t2,state_tailer_waiting>,<c1,t2,state_tailer_active>,<c1,f1,state_uninitialized>,<c1,f1,state_finalized>,<c1,f1,state_follower_active>,<c1,f2,state_uninitialized>,<c1,f2,state_finalized>,<c1,f2,state_follower_active>,<c1,l1,state_uninitialized>,<c1,l1,state_leader_active>,<c1,l1,state_finalized>,<c1,l2,state_uninitialized>,<c1,l2,state_leader_active>,<c1,l2,state_finalized>,<c2,t1,state_uninitialized>,<c2,t1,state_finalized>,<c2,t1,state_tailer_waiting>,<c2,t1,state_tailer_active>,<c2,t2,state_uninitialized>,<c2,t2,state_finalized>,<c2,t2,state_tailer_waiting>,<c2,t2,state_tailer_active>,<c2,f1,state_uninitialized>,<c2,f1,state_finalized>,<c2,f1,state_follower_active>,<c2,f2,state_uninitialized>,<c2,f2,state_finalized>,<c2,f2,state_follower_active>,<c2,l1,state_uninitialized>,<c2,l1,state_leader_active>,<c2,l1,state_finalized>,<c2,l2,state_uninitialized>,<c2,l2,state_leader_active>,<c2,l2,state_finalized>,<c3,t1,state_uninitialized>,<c3,t1,state_finalized>,<c3,t1,state_tailer_waiting>,<c3,t1,state_tailer_active>,<c3,t2,state_uninitialized>,<c3,t2,state_finalized>,<c3,t2,state_tailer_waiting>,<c3,t2,state_tailer_active>,<c3,f1,state_uninitialized>,<c3,f1,state_finalized>,<c3,f1,state_follower_active>,<c3,f2,state_uninitialized>,<c3,f2,state_finalized>,<c3,f2,state_follower_active>,<c3,l1,state_uninitialized>,<c3,l1,state_leader_active>,<c3,l1,state_finalized>,<c3,l2,state_uninitialized>,<c3,l2,state_leader_active>,<c3,l2,state_finalized>,<c4,t1,state_uninitialized>,<c4,t1,state_finalized>,<c4,t1,state_tailer_waiting>,<c4,t1,state_tailer_active>,<c4,t2,state_uninitialized>,<c4,t2,state_finalized>,<c4,t2,state_tailer_waiting>,<c4,t2,state_tailer_active>,<c4,f1,state_uninitialized>,<c4,f1,state_finalized>,<c4,f1,state_follower_active>,<c4,f2,state_uninitialized>,<c4,f2,state_finalized>,<c4,f2,state_follower_active>,<c4,l1,state_uninitialized>,<c4,l1,state_leader_active>,<c4,l1,state_finalized>,<c4,l2,state_uninitialized>,<c4,l2,state_leader_active>,<c4,l2,state_finalized>,<c5,t1,state_uninitialized>,<c5,t1,state_finalized>,<c5,t1,state_tailer_waiting>,<c5,t1,state_tailer_active>,<c5,t2,state_uninitialized>,<c5,t2,state_finalized>,<c5,t2,state_tailer_waiting>,<c5,t2,state_tailer_active>,<c5,f1,state_uninitialized>,<c5,f1,state_finalized>,<c5,f1,state_follower_active>,<c5,f2,state_uninitialized>,<c5,f2,state_finalized>,<c5,f2,state_follower_active>,<c5,l1,state_uninitialized>,<c5,l1,state_leader_active>,<c5,l1,state_finalized>,<c5,l2,state_uninitialized>,<c5,l2,state_leader_active>,<c5,l2,state_finalized>,<c6,t1,state_uninitialized>,<c6,t1,state_finalized>,<c6,t1,state_tailer_waiting>,<c6,t1,state_tailer_active>,<c6,t2,state_uninitialized>,<c6,t2,state_finalized>,<c6,t2,state_tailer_waiting>,<c6,t2,state_tailer_active>,<c6,f1,state_uninitialized>,<c6,f1,state_finalized>,<c6,f1,state_follower_active>,<c6,f2,state_uninitialized>,<c6,f2,state_finalized>,<c6,f2,state_follower_active>,<c6,l1,state_uninitialized>,<c6,l1,state_leader_active>,<c6,l1,state_finalized>,<c6,l2,state_uninitialized>,<c6,l2,state_leader_active>,<c6,l2,state_finalized>,<c7,t1,state_uninitialized>,<c7,t1,state_finalized>,<c7,t1,state_tailer_waiting>,<c7,t1,state_tailer_active>,<c7,t2,state_uninitialized>,<c7,t2,state_finalized>,<c7,t2,state_tailer_waiting>,<c7,t2,state_tailer_active>,<c7,f1,state_uninitialized>,<c7,f1,state_finalized>,<c7,f1,state_follower_active>,<c7,f2,state_uninitialized>,<c7,f2,state_finalized>,<c7,f2,state_follower_active>,<c7,l1,state_uninitialized>,<c7,l1,state_leader_active>,<c7,l1,state_finalized>,<c7,l2,state_uninitialized>,<c7,l2,state_leader_active>,<c7,l2,state_finalized>,<c8,t1,state_uninitialized>,<c8,t1,state_finalized>,<c8,t1,state_tailer_waiting>,<c8,t1,state_tailer_active>,<c8,t2,state_uninitialized>,<c8,t2,state_finalized>,<c8,t2,state_tailer_waiting>,<c8,t2,state_tailer_active>,<c8,f1,state_uninitialized>,<c8,f1,state_finalized>,<c8,f1,state_follower_active>,<c8,f2,state_uninitialized>,<c8,f2,state_finalized>,<c8,f2,state_follower_active>,<c8,l1,state_uninitialized>,<c8,l1,state_leader_active>,<c8,l1,state_finalized>,<c8,l2,state_uninitialized>,<c8,l2,state_leader_active>,<c8,l2,state_finalized>,<c9,t1,state_uninitialized>,<c9,t1,state_finalized>,<c9,t1,state_tailer_waiting>,<c9,t1,state_tailer_active>,<c9,t2,state_uninitialized>,<c9,t2,state_finalized>,<c9,t2,state_tailer_waiting>,<c9,t2,state_tailer_active>,<c9,f1,state_uninitialized>,<c9,f1,state_finalized>,<c9,f1,state_follower_active>,<c9,f2,state_uninitialized>,<c9,f2,state_finalized>,<c9,f2,state_follower_active>,<c9,l1,state_uninitialized>,<c9,l1,state_leader_active>,<c9,l1,state_finalized>,<c9,l2,state_uninitialized>,<c9,l2,state_leader_active>,<c9,l2,state_finalized>}
raisedEvent (cur:id, nxt:id, event:id, instance:id) <= {<c1,c2,event_tailer_start,t1>,<c1,c2,event_tailer_connected,t1>,<c1,c2,event_tailer___frame,t1>,<c1,c2,event_tailer_hit,t1>,<c2,c3,event_tailer_start,t1>,<c2,c3,event_tailer_connected,t1>,<c2,c3,event_tailer___frame,t1>,<c2,c3,event_tailer_hit,t1>,<c3,c4,event_tailer_start,t1>,<c3,c4,event_tailer_connected,t1>,<c3,c4,event_tailer___frame,t1>,<c3,c4,event_tailer_hit,t1>,<c4,c5,event_tailer_start,t1>,<c4,c5,event_tailer_connected,t1>,<c4,c5,event_tailer___frame,t1>,<c4,c5,event_tailer_hit,t1>,<c5,c6,event_tailer_start,t1>,<c5,c6,event_tailer_connected,t1>,<c5,c6,event_tailer___frame,t1>,<c5,c6,event_tailer_hit,t1>,<c6,c7,event_tailer_start,t1>,<c6,c7,event_tailer_connected,t1>,<c6,c7,event_tailer___frame,t1>,<c6,c7,event_tailer_hit,t1>,<c7,c8,event_tailer_start,t1>,<c7,c8,event_tailer_connected,t1>,<c7,c8,event_tailer___frame,t1>,<c7,c8,event_tailer_hit,t1>,<c8,c9,event_tailer_start,t1>,<c8,c9,event_tailer_connected,t1>,<c8,c9,event_tailer___frame,t1>,<c8,c9,event_tailer_hit,t1>,<c1,c2,event_tailer_start,t2>,<c1,c2,event_tailer_connected,t2>,<c1,c2,event_tailer___frame,t2>,<c1,c2,event_tailer_hit,t2>,<c2,c3,event_tailer_start,t2>,<c2,c3,event_tailer_connected,t2>,<c2,c3,event_tailer___frame,t2>,<c2,c3,event_tailer_hit,t2>,<c3,c4,event_tailer_start,t2>,<c3,c4,event_tailer_connected,t2>,<c3,c4,event_tailer___frame,t2>,<c3,c4,event_tailer_hit,t2>,<c4,c5,event_tailer_start,t2>,<c4,c5,event_tailer_connected,t2>,<c4,c5,event_tailer___frame,t2>,<c4,c5,event_tailer_hit,t2>,<c5,c6,event_tailer_start,t2>,<c5,c6,event_tailer_connected,t2>,<c5,c6,event_tailer___frame,t2>,<c5,c6,event_tailer_hit,t2>,<c6,c7,event_tailer_start,t2>,<c6,c7,event_tailer_connected,t2>,<c6,c7,event_tailer___frame,t2>,<c6,c7,event_tailer_hit,t2>,<c7,c8,event_tailer_start,t2>,<c7,c8,event_tailer_connected,t2>,<c7,c8,event_tailer___frame,t2>,<c7,c8,event_tailer_hit,t2>,<c8,c9,event_tailer_start,t2>,<c8,c9,event_tailer_connected,t2>,<c8,c9,event_tailer___frame,t2>,<c8,c9,event_tailer_hit,t2>,<c1,c2,event_follower_start,f1>,<c1,c2,event_follower___frame,f1>,<c1,c2,event_follower_hit,f1>,<c2,c3,event_follower_start,f1>,<c2,c3,event_follower___frame,f1>,<c2,c3,event_follower_hit,f1>,<c3,c4,event_follower_start,f1>,<c3,c4,event_follower___frame,f1>,<c3,c4,event_follower_hit,f1>,<c4,c5,event_follower_start,f1>,<c4,c5,event_follower___frame,f1>,<c4,c5,event_follower_hit,f1>,<c5,c6,event_follower_start,f1>,<c5,c6,event_follower___frame,f1>,<c5,c6,event_follower_hit,f1>,<c6,c7,event_follower_start,f1>,<c6,c7,event_follower___frame,f1>,<c6,c7,event_follower_hit,f1>,<c7,c8,event_follower_start,f1>,<c7,c8,event_follower___frame,f1>,<c7,c8,event_follower_hit,f1>,<c8,c9,event_follower_start,f1>,<c8,c9,event_follower___frame,f1>,<c8,c9,event_follower_hit,f1>,<c1,c2,event_follower_start,f2>,<c1,c2,event_follower___frame,f2>,<c1,c2,event_follower_hit,f2>,<c2,c3,event_follower_start,f2>,<c2,c3,event_follower___frame,f2>,<c2,c3,event_follower_hit,f2>,<c3,c4,event_follower_start,f2>,<c3,c4,event_follower___frame,f2>,<c3,c4,event_follower_hit,f2>,<c4,c5,event_follower_start,f2>,<c4,c5,event_follower___frame,f2>,<c4,c5,event_follower_hit,f2>,<c5,c6,event_follower_start,f2>,<c5,c6,event_follower___frame,f2>,<c5,c6,event_follower_hit,f2>,<c6,c7,event_follower_start,f2>,<c6,c7,event_follower___frame,f2>,<c6,c7,event_follower_hit,f2>,<c7,c8,event_follower_start,f2>,<c7,c8,event_follower___frame,f2>,<c7,c8,event_follower_hit,f2>,<c8,c9,event_follower_start,f2>,<c8,c9,event_follower___frame,f2>,<c8,c9,event_follower_hit,f2>,<c1,c2,event_leader_hit,l1>,<c1,c2,event_leader_start,l1>,<c1,c2,event_leader___frame,l1>,<c2,c3,event_leader_hit,l1>,<c2,c3,event_leader_start,l1>,<c2,c3,event_leader___frame,l1>,<c3,c4,event_leader_hit,l1>,<c3,c4,event_leader_start,l1>,<c3,c4,event_leader___frame,l1>,<c4,c5,event_leader_hit,l1>,<c4,c5,event_leader_start,l1>,<c4,c5,event_leader___frame,l1>,<c5,c6,event_leader_hit,l1>,<c5,c6,event_leader_start,l1>,<c5,c6,event_leader___frame,l1>,<c6,c7,event_leader_hit,l1>,<c6,c7,event_leader_start,l1>,<c6,c7,event_leader___frame,l1>,<c7,c8,event_leader_hit,l1>,<c7,c8,event_leader_start,l1>,<c7,c8,event_leader___frame,l1>,<c8,c9,event_leader_hit,l1>,<c8,c9,event_leader_start,l1>,<c8,c9,event_leader___frame,l1>,<c1,c2,event_leader_hit,l2>,<c1,c2,event_leader_start,l2>,<c1,c2,event_leader___frame,l2>,<c2,c3,event_leader_hit,l2>,<c2,c3,event_leader_start,l2>,<c2,c3,event_leader___frame,l2>,<c3,c4,event_leader_hit,l2>,<c3,c4,event_leader_start,l2>,<c3,c4,event_leader___frame,l2>,<c4,c5,event_leader_hit,l2>,<c4,c5,event_leader_start,l2>,<c4,c5,event_leader___frame,l2>,<c5,c6,event_leader_hit,l2>,<c5,c6,event_leader_start,l2>,<c5,c6,event_leader___frame,l2>,<c6,c7,event_leader_hit,l2>,<c6,c7,event_leader_start,l2>,<c6,c7,event_leader___frame,l2>,<c7,c8,event_leader_hit,l2>,<c7,c8,event_leader_start,l2>,<c7,c8,event_leader___frame,l2>,<c8,c9,event_leader_hit,l2>,<c8,c9,event_leader_start,l2>,<c8,c9,event_leader___frame,l2>}
changedInstance (cur:id, nxt:id, instance:id) <= {<c1,c2,l1>,<c1,c2,l2>,<c1,c2,f1>,<c1,c2,f2>,<c1,c2,t1>,<c1,c2,t2>,<c2,c3,l1>,<c2,c3,l2>,<c2,c3,f1>,<c2,c3,f2>,<c2,c3,t1>,<c2,c3,t2>,<c3,c4,l1>,<c3,c4,l2>,<c3,c4,f1>,<c3,c4,f2>,<c3,c4,t1>,<c3,c4,t2>,<c4,c5,l1>,<c4,c5,l2>,<c4,c5,f1>,<c4,c5,f2>,<c4,c5,t1>,<c4,c5,t2>,<c5,c6,l1>,<c5,c6,l2>,<c5,c6,f1>,<c5,c6,f2>,<c5,c6,t1>,<c5,c6,t2>,<c6,c7,l1>,<c6,c7,l2>,<c6,c7,f1>,<c6,c7,f2>,<c6,c7,t1>,<c6,c7,t2>,<c7,c8,l1>,<c7,c8,l2>,<c7,c8,f1>,<c7,c8,f2>,<c7,c8,t1>,<c7,c8,t2>,<c8,c9,l1>,<c8,c9,l2>,<c8,c9,f1>,<c8,c9,f2>,<c8,c9,t1>,<c8,c9,t2>}

SVTailerOnePrims (config:id, instance:id, nrOfHits:int) <= {<c1,t1,?>,<c1,t2,?>,<c2,t1,?>,<c2,t2,?>,<c3,t1,?>,<c3,t2,?>,<c4,t1,?>,<c4,t2,?>,<c5,t1,?>,<c5,t2,?>,<c6,t1,?>,<c6,t2,?>,<c7,t1,?>,<c7,t2,?>,<c8,t1,?>,<c8,t2,?>,<c9,t1,?>,<c9,t2,?>}

SVFollowerOnePrims (config:id, instance:id, times:int) <= {<c1,f1,?>,<c1,f2,?>,<c2,f1,?>,<c2,f2,?>,<c3,f1,?>,<c3,f2,?>,<c4,f1,?>,<c4,f2,?>,<c5,f1,?>,<c5,f2,?>,<c6,f1,?>,<c6,f2,?>,<c7,f1,?>,<c7,f2,?>,<c8,f1,?>,<c8,f2,?>,<c9,f1,?>,<c9,f2,?>}
SVFollowerTailer (config:id, instance:id, tailer:id) <= {<c1,f1,t1>,<c1,f1,t2>,<c1,f2,t1>,<c1,f2,t2>,<c2,f1,t1>,<c2,f1,t2>,<c2,f2,t1>,<c2,f2,t2>,<c3,f1,t1>,<c3,f1,t2>,<c3,f2,t1>,<c3,f2,t2>,<c4,f1,t1>,<c4,f1,t2>,<c4,f2,t1>,<c4,f2,t2>,<c5,f1,t1>,<c5,f1,t2>,<c5,f2,t1>,<c5,f2,t2>,<c6,f1,t1>,<c6,f1,t2>,<c6,f2,t1>,<c6,f2,t2>,<c7,f1,t1>,<c7,f1,t2>,<c7,f2,t1>,<c7,f2,t2>,<c8,f1,t1>,<c8,f1,t2>,<c8,f2,t1>,<c8,f2,t2>,<c9,f1,t1>,<c9,f1,t2>,<c9,f2,t1>,<c9,f2,t2>}

SVLeaderOnePrims (config:id, instance:id, times:int) <= {<c1,l1,?>,<c1,l2,?>,<c2,l1,?>,<c2,l2,?>,<c3,l1,?>,<c3,l2,?>,<c4,l1,?>,<c4,l2,?>,<c5,l1,?>,<c5,l2,?>,<c6,l1,?>,<c6,l2,?>,<c7,l1,?>,<c7,l2,?>,<c8,l1,?>,<c8,l2,?>,<c9,l1,?>,<c9,l2,?>}
SVLeaderFollower (config:id, instance:id, follower:id) <= {<c1,l1,f1>,<c1,l1,f2>,<c1,l2,f1>,<c1,l2,f2>,<c2,l1,f1>,<c2,l1,f2>,<c2,l2,f1>,<c2,l2,f2>,<c3,l1,f1>,<c3,l1,f2>,<c3,l2,f1>,<c3,l2,f2>,<c4,l1,f1>,<c4,l1,f2>,<c4,l2,f1>,<c4,l2,f2>,<c5,l1,f1>,<c5,l1,f2>,<c5,l2,f1>,<c5,l2,f2>,<c6,l1,f1>,<c6,l1,f2>,<c6,l2,f1>,<c6,l2,f2>,<c7,l1,f1>,<c7,l1,f2>,<c7,l2,f1>,<c7,l2,f2>,<c8,l1,f1>,<c8,l1,f2>,<c8,l2,f1>,<c8,l2,f2>,<c9,l1,f1>,<c9,l1,f2>,<c9,l2,f1>,<c9,l2,f2>}

ParamsEventFollowerStartTailer (cur:id, nxt:id, tailer:id) <= {<c1,c2,t1>,<c1,c2,t2>,<c2,c3,t1>,<c2,c3,t2>,<c3,c4,t1>,<c3,c4,t2>,<c4,c5,t1>,<c4,c5,t2>,<c5,c6,t1>,<c5,c6,t2>,<c6,c7,t1>,<c6,c7,t2>,<c7,c8,t1>,<c7,c8,t2>,<c8,c9,t1>,<c8,c9,t2>,<c9,c10,t1>,<c9,c10,t2>}
ParamsEventLeaderStartFollower (cur:id, nxt:id, follower:id) <= {<c1,c2,f1>,<c1,c2,f2>,<c2,c3,f1>,<c2,c3,f2>,<c3,c4,f1>,<c3,c4,f2>,<c4,c5,f1>,<c4,c5,f2>,<c5,c6,f1>,<c5,c6,f2>,<c6,c7,f1>,<c6,c7,f2>,<c7,c8,f1>,<c7,c8,f2>,<c8,c9,f1>,<c8,c9,f2>,<c9,c10,f1>,<c9,c10,f2>}

// Generic 'Type' constraints
order ⊆ Config[config as cur] ⨯ Config[config as nxt]
raisedEvent ⊆ order ⨯ allowedTransitions[event] ⨯ Instance[instance]
instanceInState ⊆ Instance[instance] ⨯ Config ⨯ State
changedInstance ⊆ order ⨯ Instance[instance]
    
// Machine specific `type` constraints
SVTailerOnePrims[config,instance] ⊆ Config ⨯ (Instance ⨝ Tailer)[instance]
SVFollowerOnePrims[config,instance] ⊆ Config ⨯ (Instance ⨝ Follower)[instance]
SVFollowerTailer ⊆ Config ⨯ (Instance ⨝ Follower)[instance] ⨯ (Instance ⨝ Tailer)[instance->tailer]
SVLeaderOnePrims[config,instance] ⊆ Config ⨯ (Instance ⨝ Leader)[instance]
SVLeaderFollower ⊆ Config ⨯ (Instance ⨝ Leader)[instance] ⨯ (Instance ⨝ Follower)[instance->follower]

ParamsEventFollowerStartTailer ⊆ order ⨯ (Instance ⨝ Tailer)[instance->tailer]
ParamsEventLeaderStartFollower ⊆ order ⨯ (Instance ⨝ Follower)[instance->follower]

// Specific per event
∀ o ∈ order ⨝ raisedEvent | (
  (some (o ⨝ EventFollowerStart) ⇒ one (o ⨝ ParamsEventFollowerStartTailer)) ∧
  (some (o ⨝ EventLeaderStart) ⇒ one (o ⨝ ParamsEventLeaderStartFollower))
)

// Generic: All configurations are reachable
∀ c ∈ Config ∖ InitialConfig | c ⊆ (InitialConfig[config as cur] ⨝ ^<cur,nxt>order)[nxt -> config]

// Generic: Every transition can only happen by exactly one event
∀ o ∈ order | one o ⨝ raisedEvent

// Generic: In every configuration all machines have a state
∀ c ∈ Config, inst ∈ Instance | one instanceInState ⨝ c ⨝ inst

// Specific per machine: In every configuration iff a machine is in an initialized state then it must have values
∀ c ∈ Config, inst ∈ (Instance ⨝ Tailer)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇔ one SVTailerOnePrims ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Follower)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇔ one SVFollowerOnePrims ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Follower)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇒ one SVFollowerTailer ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Follower)[instance] | (no (((c ⨯ inst) ⨝ instanceInState)[state] ∩ initialized) ⇒ no SVFollowerTailer ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Leader)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇔ one SVLeaderOnePrims ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Leader)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇒ one SVLeaderFollower ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Leader)[instance] | (no (((c ⨯ inst) ⨝ instanceInState)[state] ∩ initialized) ⇒ no SVLeaderFollower ⨝ c ⨝ inst)


// Generic: Transitions are only allowed between if an event is specified between two states
∀ o ∈ order ⨝ raisedEvent | (o[cur as config] ⨝ instanceInState)[state->from] ⨯ (o[nxt as config] ⨝ instanceInState)[state->to] ⨯ o[event] ⊆ allowedTransitions

// Transition function
∀ o ∈ order |  
  (
    // Events from Tailer  
    ∀ inst ∈ (Instance ⨝ Tailer)[instance] |  
      // Iff this is the instance that raised the event then one of the transitions must have happened 
      (some inst ∩ ((raisedEvent ⨝ o)[instance]) ⇔ 
        // Event Tailer.connected
        (let thisInst = inst,
             curTailerState = (instanceInState ⨝ o[cur->config] ⨝ thisInst)[state],
             nxtTailerState = (instanceInState ⨝ o[nxt->config] ⨝ thisInst)[state],
             curTailerFlattened = (SVTailerOnePrims ⨝ o[cur -> config] ⨝ thisInst)[nrOfHits->curNrOfHits],
             nxtTailerFlattened = (SVTailerOnePrims ⨝ o[nxt -> config] ⨝ thisInst)[nrOfHits->nxtNrOfHits] |
          ( 
             
            // Postconditions
            (some (curTailerFlattened ⨯ nxtTailerFlattened) where (nxtNrOfHits = curNrOfHits))  ∧ 
            // Generic event conditions
            // Force the instance to go to the correct next state
            nxtTailerState = (curTailerState[state as from] ⨝ (allowedTransitions ⨝ EventTailerConnected))[to->state] ∧
            // Make sure this instance is in the change set
            thisInst ⊆ (changedInstance ⨝ o)[instance]
            // Make sure the right event is raised
            ∧ (o ⨝ raisedEvent)[event] = EventTailerConnected ∧ 
            // Make sure that the changed instance set only contains as many tuples as where asserted as beign members 
            some (changedInstance ⨝ o)[instance][count() as nci] where nci = 1
          
          )
        )
         ∨ 
        // Event Tailer.hit
        (let thisInst = inst,
             curTailerState = (instanceInState ⨝ o[cur->config] ⨝ thisInst)[state],
             nxtTailerState = (instanceInState ⨝ o[nxt->config] ⨝ thisInst)[state],
             curTailerFlattened = (SVTailerOnePrims ⨝ o[cur -> config] ⨝ thisInst)[nrOfHits->curNrOfHits],
             nxtTailerFlattened = (SVTailerOnePrims ⨝ o[nxt -> config] ⨝ thisInst)[nrOfHits->nxtNrOfHits] |
          ( 
             
            // Postconditions
            (some (curTailerFlattened ⨯ nxtTailerFlattened) where (nxtNrOfHits = curNrOfHits  +  1))  ∧ 
            // Generic event conditions
            // Force the instance to go to the correct next state
            nxtTailerState = (curTailerState[state as from] ⨝ (allowedTransitions ⨝ EventTailerHit))[to->state] ∧
            // Make sure this instance is in the change set
            thisInst ⊆ (changedInstance ⨝ o)[instance]
            // Make sure the right event is raised
            ∧ (o ⨝ raisedEvent)[event] = EventTailerHit ∧ 
            // Make sure that the changed instance set only contains as many tuples as where asserted as beign members 
            some (changedInstance ⨝ o)[instance][count() as nci] where nci = 1
          
          )
        )
         ∨ 
        // Event Tailer.start
        (let thisInst = inst,
             curTailerState = (instanceInState ⨝ o[cur->config] ⨝ thisInst)[state],
             nxtTailerState = (instanceInState ⨝ o[nxt->config] ⨝ thisInst)[state],
             curTailerFlattened = (SVTailerOnePrims ⨝ o[cur -> config] ⨝ thisInst)[nrOfHits->curNrOfHits],
             nxtTailerFlattened = (SVTailerOnePrims ⨝ o[nxt -> config] ⨝ thisInst)[nrOfHits->nxtNrOfHits] |
          ( 
             
            // Postconditions
            (some (nxtTailerFlattened) where (nxtNrOfHits = 0))  ∧ 
            // Generic event conditions
            // Force the instance to go to the correct next state
            nxtTailerState = (curTailerState[state as from] ⨝ (allowedTransitions ⨝ EventTailerStart))[to->state] ∧
            // Make sure this instance is in the change set
            thisInst ⊆ (changedInstance ⨝ o)[instance]
            // Make sure the right event is raised
            ∧ (o ⨝ raisedEvent)[event] = EventTailerStart ∧ 
            // Make sure that the changed instance set only contains as many tuples as where asserted as beign members 
            some (changedInstance ⨝ o)[instance][count() as nci] where nci = 1
          
          )
        )
      ) 
      ∧
      // Iff it is not a transitioning instance, frame the values
      (no inst ∩ (changedInstance ⨝ o)[instance] ⇔
        // Frame values if needed
        let thisInst = inst,
            curTailerState = (instanceInState ⨝ o[cur->config] ⨝ thisInst)[state],
            nxtTailerState = (instanceInState ⨝ o[nxt->config] ⨝ thisInst)[state],
            curTailerFlattened = (SVTailerOnePrims ⨝ o[cur -> config] ⨝ thisInst)[nrOfHits->curNrOfHits],
            nxtTailerFlattened = (SVTailerOnePrims ⨝ o[nxt -> config] ⨝ thisInst)[nrOfHits->nxtNrOfHits] | (
          // State must stay the same
          nxtTailerState = curTailerState
          ∧
          (
            (no curTailerFlattened) ∨ 
            (  
              // Postconditions
              (some (curTailerFlattened ⨯ nxtTailerFlattened) where (nxtNrOfHits = curNrOfHits))
            )
          )  
        )
      )
  )
   ∧ 
  (
    // Events from Follower  
    ∀ inst ∈ (Instance ⨝ Follower)[instance] |  
      // Iff this is the instance that raised the event then one of the transitions must have happened 
      (some inst ∩ ((raisedEvent ⨝ o)[instance]) ⇔ 
        // Event Follower.hit
        (let thisInst = inst,
             curFollowerState = (instanceInState ⨝ o[cur->config] ⨝ thisInst)[state],
             nxtFollowerState = (instanceInState ⨝ o[nxt->config] ⨝ thisInst)[state],
             curFollowerFlattened = (SVFollowerOnePrims ⨝ o[cur -> config] ⨝ thisInst)[times->curTimes],
             nxtFollowerFlattened = (SVFollowerOnePrims ⨝ o[nxt -> config] ⨝ thisInst)[times->nxtTimes],
             curFollowerTailer = (o[cur -> config] ⨝ SVFollowerTailer ⨝ thisInst)[tailer],
             nxtFollowerTailer = (o[nxt -> config] ⨝ SVFollowerTailer ⨝ thisInst)[tailer] |
          ( 
            // Preconditions 
            // Synchronised with `Tailer.hit` event
            
            // Event Tailer.hit
            (let thisInst = curFollowerTailer[tailer][tailer->instance],
                 curTailerState = (instanceInState ⨝ o[cur->config] ⨝ thisInst)[state],
                 nxtTailerState = (instanceInState ⨝ o[nxt->config] ⨝ thisInst)[state],
                 curTailerFlattened = (SVTailerOnePrims ⨝ o[cur -> config] ⨝ thisInst)[nrOfHits->curNrOfHits],
                 nxtTailerFlattened = (SVTailerOnePrims ⨝ o[nxt -> config] ⨝ thisInst)[nrOfHits->nxtNrOfHits] |
              ( 
                 
                // Postconditions
                (some (curTailerFlattened ⨯ nxtTailerFlattened) where (nxtNrOfHits = curNrOfHits  +  1))  ∧ 
                // Generic event conditions
                // Force the instance to go to the correct next state
                nxtTailerState = (curTailerState[state as from] ⨝ (allowedTransitions ⨝ EventTailerHit))[to->state] ∧
                // Make sure this instance is in the change set
                thisInst ⊆ (changedInstance ⨝ o)[instance]
              
              )
            )  ∧ 
            // Postconditions
            nxtFollowerTailer[tailer] = curFollowerTailer[tailer] ∧
            (some (curFollowerFlattened ⨯ nxtFollowerFlattened) where (nxtTimes = curTimes  +  1))  ∧ 
            // Generic event conditions
            // Force the instance to go to the correct next state
            nxtFollowerState = (curFollowerState[state as from] ⨝ (allowedTransitions ⨝ EventFollowerHit))[to->state] ∧
            // Make sure this instance is in the change set
            thisInst ⊆ (changedInstance ⨝ o)[instance]
            // Make sure the right event is raised
            ∧ (o ⨝ raisedEvent)[event] = EventFollowerHit ∧ 
            // Make sure that the changed instance set only contains as many tuples as where asserted as beign members 
            some (changedInstance ⨝ o)[instance][count() as nci] where nci = 2
          
          )
        )
         ∨ 
        // Event Follower.start
        (let thisInst = inst,
             curFollowerState = (instanceInState ⨝ o[cur->config] ⨝ thisInst)[state],
             nxtFollowerState = (instanceInState ⨝ o[nxt->config] ⨝ thisInst)[state],
             curFollowerFlattened = (SVFollowerOnePrims ⨝ o[cur -> config] ⨝ thisInst)[times->curTimes],
             nxtFollowerFlattened = (SVFollowerOnePrims ⨝ o[nxt -> config] ⨝ thisInst)[times->nxtTimes],
             curFollowerTailer = (o[cur -> config] ⨝ SVFollowerTailer ⨝ thisInst)[tailer],
             nxtFollowerTailer = (o[nxt -> config] ⨝ SVFollowerTailer ⨝ thisInst)[tailer],
             paramsFollowerStartTailer = (o ⨝ ParamsEventFollowerStartTailer)[tailer] |
          ( 
            // Preconditions 
            ((paramsFollowerStartTailer[tailer->instance] ⨯ o[cur->config]) ⨝ instanceInState)[state] ⊆ StateTailerWaiting ∧
            // Synchronised with `Tailer.connected` event
            
            // Event Tailer.connected
            (let thisInst = paramsFollowerStartTailer[tailer][tailer->instance],
                 curTailerState = (instanceInState ⨝ o[cur->config] ⨝ thisInst)[state],
                 nxtTailerState = (instanceInState ⨝ o[nxt->config] ⨝ thisInst)[state],
                 curTailerFlattened = (SVTailerOnePrims ⨝ o[cur -> config] ⨝ thisInst)[nrOfHits->curNrOfHits],
                 nxtTailerFlattened = (SVTailerOnePrims ⨝ o[nxt -> config] ⨝ thisInst)[nrOfHits->nxtNrOfHits] |
              ( 
                 
                // Postconditions
                (some (curTailerFlattened ⨯ nxtTailerFlattened) where (nxtNrOfHits = curNrOfHits))  ∧ 
                // Generic event conditions
                // Force the instance to go to the correct next state
                nxtTailerState = (curTailerState[state as from] ⨝ (allowedTransitions ⨝ EventTailerConnected))[to->state] ∧
                // Make sure this instance is in the change set
                thisInst ⊆ (changedInstance ⨝ o)[instance]
              
              )
            )  ∧ 
            // Postconditions
            (some (nxtFollowerFlattened) where (nxtTimes = 0)) ∧
            nxtFollowerTailer[tailer] = paramsFollowerStartTailer[tailer]  ∧ 
            // Generic event conditions
            // Force the instance to go to the correct next state
            nxtFollowerState = (curFollowerState[state as from] ⨝ (allowedTransitions ⨝ EventFollowerStart))[to->state] ∧
            // Make sure this instance is in the change set
            thisInst ⊆ (changedInstance ⨝ o)[instance]
            // Make sure the right event is raised
            ∧ (o ⨝ raisedEvent)[event] = EventFollowerStart ∧ 
            // Make sure that the changed instance set only contains as many tuples as where asserted as beign members 
            some (changedInstance ⨝ o)[instance][count() as nci] where nci = 2
          
          )
        )
      ) 
      ∧
      // Iff it is not a transitioning instance, frame the values
      (no inst ∩ (changedInstance ⨝ o)[instance] ⇔
        // Frame values if needed
        let thisInst = inst,
            curFollowerState = (instanceInState ⨝ o[cur->config] ⨝ thisInst)[state],
            nxtFollowerState = (instanceInState ⨝ o[nxt->config] ⨝ thisInst)[state],
            curFollowerFlattened = (SVFollowerOnePrims ⨝ o[cur -> config] ⨝ thisInst)[times->curTimes],
            nxtFollowerFlattened = (SVFollowerOnePrims ⨝ o[nxt -> config] ⨝ thisInst)[times->nxtTimes],
            curFollowerTailer = (o[cur -> config] ⨝ SVFollowerTailer ⨝ thisInst)[tailer],
            nxtFollowerTailer = (o[nxt -> config] ⨝ SVFollowerTailer ⨝ thisInst)[tailer] | (
          // State must stay the same
          nxtFollowerState = curFollowerState
          ∧
          (
            (no curFollowerFlattened) ∨ 
            (  
              // Postconditions
              nxtFollowerTailer[tailer] = curFollowerTailer[tailer] ∧
              (some (curFollowerFlattened ⨯ nxtFollowerFlattened) where (nxtTimes = curTimes))
            )
          )  
        )
      )
  )
   ∧ 
  (
    // Events from Leader  
    ∀ inst ∈ (Instance ⨝ Leader)[instance] |  
      // Iff this is the instance that raised the event then one of the transitions must have happened 
      (some inst ∩ ((raisedEvent ⨝ o)[instance]) ⇔ 
        // Event Leader.start
        (let thisInst = inst,
             curLeaderState = (instanceInState ⨝ o[cur->config] ⨝ thisInst)[state],
             nxtLeaderState = (instanceInState ⨝ o[nxt->config] ⨝ thisInst)[state],
             curLeaderFlattened = (SVLeaderOnePrims ⨝ o[cur -> config] ⨝ thisInst)[times->curTimes],
             nxtLeaderFlattened = (SVLeaderOnePrims ⨝ o[nxt -> config] ⨝ thisInst)[times->nxtTimes],
             curLeaderFollower = (o[cur -> config] ⨝ SVLeaderFollower ⨝ thisInst)[follower],
             nxtLeaderFollower = (o[nxt -> config] ⨝ SVLeaderFollower ⨝ thisInst)[follower],
             paramsLeaderStartFollower = (o ⨝ ParamsEventLeaderStartFollower)[follower] |
          ( 
            // Preconditions 
            ((paramsLeaderStartFollower[follower->instance] ⨯ o[cur->config]) ⨝ instanceInState)[state] ⊆ StateFollowerActive  ∧ 
            // Postconditions
            nxtLeaderFollower[follower] = paramsLeaderStartFollower[follower] ∧
            (some (nxtLeaderFlattened) where (nxtTimes = 0))  ∧ 
            // Generic event conditions
            // Force the instance to go to the correct next state
            nxtLeaderState = (curLeaderState[state as from] ⨝ (allowedTransitions ⨝ EventLeaderStart))[to->state] ∧
            // Make sure this instance is in the change set
            thisInst ⊆ (changedInstance ⨝ o)[instance]
            // Make sure the right event is raised
            ∧ (o ⨝ raisedEvent)[event] = EventLeaderStart ∧ 
            // Make sure that the changed instance set only contains as many tuples as where asserted as beign members 
            some (changedInstance ⨝ o)[instance][count() as nci] where nci = 1
          
          )
        )
         ∨ 
        // Event Leader.hit
        (let thisInst = inst,
             curLeaderState = (instanceInState ⨝ o[cur->config] ⨝ thisInst)[state],
             nxtLeaderState = (instanceInState ⨝ o[nxt->config] ⨝ thisInst)[state],
             curLeaderFlattened = (SVLeaderOnePrims ⨝ o[cur -> config] ⨝ thisInst)[times->curTimes],
             nxtLeaderFlattened = (SVLeaderOnePrims ⨝ o[nxt -> config] ⨝ thisInst)[times->nxtTimes],
             curLeaderFollower = (o[cur -> config] ⨝ SVLeaderFollower ⨝ thisInst)[follower],
             nxtLeaderFollower = (o[nxt -> config] ⨝ SVLeaderFollower ⨝ thisInst)[follower] |
          ( 
            // Preconditions 
            // Synchronised with `Follower.hit` event
            
            // Event Follower.hit
            (let thisInst = curLeaderFollower[follower][follower->instance],
                 curFollowerState = (instanceInState ⨝ o[cur->config] ⨝ thisInst)[state],
                 nxtFollowerState = (instanceInState ⨝ o[nxt->config] ⨝ thisInst)[state],
                 curFollowerFlattened = (SVFollowerOnePrims ⨝ o[cur -> config] ⨝ thisInst)[times->curTimes],
                 nxtFollowerFlattened = (SVFollowerOnePrims ⨝ o[nxt -> config] ⨝ thisInst)[times->nxtTimes],
                 curFollowerTailer = (o[cur -> config] ⨝ SVFollowerTailer ⨝ thisInst)[tailer],
                 nxtFollowerTailer = (o[nxt -> config] ⨝ SVFollowerTailer ⨝ thisInst)[tailer] |
              ( 
                // Preconditions 
                // Synchronised with `Tailer.hit` event
                
                // Event Tailer.hit
                (let thisInst = curFollowerTailer[tailer][tailer->instance],
                     curTailerState = (instanceInState ⨝ o[cur->config] ⨝ thisInst)[state],
                     nxtTailerState = (instanceInState ⨝ o[nxt->config] ⨝ thisInst)[state],
                     curTailerFlattened = (SVTailerOnePrims ⨝ o[cur -> config] ⨝ thisInst)[nrOfHits->curNrOfHits],
                     nxtTailerFlattened = (SVTailerOnePrims ⨝ o[nxt -> config] ⨝ thisInst)[nrOfHits->nxtNrOfHits] |
                  ( 
                     
                    // Postconditions
                    (some (curTailerFlattened ⨯ nxtTailerFlattened) where (nxtNrOfHits = curNrOfHits  +  1))  ∧ 
                    // Generic event conditions
                    // Force the instance to go to the correct next state
                    nxtTailerState = (curTailerState[state as from] ⨝ (allowedTransitions ⨝ EventTailerHit))[to->state] ∧
                    // Make sure this instance is in the change set
                    thisInst ⊆ (changedInstance ⨝ o)[instance]
                  
                  )
                )  ∧ 
                // Postconditions
                nxtFollowerTailer[tailer] = curFollowerTailer[tailer] ∧
                (some (curFollowerFlattened ⨯ nxtFollowerFlattened) where (nxtTimes = curTimes  +  1))  ∧ 
                // Generic event conditions
                // Force the instance to go to the correct next state
                nxtFollowerState = (curFollowerState[state as from] ⨝ (allowedTransitions ⨝ EventFollowerHit))[to->state] ∧
                // Make sure this instance is in the change set
                thisInst ⊆ (changedInstance ⨝ o)[instance]
              
              )
            )  ∧ 
            // Postconditions
            nxtLeaderFollower[follower] = curLeaderFollower[follower] ∧
            (some (curLeaderFlattened ⨯ nxtLeaderFlattened) where (nxtTimes = curTimes  +  1))  ∧ 
            // Generic event conditions
            // Force the instance to go to the correct next state
            nxtLeaderState = (curLeaderState[state as from] ⨝ (allowedTransitions ⨝ EventLeaderHit))[to->state] ∧
            // Make sure this instance is in the change set
            thisInst ⊆ (changedInstance ⨝ o)[instance]
            // Make sure the right event is raised
            ∧ (o ⨝ raisedEvent)[event] = EventLeaderHit ∧ 
            // Make sure that the changed instance set only contains as many tuples as where asserted as beign members 
            some (changedInstance ⨝ o)[instance][count() as nci] where nci = 3
          
          )
        )
      ) 
      ∧
      // Iff it is not a transitioning instance, frame the values
      (no inst ∩ (changedInstance ⨝ o)[instance] ⇔
        // Frame values if needed
        let thisInst = inst,
            curLeaderState = (instanceInState ⨝ o[cur->config] ⨝ thisInst)[state],
            nxtLeaderState = (instanceInState ⨝ o[nxt->config] ⨝ thisInst)[state],
            curLeaderFlattened = (SVLeaderOnePrims ⨝ o[cur -> config] ⨝ thisInst)[times->curTimes],
            nxtLeaderFlattened = (SVLeaderOnePrims ⨝ o[nxt -> config] ⨝ thisInst)[times->nxtTimes],
            curLeaderFollower = (o[cur -> config] ⨝ SVLeaderFollower ⨝ thisInst)[follower],
            nxtLeaderFollower = (o[nxt -> config] ⨝ SVLeaderFollower ⨝ thisInst)[follower] | (
          // State must stay the same
          nxtLeaderState = curLeaderState
          ∧
          (
            (no curLeaderFlattened) ∨ 
            (  
              // Postconditions
              (some (curLeaderFlattened ⨯ nxtLeaderFlattened) where (nxtTimes = curTimes)) ∧
              nxtLeaderFollower[follower] = curLeaderFollower[follower]
            )
          )  
        )
      )
  )

// Asserts: this is where the checks get added
∃ c ∈ Config | (some (c ⨝ SVLeaderOnePrims) where times = 2)
∃ c ∈ Config | ∀ l ∈ (Instance ⨝ Leader)[instance] | (l ⨝ instanceInState ⨝ c)[state] ⊆ initialized

objectives: minimize Config[count()]
