// Static configuration of state machines
// Define the specs that can take place in the transition system
PingPong (spec:id) = {<pingpong>}

// Define all possible states for all machines
State (state:id) = {<state_uninitialized>,<state_finalized>,<state_pingpong_ping>,<state_pingpong_pong>}
initialized (state:id) = {<state_pingpong_ping>,<state_pingpong_pong>}
finalized (state:id) = {<state_finalized>}
uninitialized (state:id) = {<state_uninitialized>}
StatePingPongPong (state:id) = {<state_pingpong_pong>}StatePingPongPing (state:id) = {<state_pingpong_ping>}

// Define which transitions are allowed (in the form of `from a state` -> ` via an event` -> `to a state`
allowedTransitions (from:id, to:id, event:id) = {<state_pingpong_pong,state_pingpong_ping,event_pingpong_hit>,<state_uninitialized,state_pingpong_ping,event_pingpong_start>,<state_pingpong_ping,state_pingpong_pong,event_pingpong_hit>,<state_pingpong_ping,state_pingpong_pong,event_pingpong_changename>}
// Define each event as single relation so that the events can be used as variables in the constraints 
EventPingPong__frame (event:id) = {<event_pingpong___frame>}
EventPingPongHit (event:id) = {<event_pingpong_hit>}
EventPingPongChangeName (event:id) = {<event_pingpong_changename>}
EventPingPongStart (event:id) = {<event_pingpong_start>}


// Dynamic configuration of state machines
Config (config:id) >= {<c1>} <= {<c1>,<c2>,<c3>,<c4>,<c5>,<c6>,<c7>}
order (cur:id, nxt:id) <= {<c1,c2>,<c2,c3>,<c3,c4>,<c4,c5>,<c5,c6>,<c6,c7>}
first (config:id) = {<c1>}
last (config:id) <= {<c1>,<c2>,<c3>,<c4>,<c5>,<c6>,<c7>}
back (config:id) <= {<c1>,<c2>,<c3>,<c4>,<c5>,<c6>,<c7>}
loop (cur:id, nxt:id) <= {<c2,c1>,<c2,c2>,<c3,c1>,<c3,c2>,<c3,c3>,<c4,c1>,<c4,c2>,<c4,c3>,<c4,c4>,<c5,c1>,<c5,c2>,<c5,c3>,<c5,c4>,<c5,c5>,<c6,c1>,<c6,c2>,<c6,c3>,<c6,c4>,<c6,c5>,<c6,c6>,<c7,c1>,<c7,c2>,<c7,c3>,<c7,c4>,<c7,c5>,<c7,c6>,<c7,c7>}

Instance (spec:id, instance:id) = {<pingpong,p2>,<pingpong,p1>}
instanceInState (config:id, instance:id, state:id) >= {<c1,p2,state_uninitialized>,<c1,p1,state_uninitialized>}<= {<c1,p1,state_uninitialized>,<c1,p1,state_finalized>,<c1,p1,state_pingpong_ping>,<c1,p1,state_pingpong_pong>,<c1,p2,state_uninitialized>,<c1,p2,state_finalized>,<c1,p2,state_pingpong_ping>,<c1,p2,state_pingpong_pong>,<c2,p1,state_uninitialized>,<c2,p1,state_finalized>,<c2,p1,state_pingpong_ping>,<c2,p1,state_pingpong_pong>,<c2,p2,state_uninitialized>,<c2,p2,state_finalized>,<c2,p2,state_pingpong_ping>,<c2,p2,state_pingpong_pong>,<c3,p1,state_uninitialized>,<c3,p1,state_finalized>,<c3,p1,state_pingpong_ping>,<c3,p1,state_pingpong_pong>,<c3,p2,state_uninitialized>,<c3,p2,state_finalized>,<c3,p2,state_pingpong_ping>,<c3,p2,state_pingpong_pong>,<c4,p1,state_uninitialized>,<c4,p1,state_finalized>,<c4,p1,state_pingpong_ping>,<c4,p1,state_pingpong_pong>,<c4,p2,state_uninitialized>,<c4,p2,state_finalized>,<c4,p2,state_pingpong_ping>,<c4,p2,state_pingpong_pong>,<c5,p1,state_uninitialized>,<c5,p1,state_finalized>,<c5,p1,state_pingpong_ping>,<c5,p1,state_pingpong_pong>,<c5,p2,state_uninitialized>,<c5,p2,state_finalized>,<c5,p2,state_pingpong_ping>,<c5,p2,state_pingpong_pong>,<c6,p1,state_uninitialized>,<c6,p1,state_finalized>,<c6,p1,state_pingpong_ping>,<c6,p1,state_pingpong_pong>,<c6,p2,state_uninitialized>,<c6,p2,state_finalized>,<c6,p2,state_pingpong_ping>,<c6,p2,state_pingpong_pong>,<c7,p1,state_uninitialized>,<c7,p1,state_finalized>,<c7,p1,state_pingpong_ping>,<c7,p1,state_pingpong_pong>,<c7,p2,state_uninitialized>,<c7,p2,state_finalized>,<c7,p2,state_pingpong_ping>,<c7,p2,state_pingpong_pong>}
raisedEvent (cur:id, nxt:id, event:id, instance:id) <= {<c1,c2,event_pingpong_hit,p1>,<c1,c2,event_pingpong_changename,p1>,<c1,c2,event_pingpong_start,p1>,<c2,c3,event_pingpong_hit,p1>,<c2,c3,event_pingpong_changename,p1>,<c2,c3,event_pingpong_start,p1>,<c3,c4,event_pingpong_hit,p1>,<c3,c4,event_pingpong_changename,p1>,<c3,c4,event_pingpong_start,p1>,<c4,c5,event_pingpong_hit,p1>,<c4,c5,event_pingpong_changename,p1>,<c4,c5,event_pingpong_start,p1>,<c5,c6,event_pingpong_hit,p1>,<c5,c6,event_pingpong_changename,p1>,<c5,c6,event_pingpong_start,p1>,<c6,c7,event_pingpong_hit,p1>,<c6,c7,event_pingpong_changename,p1>,<c6,c7,event_pingpong_start,p1>,<c1,c2,event_pingpong_hit,p2>,<c1,c2,event_pingpong_changename,p2>,<c1,c2,event_pingpong_start,p2>,<c2,c3,event_pingpong_hit,p2>,<c2,c3,event_pingpong_changename,p2>,<c2,c3,event_pingpong_start,p2>,<c3,c4,event_pingpong_hit,p2>,<c3,c4,event_pingpong_changename,p2>,<c3,c4,event_pingpong_start,p2>,<c4,c5,event_pingpong_hit,p2>,<c4,c5,event_pingpong_changename,p2>,<c4,c5,event_pingpong_start,p2>,<c5,c6,event_pingpong_hit,p2>,<c5,c6,event_pingpong_changename,p2>,<c5,c6,event_pingpong_start,p2>,<c6,c7,event_pingpong_hit,p2>,<c6,c7,event_pingpong_changename,p2>,<c6,c7,event_pingpong_start,p2>}
changedInstance (cur:id, nxt:id, instance:id) <= {<c1,c2,p1>,<c1,c2,p2>,<c2,c3,p1>,<c2,c3,p2>,<c3,c4,p1>,<c3,c4,p2>,<c4,c5,p1>,<c4,c5,p2>,<c5,c6,p1>,<c5,c6,p2>,<c6,c7,p1>,<c6,c7,p2>}

PingPongName (config:id, instance:id, name:str) <= {<c1,p1,?>,<c2,p1,?>,<c3,p1,?>,<c4,p1,?>,<c5,p1,?>,<c6,p1,?>,<c7,p1,?>,<c1,p2,?>,<c2,p2,?>,<c3,p2,?>,<c4,p2,?>,<c5,p2,?>,<c6,p2,?>,<c7,p2,?>}
PingPongTimes (config:id, instance:id, times:int) <= {<c1,p1,?>,<c2,p1,?>,<c3,p1,?>,<c4,p1,?>,<c5,p1,?>,<c6,p1,?>,<c7,p1,?>,<c1,p2,?>,<c2,p2,?>,<c3,p2,?>,<c4,p2,?>,<c5,p2,?>,<c6,p2,?>,<c7,p2,?>}

ParamEventPingPongStartName (cur:id, nxt:id, name:str) <= {<c1,c2,?>,<c2,c3,?>,<c3,c4,?>,<c4,c5,?>,<c5,c6,?>,<c6,c7,?>}
ParamEventPingPongChangeNameName (cur:id, nxt:id, name:str) <= {<c1,c2,?>,<c2,c3,?>,<c3,c4,?>,<c4,c5,?>,<c5,c6,?>,<c6,c7,?>}

// Constraints for the configuration and ordering relations
order ⊆ Config[config as cur] ⨯ Config[config as nxt]
last = Config ∖ order[cur->config]  // There is only one last configuration
back ⊆ Config 
lone back   
loop ⊆ last[config as cur] ⨯ back[config as nxt] // Loop contains at most one tuple going back from the last configuration to the 

// Generic 'Type' constraints    
raisedEvent ⊆ order ⨯ allowedTransitions[event] ⨯ Instance[instance]
instanceInState ⊆ Instance[instance] ⨯ Config ⨯ State
changedInstance ⊆ order ⨯ Instance[instance]
    
// Machine specific `type` constraints
PingPongName[config,instance]  ⊆ Config ⨯ (Instance ⨝ PingPong)[instance]
PingPongTimes[config,instance]  ⊆ Config ⨯ (Instance ⨝ PingPong)[instance]

ParamEventPingPongStartName[cur,nxt] ⊆ order
ParamEventPingPongChangeNameName[cur,nxt] ⊆ order

// Specific per event
∀ step ∈ order ⨝ raisedEvent | (
  (some (step ⨝ EventPingPongStart) ⇔ one (step ⨝ ParamEventPingPongStartName)) ∧
  (some (step ⨝ EventPingPongChangeName) ⇔ one (step ⨝ ParamEventPingPongChangeNameName))
)

// Generic: All configurations are reachable
∀ c ∈ Config ∖ first | c ⊆ (first[config as cur] ⨝ ^<cur,nxt>order)[nxt -> config]

// Generic: Every transition can only happen by exactly one event
∀ o ∈ order | one o ⨝ raisedEvent

// Generic: In every configuration all machines have a state
∀ c ∈ Config, inst ∈ Instance | one instanceInState ⨝ c ⨝ inst

// Specific per machine: In every configuration iff a machine is in an initialized state then it must have values
∀ c ∈ Config, inst ∈ (Instance ⨝ PingPong)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇔ one PingPongName ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ PingPong)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇔ one PingPongTimes ⨝ c ⨝ inst)


// Generic: Transitions are only allowed between if an event is specified between two states
∀ o ∈ order ⨝ raisedEvent | (o[cur as config] ⨝ instanceInState)[state->from] ⨯ (o[nxt as config] ⨝ instanceInState)[state->to] ⨯ o[event] ⊆ allowedTransitions

// Generic predicates
pred forceState[curState: (state:id), nxtState: (state:id), raisedEvent: (event:id)]
  = nxtState = (curState[state as from] ⨝ (allowedTransitions ⨝ raisedEvent))[to->state]

pred inState[config: (config:id), instance: (instance:id), state: (state:id)]
  = ((instance ⨯ config) ⨝ instanceInState)[state] ⊆ state

pred framePingPong[step: (cur:id, nxt:id), pingpong: (instance:id)] 
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ pingpong)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ pingpong)[state],
        curName = (cur ⨝ PingPongName ⨝ pingpong)[name->curName],
        nxtName = (nxt ⨝ PingPongName ⨝ pingpong)[name->nxtName],
        curTimes = (cur ⨝ PingPongTimes ⨝ pingpong)[times->curTimes],
        nxtTimes = (nxt ⨝ PingPongTimes ⨝ pingpong)[times->nxtTimes] | (
    nxtState = curState ∧
    (
      curState ⊆ uninitialized ∨ 
      (// Postconditions
       (some (curName ⨯ nxtName) where (nxtName = curName)) ∧
       (some (curTimes ⨯ nxtTimes) where (nxtTimes = curTimes)))
    )
  )

pred eventPingPongStart[step:(cur:id, nxt:id), pingpong: (instance:id), name: (name:str)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ pingpong)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ pingpong)[state],
        curName = (cur ⨝ PingPongName ⨝ pingpong)[name->curName],
        nxtName = (nxt ⨝ PingPongName ⨝ pingpong)[name->nxtName],
        curTimes = (cur ⨝ PingPongTimes ⨝ pingpong)[times->curTimes],
        nxtTimes = (nxt ⨝ PingPongTimes ⨝ pingpong)[times->nxtTimes] |
    ( 
       
      // Postconditions
      (some (name ⨯ nxtName) where (nxtName = name)) ∧
      (some (nxtTimes) where (nxtTimes = 0))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventPingPongStart] ∧
      // Make sure this instance is in the change set
      pingpong ⊆ (changedInstance ⨝ step)[instance]
    )

pred eventPingPongChangeName[step:(cur:id, nxt:id), pingpong: (instance:id), name: (name:str)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ pingpong)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ pingpong)[state],
        curName = (cur ⨝ PingPongName ⨝ pingpong)[name->curName],
        nxtName = (nxt ⨝ PingPongName ⨝ pingpong)[name->nxtName],
        curTimes = (cur ⨝ PingPongTimes ⨝ pingpong)[times->curTimes],
        nxtTimes = (nxt ⨝ PingPongTimes ⨝ pingpong)[times->nxtTimes] |
    ( 
       
      // Postconditions
      (some (curTimes ⨯ nxtTimes) where (nxtTimes = curTimes)) ∧
      (some (name ⨯ nxtName) where (nxtName = name))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventPingPongChangeName] ∧
      // Make sure this instance is in the change set
      pingpong ⊆ (changedInstance ⨝ step)[instance]
    )

pred eventPingPongHit[step:(cur:id, nxt:id), pingpong: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ pingpong)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ pingpong)[state],
        curName = (cur ⨝ PingPongName ⨝ pingpong)[name->curName],
        nxtName = (nxt ⨝ PingPongName ⨝ pingpong)[name->nxtName],
        curTimes = (cur ⨝ PingPongTimes ⨝ pingpong)[times->curTimes],
        nxtTimes = (nxt ⨝ PingPongTimes ⨝ pingpong)[times->nxtTimes] |
    ( 
       
      // Postconditions
      (some (curName ⨯ nxtName) where (nxtName = curName)) ∧
      (some (curTimes ⨯ nxtTimes) where (nxtTimes = curTimes + 1))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventPingPongHit] ∧
      // Make sure this instance is in the change set
      pingpong ⊆ (changedInstance ⨝ step)[instance]
    )


pred possibleTransitionsPingPong[step: (cur:id, nxt:id)] 
  = ∀ inst ∈ (Instance ⨝ PingPong)[instance] |
    (some inst ∩ ((raisedEvent ⨝ step)[instance]) ⇔ (
      (eventPingPongStart[step,inst,(step ⨝ ParamEventPingPongStartName)[name]] ∧
      (step ⨝ raisedEvent)[event] = EventPingPongStart ∧
      (changedInstance ⨝ step)[instance] ⊆ inst)
      ∨
      (eventPingPongChangeName[step,inst,(step ⨝ ParamEventPingPongChangeNameName)[name]] ∧
      (step ⨝ raisedEvent)[event] = EventPingPongChangeName ∧
      (changedInstance ⨝ step)[instance] ⊆ inst)
      ∨
      (eventPingPongHit[step,inst] ∧
      (step ⨝ raisedEvent)[event] = EventPingPongHit ∧
      (changedInstance ⨝ step)[instance] ⊆ inst)
    ))
    ∧
    (no inst ∩ (changedInstance ⨝ step)[instance] ⇒ framePingPong[step, inst])


// Transition function
∀ step ∈ order | possibleTransitionsPingPong[step]

// Fact: UniqueNames
∀ cur ∈ Config | (∀ p1 ∈ (PingPong ⨝ Instance)[instance],p2 ∈ (PingPong ⨝ Instance)[instance] | ((inState[cur, p1, initialized] ∧ inState[cur, p2, initialized] ∧ p1 != p2) ⇒ (some ((p2 ⨝ PingPongName ⨝ cur)[name->p2Name] ⨯ (p1 ⨝ PingPongName ⨝ cur)[name->p1Name]) where (p1Name != p2Name))))
// Asserts: this is where the checks get added
∃ cur ∈ Config | (∃ p ∈ (PingPong ⨝ Instance)[instance] | (some ((p ⨝ PingPongTimes ⨝ cur)[times->pTimes]) where (pTimes = 2)) ∧ let step = (order ⨝ cur[config as cur]), prev = cur, cur = step[nxt->config] | (some ((p ⨝ PingPongTimes ⨝ cur)[times->pTimes]) where (pTimes = 3)))

// Minimize the number of steps by minimizing the number of Configurations
objectives: minimize Config[count()]
