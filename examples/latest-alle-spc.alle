// Static configuration of state machines
Leader (spec:id) = {<leader>}Follower (spec:id) = {<follower>}

State (state:id) = {<state_uninitialized>,<state_finalized>,<state_leader_active>,<state_follower_active>}
initialized (state:id) = {<state_leader_active>,<state_follower_active>}
finalized (state:id) = {<state_finalized>}
uninitialized (state:id) = {<state_uninitialized>}
StateLeaderActive (state:id) = {<state_leader_active>}

StateFollowerActive (state:id) = {<state_follower_active>}


allowedTransitions (from:id, to:id, event:id) = {<state_uninitialized,state_leader_active,event_leader_start>,<state_leader_active,state_leader_active,event_leader_hit>,<state_follower_active,state_follower_active,event_follower_hit>,<state_uninitialized,state_follower_active,event_follower_start>}

EventLeader__frame (event:id) = {<event_leader___frame>}
EventFollower__frame (event:id) = {<event_follower___frame>}
EventLeaderStart (event:id) = {<event_leader_start>}
EventFollowerStart (event:id) = {<event_follower_start>}
EventLeaderHit (event:id) = {<event_leader_hit>}
EventFollowerHit (event:id) = {<event_follower_hit>}

// Dynamic configuration of state machines
Config (config:id) >= {<c1>} <= {<c1>,<c2>,<c3>,<c4>,<c5>,<c6>}
order (cur:id, nxt:id) <= {<c1,c2>,<c2,c3>,<c3,c4>,<c4,c5>,<c5,c6>}
InitialConfig (config:id) = {<c1>}

Instance (spec:id, instance:id) = {<leader,l1>,<follower,f1>,<follower,f2>}
instanceInState (config:id, instance:id, state:id) >= {<c1,l1,state_uninitialized>,<c1,f1,state_uninitialized>,<c1,f2,state_uninitialized>}<= {<c1,l1,state_uninitialized>,<c1,l1,state_leader_active>,<c1,l1,state_finalized>,<c1,f1,state_uninitialized>,<c1,f1,state_finalized>,<c1,f1,state_follower_active>,<c1,f2,state_uninitialized>,<c1,f2,state_finalized>,<c1,f2,state_follower_active>,<c2,l1,state_uninitialized>,<c2,l1,state_leader_active>,<c2,l1,state_finalized>,<c2,f1,state_uninitialized>,<c2,f1,state_finalized>,<c2,f1,state_follower_active>,<c2,f2,state_uninitialized>,<c2,f2,state_finalized>,<c2,f2,state_follower_active>,<c3,l1,state_uninitialized>,<c3,l1,state_leader_active>,<c3,l1,state_finalized>,<c3,f1,state_uninitialized>,<c3,f1,state_finalized>,<c3,f1,state_follower_active>,<c3,f2,state_uninitialized>,<c3,f2,state_finalized>,<c3,f2,state_follower_active>,<c4,l1,state_uninitialized>,<c4,l1,state_leader_active>,<c4,l1,state_finalized>,<c4,f1,state_uninitialized>,<c4,f1,state_finalized>,<c4,f1,state_follower_active>,<c4,f2,state_uninitialized>,<c4,f2,state_finalized>,<c4,f2,state_follower_active>,<c5,l1,state_uninitialized>,<c5,l1,state_leader_active>,<c5,l1,state_finalized>,<c5,f1,state_uninitialized>,<c5,f1,state_finalized>,<c5,f1,state_follower_active>,<c5,f2,state_uninitialized>,<c5,f2,state_finalized>,<c5,f2,state_follower_active>,<c6,l1,state_uninitialized>,<c6,l1,state_leader_active>,<c6,l1,state_finalized>,<c6,f1,state_uninitialized>,<c6,f1,state_finalized>,<c6,f1,state_follower_active>,<c6,f2,state_uninitialized>,<c6,f2,state_finalized>,<c6,f2,state_follower_active>}
raisedEvent (cur:id, nxt:id, event:id, instance:id) <= {<c1,c2,event_leader_hit,l1>,<c1,c2,event_leader_start,l1>,<c1,c2,event_leader___frame,l1>,<c2,c3,event_leader_hit,l1>,<c2,c3,event_leader_start,l1>,<c2,c3,event_leader___frame,l1>,<c3,c4,event_leader_hit,l1>,<c3,c4,event_leader_start,l1>,<c3,c4,event_leader___frame,l1>,<c4,c5,event_leader_hit,l1>,<c4,c5,event_leader_start,l1>,<c4,c5,event_leader___frame,l1>,<c5,c6,event_leader_hit,l1>,<c5,c6,event_leader_start,l1>,<c5,c6,event_leader___frame,l1>,<c1,c2,event_follower_start,f1>,<c1,c2,event_follower___frame,f1>,<c1,c2,event_follower_hit,f1>,<c2,c3,event_follower_start,f1>,<c2,c3,event_follower___frame,f1>,<c2,c3,event_follower_hit,f1>,<c3,c4,event_follower_start,f1>,<c3,c4,event_follower___frame,f1>,<c3,c4,event_follower_hit,f1>,<c4,c5,event_follower_start,f1>,<c4,c5,event_follower___frame,f1>,<c4,c5,event_follower_hit,f1>,<c5,c6,event_follower_start,f1>,<c5,c6,event_follower___frame,f1>,<c5,c6,event_follower_hit,f1>,<c1,c2,event_follower_start,f2>,<c1,c2,event_follower___frame,f2>,<c1,c2,event_follower_hit,f2>,<c2,c3,event_follower_start,f2>,<c2,c3,event_follower___frame,f2>,<c2,c3,event_follower_hit,f2>,<c3,c4,event_follower_start,f2>,<c3,c4,event_follower___frame,f2>,<c3,c4,event_follower_hit,f2>,<c4,c5,event_follower_start,f2>,<c4,c5,event_follower___frame,f2>,<c4,c5,event_follower_hit,f2>,<c5,c6,event_follower_start,f2>,<c5,c6,event_follower___frame,f2>,<c5,c6,event_follower_hit,f2>}
changedInstance (cur:id, nxt:id, instance:id) <= {<c1,c2,l1>,<c1,c2,f1>,<c1,c2,f2>,<c2,c3,l1>,<c2,c3,f1>,<c2,c3,f2>,<c3,c4,l1>,<c3,c4,f1>,<c3,c4,f2>,<c4,c5,l1>,<c4,c5,f1>,<c4,c5,f2>,<c5,c6,l1>,<c5,c6,f1>,<c5,c6,f2>}

SVLeaderOnePrims (config:id, instance:id, times:int) <= {<c1,l1,?>,<c2,l1,?>,<c3,l1,?>,<c4,l1,?>,<c5,l1,?>,<c6,l1,?>}
SVLeaderFollower (config:id, instance:id, follower:id) <= {<c1,l1,f1>,<c1,l1,f2>,<c2,l1,f1>,<c2,l1,f2>,<c3,l1,f1>,<c3,l1,f2>,<c4,l1,f1>,<c4,l1,f2>,<c5,l1,f1>,<c5,l1,f2>,<c6,l1,f1>,<c6,l1,f2>}

SVFollowerOnePrims (config:id, instance:id, times:int) <= {<c1,f1,?>,<c1,f2,?>,<c2,f1,?>,<c2,f2,?>,<c3,f1,?>,<c3,f2,?>,<c4,f1,?>,<c4,f2,?>,<c5,f1,?>,<c5,f2,?>,<c6,f1,?>,<c6,f2,?>}






ParamsEventLeaderStartFollower (cur:id, nxt:id, follower:id) <= {<c1,c2,f1>,<c1,c2,f2>,<c2,c3,f1>,<c2,c3,f2>,<c3,c4,f1>,<c3,c4,f2>,<c4,c5,f1>,<c4,c5,f2>,<c5,c6,f1>,<c5,c6,f2>,<c6,c7,f1>,<c6,c7,f2>} 









// Generic 'Type' constraints
order ⊆ Config[config as cur] ⨯ Config[config as nxt]
raisedEvent ⊆ order ⨯ allowedTransitions[event] ⨯ Instance[instance]
instanceInState ⊆ Instance[instance] ⨯ Config ⨯ State
changedInstance ⊆ order ⨯ Instance[instance]
    
// Machine specific 'Type' constraints
SVLeaderOnePrims[config,instance] ⊆ Config ⨯ Instance[instance]
SVFollowerOnePrims[config,instance] ⊆ Config ⨯ Instance[instance]

ParamsEventLeaderStartFollower ⊆ order ⨯ (Instance ⨝ Follower)[instance->follower]

// Specific per event
∀ o ∈ order ⨝ raisedEvent | (
  (some (o ⨝ EventLeaderStart) ⇔ one (o ⨝ ParamsEventLeaderStartFollower))
)
// Generic: All configurations are reachable
∀ c ∈ Config ∖ InitialConfig | c ⊆ (InitialConfig[config as cur] ⨝ ^<cur,nxt>order)[nxt -> config]

// Generic: Every transition can only happen by exactly one event
∀ o ∈ order | one o ⨝ raisedEvent

// Generic: In every configuration all machines have a state
∀ c ∈ Config, inst ∈ Instance | one instanceInState ⨝ c ⨝ inst

// Specific per machine: In every configuration iff a machine is in an initialized state then it must have values
∀ c ∈ Config, inst ∈ (Instance ⨝ Leader)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇔ one SVLeaderOnePrims ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Follower)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇔ one SVFollowerOnePrims ⨝ c ⨝ inst)


// Generic: Transitions are only allowed between if an event is specified between two states
∀ o ∈ order ⨝ raisedEvent | (o[cur as config] ⨝ instanceInState)[state->from] ⨯ (o[nxt as config] ⨝ instanceInState)[state->to] ⨯ o[event] ⊆ allowedTransitions

// Transition function
∀ o ∈ order |  
  (
    // Events from Leader  
    ∀ inst ∈ (Instance ⨝ Leader)[instance] |  
      // Iff this is the instance that raised the event then one of the transitions must have happened 
      (some inst ∩ ((raisedEvent ⨝ o)[instance]) ⇔ 
        // Event Leader.hit
        (let curLeaderState = (instanceInState ⨝ o[cur->config] ⨝ inst)[state],
             nxtLeaderState = (instanceInState ⨝ o[nxt->config] ⨝ inst)[state],
             curLeaderFlattened = (SVLeaderOnePrims ⨝ o[cur -> config] ⨝ inst)[times->curTimes],
             nxtLeaderFlattened = (SVLeaderOnePrims ⨝ o[nxt -> config] ⨝ inst)[times->nxtTimes],
             curLeaderFollower = (o[cur -> config] ⨝ SVLeaderFollower ⨝ inst)[follower],
             nxtLeaderFollower = (o[nxt -> config] ⨝ SVLeaderFollower ⨝ inst)[follower] |
          ( 
            // Preconditions 
            // Event Follower.hit
            (let curFollowerState = (instanceInState ⨝ o[cur->config] ⨝ curLeaderFollower[follower][follower->instance])[state],
                 nxtFollowerState = (instanceInState ⨝ o[nxt->config] ⨝ curLeaderFollower[follower][follower->instance])[state],
                 curFollowerFlattened = (SVFollowerOnePrims ⨝ o[cur -> config] ⨝ curLeaderFollower[follower][follower->instance])[times->curTimes],
                 nxtFollowerFlattened = (SVFollowerOnePrims ⨝ o[nxt -> config] ⨝ curLeaderFollower[follower][follower->instance])[times->nxtTimes] |
              ( 
                 
                // Postconditions
                (some (curFollowerFlattened ⨯ nxtFollowerFlattened) where (nxtTimes = curTimes  +  1))  ∧ 
                // Generic event conditions
                nxtFollowerState = (curFollowerState[state as from] ⨝ (allowedTransitions ⨝ EventFollowerHit))[to->state]
              
              )
            )  ∧ 
            // Postconditions
            nxtLeaderFollower[follower] = curLeaderFollower[follower] ∧
            (some (curLeaderFlattened ⨯ nxtLeaderFlattened) where (nxtTimes = curTimes  +  1))  ∧ 
            // Generic event conditions
            nxtLeaderState = (curLeaderState[state as from] ⨝ (allowedTransitions ⨝ EventLeaderHit))[to->state]
             ∧ (o ⨝ raisedEvent)[event] = EventLeaderHit  ∧ 
            (changedInstance ⨝ o)[instance] = inst ∪ curLeaderFollower[follower][follower->instance]
          )
        )
         ∨ 
        // Event Leader.start
        (let curLeaderState = (instanceInState ⨝ o[cur->config] ⨝ inst)[state],
             nxtLeaderState = (instanceInState ⨝ o[nxt->config] ⨝ inst)[state],
             curLeaderFlattened = (SVLeaderOnePrims ⨝ o[cur -> config] ⨝ inst)[times->curTimes],
             nxtLeaderFlattened = (SVLeaderOnePrims ⨝ o[nxt -> config] ⨝ inst)[times->nxtTimes],
             curLeaderFollower = (o[cur -> config] ⨝ SVLeaderFollower ⨝ inst)[follower],
             nxtLeaderFollower = (o[nxt -> config] ⨝ SVLeaderFollower ⨝ inst)[follower],
             paramsLeaderStartFollower = (o ⨝ ParamsEventLeaderStartFollower)[follower] |
          ( 
            // Preconditions 
            ((paramsLeaderStartFollower[follower->instance] ⨯ o[cur->config]) ⨝ instanceInState)[state] ⊆ StateFollowerActive  ∧ 
            // Postconditions
            nxtLeaderFollower[follower] = paramsLeaderStartFollower[follower] ∧
            (some (nxtLeaderFlattened) where (nxtTimes = 0))  ∧ 
            // Generic event conditions
            nxtLeaderState = (curLeaderState[state as from] ⨝ (allowedTransitions ⨝ EventLeaderStart))[to->state]
             ∧ (o ⨝ raisedEvent)[event] = EventLeaderStart  ∧ 
            (changedInstance ⨝ o)[instance] = inst
          )
        )
      ) 
      ∧
      // Iff it is not a transitioning instance, frame the values
      (no inst ∩ (changedInstance ⨝ o)[instance] ⇔
        // Frame values if needed
        let curLeaderState = (instanceInState ⨝ o[cur->config] ⨝ inst)[state],
            nxtLeaderState = (instanceInState ⨝ o[nxt->config] ⨝ inst)[state],
            curLeaderFlattened = (SVLeaderOnePrims ⨝ o[cur -> config] ⨝ inst)[times->curTimes],
            nxtLeaderFlattened = (SVLeaderOnePrims ⨝ o[nxt -> config] ⨝ inst)[times->nxtTimes],
            curLeaderFollower = (o[cur -> config] ⨝ SVLeaderFollower ⨝ inst)[follower],
            nxtLeaderFollower = (o[nxt -> config] ⨝ SVLeaderFollower ⨝ inst)[follower] | (
          // State must stay the same
          nxtLeaderState = curLeaderState
          ∧
          (
            (no curLeaderFlattened) ∨ 
            (  
              // Postconditions
              (some (curLeaderFlattened ⨯ nxtLeaderFlattened) where (nxtTimes = curTimes)) ∧
              nxtLeaderFollower[follower] = curLeaderFollower[follower]
            )
          )  
        )
      )
  )
   ∧ 
  (
    // Events from Follower  
    ∀ inst ∈ (Instance ⨝ Follower)[instance] |  
      // Iff this is the instance that raised the event then one of the transitions must have happened 
      (some inst ∩ ((raisedEvent ⨝ o)[instance]) ⇔ 
        // Event Follower.start
        (let curFollowerState = (instanceInState ⨝ o[cur->config] ⨝ inst)[state],
             nxtFollowerState = (instanceInState ⨝ o[nxt->config] ⨝ inst)[state],
             curFollowerFlattened = (SVFollowerOnePrims ⨝ o[cur -> config] ⨝ inst)[times->curTimes],
             nxtFollowerFlattened = (SVFollowerOnePrims ⨝ o[nxt -> config] ⨝ inst)[times->nxtTimes] |
          ( 
             
            // Postconditions
            (some (nxtFollowerFlattened) where (nxtTimes = 0))  ∧ 
            // Generic event conditions
            nxtFollowerState = (curFollowerState[state as from] ⨝ (allowedTransitions ⨝ EventFollowerStart))[to->state]
             ∧ (o ⨝ raisedEvent)[event] = EventFollowerStart  ∧ 
            (changedInstance ⨝ o)[instance] = inst
          )
        )
         ∨ 
        // Event Follower.hit
        (let curFollowerState = (instanceInState ⨝ o[cur->config] ⨝ inst)[state],
             nxtFollowerState = (instanceInState ⨝ o[nxt->config] ⨝ inst)[state],
             curFollowerFlattened = (SVFollowerOnePrims ⨝ o[cur -> config] ⨝ inst)[times->curTimes],
             nxtFollowerFlattened = (SVFollowerOnePrims ⨝ o[nxt -> config] ⨝ inst)[times->nxtTimes] |
          ( 
             
            // Postconditions
            (some (curFollowerFlattened ⨯ nxtFollowerFlattened) where (nxtTimes = curTimes  +  1))  ∧ 
            // Generic event conditions
            nxtFollowerState = (curFollowerState[state as from] ⨝ (allowedTransitions ⨝ EventFollowerHit))[to->state]
             ∧ (o ⨝ raisedEvent)[event] = EventFollowerHit  ∧ 
            (changedInstance ⨝ o)[instance] = inst
          )
        )
      ) 
      ∧
      // Iff it is not a transitioning instance, frame the values
      (no inst ∩ (changedInstance ⨝ o)[instance] ⇔
        // Frame values if needed
        let curFollowerState = (instanceInState ⨝ o[cur->config] ⨝ inst)[state],
            nxtFollowerState = (instanceInState ⨝ o[nxt->config] ⨝ inst)[state],
            curFollowerFlattened = (SVFollowerOnePrims ⨝ o[cur -> config] ⨝ inst)[times->curTimes],
            nxtFollowerFlattened = (SVFollowerOnePrims ⨝ o[nxt -> config] ⨝ inst)[times->nxtTimes] | (
          // State must stay the same
          nxtFollowerState = curFollowerState
          ∧
          (
            (no curFollowerFlattened) ∨ 
            (  
              // Postconditions
              (some (curFollowerFlattened ⨯ nxtFollowerFlattened) where (nxtTimes = curTimes))
            )
          )  
        )
      )
  )

// Asserts: this is where the checks get added
∃ c ∈ Config, f ∈ SVFollowerOnePrims, l ∈ SVLeaderOnePrims | (some (c ⨝ f) where times = 3 ∧ some (c ⨝ l) where times = 3)

objectives: minimize(Config[count()])
