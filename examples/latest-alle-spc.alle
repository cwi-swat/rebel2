// Static configuration of state machines
// Define the specs that can take place in the transition system
Date (spec:id) = {<date>}

// Define all possible states for all machines
State (state:id) = {<state_uninitialized>,<state_finalized>,<state_date_created>}
initialized (state:id) = {<state_date_created>}
finalized (state:id) = {<state_finalized>}
uninitialized (state:id) = {<state_uninitialized>}
StateDateCreated (state:id) = {<state_date_created>}

// Define which transitions are allowed (in the form of `from a state` -> ` via an event` -> `to a state`
allowedTransitions (from:id, to:id, event:id) = {<state_date_created,state_date_created,event_date_before>,<state_uninitialized,state_date_created,event_date_create>,<state_date_created,state_date_created,event_date_after>,<state_date_created,state_date_created,event_date_yearsafter>}
// Define each event as single relation so that the events can be used as variables in the constraints 
EventDateBefore__month (event:id) = {<event_date_before__month>}
EventDateBefore__years (event:id) = {<event_date_before__years>}
EventDate__frame (event:id) = {<event_date___frame>}
EventDateBefore__day (event:id) = {<event_date_before__day>}
EventDateAfter__years (event:id) = {<event_date_after__years>}
EventDateYearsAfter (event:id) = {<event_date_yearsafter>}
EventDateCreate (event:id) = {<event_date_create>}
EventDateAfter__day (event:id) = {<event_date_after__day>}
EventDateAfter__month (event:id) = {<event_date_after__month>}

__IntConst_5 (const_5: int) = {<5>}

// Dynamic configuration of state machines
Config (config:id) >= {<c1>} <= {<c1>,<c2>,<c3>,<c4>}
order (cur:id, nxt:id) <= {<c1,c2>,<c2,c3>,<c3,c4>}
first (config:id) = {<c1>}
last (config:id) <= {<c1>,<c2>,<c3>,<c4>}


Instance (spec:id, instance:id) = {<date,d3>,<date,d2>,<date,d1>,<date,NOW>}
instanceInState (config:id, instance:id, state:id) >= {<c1,d3,state_uninitialized>,<c1,d2,state_uninitialized>,<c1,d1,state_uninitialized>}<= {<c1,d1,state_date_created>,<c1,d1,state_uninitialized>,<c1,d1,state_finalized>,<c1,d2,state_date_created>,<c1,d2,state_uninitialized>,<c1,d2,state_finalized>,<c1,d3,state_date_created>,<c1,d3,state_uninitialized>,<c1,d3,state_finalized>,<c1,NOW,state_date_created>,<c1,NOW,state_uninitialized>,<c1,NOW,state_finalized>,<c2,d1,state_date_created>,<c2,d1,state_uninitialized>,<c2,d1,state_finalized>,<c2,d2,state_date_created>,<c2,d2,state_uninitialized>,<c2,d2,state_finalized>,<c2,d3,state_date_created>,<c2,d3,state_uninitialized>,<c2,d3,state_finalized>,<c2,NOW,state_date_created>,<c2,NOW,state_uninitialized>,<c2,NOW,state_finalized>,<c3,d1,state_date_created>,<c3,d1,state_uninitialized>,<c3,d1,state_finalized>,<c3,d2,state_date_created>,<c3,d2,state_uninitialized>,<c3,d2,state_finalized>,<c3,d3,state_date_created>,<c3,d3,state_uninitialized>,<c3,d3,state_finalized>,<c3,NOW,state_date_created>,<c3,NOW,state_uninitialized>,<c3,NOW,state_finalized>,<c4,d1,state_date_created>,<c4,d1,state_uninitialized>,<c4,d1,state_finalized>,<c4,d2,state_date_created>,<c4,d2,state_uninitialized>,<c4,d2,state_finalized>,<c4,d3,state_date_created>,<c4,d3,state_uninitialized>,<c4,d3,state_finalized>,<c4,NOW,state_date_created>,<c4,NOW,state_uninitialized>,<c4,NOW,state_finalized>}
raisedEvent (cur:id, nxt:id, event:id, instance:id) <= {<c1,c2,event_date_create,d1>,<c2,c3,event_date_create,d1>,<c3,c4,event_date_create,d1>,<c1,c2,event_date_create,d2>,<c2,c3,event_date_create,d2>,<c3,c4,event_date_create,d2>,<c1,c2,event_date_create,d3>,<c2,c3,event_date_create,d3>,<c3,c4,event_date_create,d3>,<c1,c2,event_date_create,NOW>,<c2,c3,event_date_create,NOW>,<c3,c4,event_date_create,NOW>}
changedInstance (cur:id, nxt:id, instance:id) <= {<c1,c2,d1>,<c1,c2,d2>,<c1,c2,d3>,<c1,c2,NOW>,<c2,c3,d1>,<c2,c3,d2>,<c2,c3,d3>,<c2,c3,NOW>,<c3,c4,d1>,<c3,c4,d2>,<c3,c4,d3>,<c3,c4,NOW>}

DateYear (config:id, instance:id, year:int) <= {<c1,d1,?>,<c2,d1,?>,<c3,d1,?>,<c4,d1,?>,<c1,d2,?>,<c2,d2,?>,<c3,d2,?>,<c4,d2,?>,<c1,d3,?>,<c2,d3,?>,<c3,d3,?>,<c4,d3,?>,<c1,NOW,?>,<c2,NOW,?>,<c3,NOW,?>,<c4,NOW,?>}
DateMonth (config:id, instance:id, month:int) <= {<c1,d1,?>,<c2,d1,?>,<c3,d1,?>,<c4,d1,?>,<c1,d2,?>,<c2,d2,?>,<c3,d2,?>,<c4,d2,?>,<c1,d3,?>,<c2,d3,?>,<c3,d3,?>,<c4,d3,?>,<c1,NOW,?>,<c2,NOW,?>,<c3,NOW,?>,<c4,NOW,?>}
DateDay (config:id, instance:id, day:int) <= {<c1,d1,?>,<c2,d1,?>,<c3,d1,?>,<c4,d1,?>,<c1,d2,?>,<c2,d2,?>,<c3,d2,?>,<c4,d2,?>,<c1,d3,?>,<c2,d3,?>,<c3,d3,?>,<c4,d3,?>,<c1,NOW,?>,<c2,NOW,?>,<c3,NOW,?>,<c4,NOW,?>}

Date_NOW (instance:id) = {<NOW>}

ParamEventDateYearsAfterNrOfYears (cur:id, nxt:id, nrOfYears:int) <= {<c1,c2,?>,<c2,c3,?>,<c3,c4,?>}
ParamEventDateYearsAfterOther (cur:id, nxt:id, other:id) <= {<c1,c2,d1>,<c1,c2,d2>,<c1,c2,d3>,<c1,c2,NOW>,<c2,c3,d1>,<c2,c3,d2>,<c2,c3,d3>,<c2,c3,NOW>,<c3,c4,d1>,<c3,c4,d2>,<c3,c4,d3>,<c3,c4,NOW>}
ParamEventDateAfter__yearsOther (cur:id, nxt:id, other:id) <= {<c1,c2,d1>,<c1,c2,d2>,<c1,c2,d3>,<c1,c2,NOW>,<c2,c3,d1>,<c2,c3,d2>,<c2,c3,d3>,<c2,c3,NOW>,<c3,c4,d1>,<c3,c4,d2>,<c3,c4,d3>,<c3,c4,NOW>}
ParamEventDateBefore__yearsOther (cur:id, nxt:id, other:id) <= {<c1,c2,d1>,<c1,c2,d2>,<c1,c2,d3>,<c1,c2,NOW>,<c2,c3,d1>,<c2,c3,d2>,<c2,c3,d3>,<c2,c3,NOW>,<c3,c4,d1>,<c3,c4,d2>,<c3,c4,d3>,<c3,c4,NOW>}
ParamEventDateCreateYear (cur:id, nxt:id, year:int) <= {<c1,c2,?>,<c2,c3,?>,<c3,c4,?>}
ParamEventDateCreateMonth (cur:id, nxt:id, month:int) <= {<c1,c2,?>,<c2,c3,?>,<c3,c4,?>}
ParamEventDateCreateDay (cur:id, nxt:id, day:int) <= {<c1,c2,?>,<c2,c3,?>,<c3,c4,?>}
ParamEventDateBefore__dayOther (cur:id, nxt:id, other:id) <= {<c1,c2,d1>,<c1,c2,d2>,<c1,c2,d3>,<c1,c2,NOW>,<c2,c3,d1>,<c2,c3,d2>,<c2,c3,d3>,<c2,c3,NOW>,<c3,c4,d1>,<c3,c4,d2>,<c3,c4,d3>,<c3,c4,NOW>}
ParamEventDateBefore__monthOther (cur:id, nxt:id, other:id) <= {<c1,c2,d1>,<c1,c2,d2>,<c1,c2,d3>,<c1,c2,NOW>,<c2,c3,d1>,<c2,c3,d2>,<c2,c3,d3>,<c2,c3,NOW>,<c3,c4,d1>,<c3,c4,d2>,<c3,c4,d3>,<c3,c4,NOW>}
ParamEventDateAfter__monthOther (cur:id, nxt:id, other:id) <= {<c1,c2,d1>,<c1,c2,d2>,<c1,c2,d3>,<c1,c2,NOW>,<c2,c3,d1>,<c2,c3,d2>,<c2,c3,d3>,<c2,c3,NOW>,<c3,c4,d1>,<c3,c4,d2>,<c3,c4,d3>,<c3,c4,NOW>}
ParamEventDateAfter__dayOther (cur:id, nxt:id, other:id) <= {<c1,c2,d1>,<c1,c2,d2>,<c1,c2,d3>,<c1,c2,NOW>,<c2,c3,d1>,<c2,c3,d2>,<c2,c3,d3>,<c2,c3,NOW>,<c3,c4,d1>,<c3,c4,d2>,<c3,c4,d3>,<c3,c4,NOW>}

// Constraints for the configuration and ordering relations
order ⊆ Config[config as cur] ⨯ Config[config as nxt]
last = Config ∖ order[cur->config]  // There is only one last configuration
 

// Generic 'Type' constraints    
raisedEvent ⊆ (order) ⨯ allowedTransitions[event] ⨯ Instance[instance]
instanceInState ⊆ Instance[instance] ⨯ Config ⨯ State
changedInstance ⊆ (order) ⨯ Instance[instance]
    
// Machine specific `type` constraints
DateYear[config,instance]  ⊆ Config ⨯ (Instance ⨝ Date)[instance]
DateMonth[config,instance]  ⊆ Config ⨯ (Instance ⨝ Date)[instance]
DateDay[config,instance]  ⊆ Config ⨯ (Instance ⨝ Date)[instance]

ParamEventDateCreateYear[cur,nxt] ⊆ order
ParamEventDateCreateMonth[cur,nxt] ⊆ order
ParamEventDateCreateDay[cur,nxt] ⊆ order
ParamEventDateYearsAfterNrOfYears[cur,nxt] ⊆ order
ParamEventDateYearsAfterOther ⊆ (order) ⨯ (Instance ⨝ Date)[instance->other]
ParamEventDateAfter__yearsOther ⊆ (order) ⨯ (Instance ⨝ Date)[instance->other]
ParamEventDateAfter__monthOther ⊆ (order) ⨯ (Instance ⨝ Date)[instance->other]
ParamEventDateAfter__dayOther ⊆ (order) ⨯ (Instance ⨝ Date)[instance->other]
ParamEventDateBefore__yearsOther ⊆ (order) ⨯ (Instance ⨝ Date)[instance->other]
ParamEventDateBefore__monthOther ⊆ (order) ⨯ (Instance ⨝ Date)[instance->other]
ParamEventDateBefore__dayOther ⊆ (order) ⨯ (Instance ⨝ Date)[instance->other]

// Specific per event
∀ step ∈ (order) ⨝ raisedEvent | (
  (some (step ⨝ EventDateCreate) ⇔ one (step ⨝ ParamEventDateCreateYear)) ∧
  (some (step ⨝ EventDateCreate) ⇔ one (step ⨝ ParamEventDateCreateMonth)) ∧
  (some (step ⨝ EventDateCreate) ⇔ one (step ⨝ ParamEventDateCreateDay)) ∧
  (some (step ⨝ EventDateYearsAfter) ⇔ one (step ⨝ ParamEventDateYearsAfterNrOfYears)) ∧
  (some (step ⨝ EventDateYearsAfter) ⇔ one (step ⨝ ParamEventDateYearsAfterOther)) ∧
  (some (step ⨝ EventDateAfter__years) ⇔ one (step ⨝ ParamEventDateAfter__yearsOther)) ∧
  (some (step ⨝ EventDateAfter__month) ⇔ one (step ⨝ ParamEventDateAfter__monthOther)) ∧
  (some (step ⨝ EventDateAfter__day) ⇔ one (step ⨝ ParamEventDateAfter__dayOther)) ∧
  (some (step ⨝ EventDateBefore__years) ⇔ one (step ⨝ ParamEventDateBefore__yearsOther)) ∧
  (some (step ⨝ EventDateBefore__month) ⇔ one (step ⨝ ParamEventDateBefore__monthOther)) ∧
  (some (step ⨝ EventDateBefore__day) ⇔ one (step ⨝ ParamEventDateBefore__dayOther))
)

// Generic: All configurations are reachable
∀ c ∈ Config ∖ first | c ⊆ (first[config as cur] ⨝ ^<cur,nxt>order)[nxt -> config]

// Generic: Every transition can only happen by exactly one event
∀ o ∈ order | one o ⨝ raisedEvent

// Specif: In every configuration all machines have a state IFF its a machine which is not empty
∀ c ∈ Config, inst ∈ Instance | one instanceInState ⨝ c ⨝ inst

// Specific per machine: In every configuration iff a machine is in an initialized state then it must have values
∀ c ∈ Config, inst ∈ (Instance ⨝ Date)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇔ one DateYear ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Date)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇔ one DateMonth ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Date)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇔ one DateDay ⨝ c ⨝ inst)


// Generic: Transitions are only allowed between if an event is specified between two states
∀ o ∈ (order) ⨝ raisedEvent | (o[cur as config] ⨝ instanceInState)[state->from] ⨯ (o[nxt as config] ⨝ instanceInState)[state->to] ⨯ o[event] ⊆ allowedTransitions

// Change set predicates
pred inChangeSet[step: (cur:id, nxt:id), instances: (instance:id)]
  = instances ⊆ (changedInstance ⨝ step)[instance]
 
pred notInChangeSet[step: (cur:id, nxt:id), instances: (instance:id)]
  = no instances ∩ (changedInstance ⨝ step)[instance]

pred changeSetCanContain[step: (cur:id, nxt:id), instances: (instance:id)]
  = (changedInstance ⨝ step)[instance] ⊆ instances ∪ Date_NOW

// Generic predicates
pred forceState[curState: (state:id), nxtState: (state:id), raisedEvent: (event:id)]
  = nxtState = (curState[state as from] ⨝ (allowedTransitions ⨝ raisedEvent))[to->state]

pred inState[config: (config:id), instance: (instance:id), state: (state:id)]
  = ((instance ⨯ config) ⨝ instanceInState)[state] ⊆ state

pred eventDateYearsAfter[step:(cur:id, nxt:id), date: (instance:id), nrOfYears: (nrOfYears:int), other: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ date)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ date)[state] |
    ( 
      // Preconditions 
      (some ((date ⨝ (DateYear ⨝ cur))[year][year as cur_year] ⨯ (other ⨝ (DateYear ⨝ cur))[year][year as param_1_year]) where (cur_year = param_1_year + 5)) ∧
      (some ((other ⨝ (DateMonth ⨝ cur))[month][month as param_2_month] ⨯ (date ⨝ (DateMonth ⨝ cur))[month][month as cur_month]) where (cur_month = param_2_month)) ∧
      (some ((other ⨝ (DateDay ⨝ cur))[day][day as param_3_day] ⨯ (date ⨝ (DateDay ⨝ cur))[day][day as cur_day]) where (cur_day = param_3_day))  ∧ 
      // Postconditions
      (some ((date ⨝ (DateYear ⨝ cur))[year][year as cur_year] ⨯ (date ⨝ (DateYear ⨝ nxt))[year][year as nxt_year]) where (nxt_year = cur_year)) ∧
      (some ((date ⨝ (DateDay ⨝ nxt))[day][day as nxt_day] ⨯ (date ⨝ (DateDay ⨝ cur))[day][day as cur_day]) where (nxt_day = cur_day)) ∧
      (some ((date ⨝ (DateMonth ⨝ cur))[month][month as cur_month] ⨯ (date ⨝ (DateMonth ⨝ nxt))[month][month as nxt_month]) where (nxt_month = cur_month))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventDateYearsAfter] ∧
      // Make sure this instance is in the change set
      inChangeSet[step, date]
    )

pred eventDateAfter__years[step:(cur:id, nxt:id), date: (instance:id), other: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ date)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ date)[state] |
    ( 
      // Preconditions 
      (some ((date ⨝ (DateYear ⨝ cur))[year][year as cur_year] ⨯ (other ⨝ (DateYear ⨝ cur))[year][year as param_1_year]) where (cur_year > param_1_year)) ∧
      inState[cur, other, initialized]  ∧ 
      // Postconditions
      (some ((date ⨝ (DateYear ⨝ cur))[year][year as cur_year] ⨯ (date ⨝ (DateYear ⨝ nxt))[year][year as nxt_year]) where (nxt_year = cur_year)) ∧
      (some ((date ⨝ (DateDay ⨝ nxt))[day][day as nxt_day] ⨯ (date ⨝ (DateDay ⨝ cur))[day][day as cur_day]) where (nxt_day = cur_day)) ∧
      (some ((date ⨝ (DateMonth ⨝ cur))[month][month as cur_month] ⨯ (date ⨝ (DateMonth ⨝ nxt))[month][month as nxt_month]) where (nxt_month = cur_month))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventDateAfter__years] ∧
      // Make sure this instance is in the change set
      inChangeSet[step, date]
    )

pred eventDateBefore__years[step:(cur:id, nxt:id), date: (instance:id), other: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ date)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ date)[state] |
    ( 
      // Preconditions 
      (some ((date ⨝ (DateYear ⨝ cur))[year][year as cur_year] ⨯ (other ⨝ (DateYear ⨝ cur))[year][year as param_1_year]) where (cur_year < param_1_year)) ∧
      inState[cur, other, initialized]  ∧ 
      // Postconditions
      (some ((date ⨝ (DateYear ⨝ cur))[year][year as cur_year] ⨯ (date ⨝ (DateYear ⨝ nxt))[year][year as nxt_year]) where (nxt_year = cur_year)) ∧
      (some ((date ⨝ (DateDay ⨝ nxt))[day][day as nxt_day] ⨯ (date ⨝ (DateDay ⨝ cur))[day][day as cur_day]) where (nxt_day = cur_day)) ∧
      (some ((date ⨝ (DateMonth ⨝ cur))[month][month as cur_month] ⨯ (date ⨝ (DateMonth ⨝ nxt))[month][month as nxt_month]) where (nxt_month = cur_month))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventDateBefore__years] ∧
      // Make sure this instance is in the change set
      inChangeSet[step, date]
    )

pred frameDate[step: (cur:id, nxt:id), date: (instance:id)] 
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ date)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ date)[state] | (
    nxtState = curState ∧
    (
      curState ⊆ uninitialized ∨ 
      (// Postconditions
       (some ((date ⨝ (DateYear ⨝ cur))[year][year as cur_year] ⨯ (date ⨝ (DateYear ⨝ nxt))[year][year as nxt_year]) where (nxt_year = cur_year)) ∧
       (some ((date ⨝ (DateMonth ⨝ cur))[month][month as cur_month] ⨯ (date ⨝ (DateMonth ⨝ nxt))[month][month as nxt_month]) where (nxt_month = cur_month)) ∧
       (some ((date ⨝ (DateDay ⨝ nxt))[day][day as nxt_day] ⨯ (date ⨝ (DateDay ⨝ cur))[day][day as cur_day]) where (nxt_day = cur_day)))
    )
  )

pred eventDateCreate[step:(cur:id, nxt:id), date: (instance:id), year: (year:int), month: (month:int), day: (day:int)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ date)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ date)[state] |
    ( 
       
      // Postconditions
      (some ((date ⨝ (DateYear ⨝ nxt))[year][year as nxt_year] ⨯ year[year as param_1_year]) where (nxt_year = param_1_year)) ∧
      (some (month[month as param_2_month] ⨯ (date ⨝ (DateMonth ⨝ nxt))[month][month as nxt_month]) where (nxt_month = param_2_month)) ∧
      (some ((date ⨝ (DateDay ⨝ nxt))[day][day as nxt_day] ⨯ day[day as param_3_day]) where (nxt_day = param_3_day))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventDateCreate] ∧
      // Make sure this instance is in the change set
      inChangeSet[step, date]
    )

pred eventDateBefore__day[step:(cur:id, nxt:id), date: (instance:id), other: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ date)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ date)[state] |
    ( 
      // Preconditions 
      (some ((other ⨝ (DateDay ⨝ cur))[day][day as param_1_day] ⨯ (date ⨝ (DateDay ⨝ cur))[day][day as cur_day]) where (cur_day < param_1_day)) ∧
      (some ((other ⨝ (DateMonth ⨝ cur))[month][month as param_2_month] ⨯ (date ⨝ (DateMonth ⨝ cur))[month][month as cur_month]) where (cur_month = param_2_month)) ∧
      (some ((date ⨝ (DateYear ⨝ cur))[year][year as cur_year] ⨯ (other ⨝ (DateYear ⨝ cur))[year][year as param_3_year]) where (cur_year = param_3_year)) ∧
      inState[cur, other, initialized]  ∧ 
      // Postconditions
      (some ((date ⨝ (DateYear ⨝ cur))[year][year as cur_year] ⨯ (date ⨝ (DateYear ⨝ nxt))[year][year as nxt_year]) where (nxt_year = cur_year)) ∧
      (some ((date ⨝ (DateDay ⨝ nxt))[day][day as nxt_day] ⨯ (date ⨝ (DateDay ⨝ cur))[day][day as cur_day]) where (nxt_day = cur_day)) ∧
      (some ((date ⨝ (DateMonth ⨝ cur))[month][month as cur_month] ⨯ (date ⨝ (DateMonth ⨝ nxt))[month][month as nxt_month]) where (nxt_month = cur_month))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventDateBefore__day] ∧
      // Make sure this instance is in the change set
      inChangeSet[step, date]
    )

pred eventDateBefore__month[step:(cur:id, nxt:id), date: (instance:id), other: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ date)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ date)[state] |
    ( 
      // Preconditions 
      (some ((other ⨝ (DateMonth ⨝ cur))[month][month as param_1_month] ⨯ (date ⨝ (DateMonth ⨝ cur))[month][month as cur_month]) where (cur_month < param_1_month)) ∧
      (some ((date ⨝ (DateYear ⨝ cur))[year][year as cur_year] ⨯ (other ⨝ (DateYear ⨝ cur))[year][year as param_2_year]) where (cur_year = param_2_year)) ∧
      inState[cur, other, initialized]  ∧ 
      // Postconditions
      (some ((date ⨝ (DateYear ⨝ cur))[year][year as cur_year] ⨯ (date ⨝ (DateYear ⨝ nxt))[year][year as nxt_year]) where (nxt_year = cur_year)) ∧
      (some ((date ⨝ (DateDay ⨝ nxt))[day][day as nxt_day] ⨯ (date ⨝ (DateDay ⨝ cur))[day][day as cur_day]) where (nxt_day = cur_day)) ∧
      (some ((date ⨝ (DateMonth ⨝ cur))[month][month as cur_month] ⨯ (date ⨝ (DateMonth ⨝ nxt))[month][month as nxt_month]) where (nxt_month = cur_month))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventDateBefore__month] ∧
      // Make sure this instance is in the change set
      inChangeSet[step, date]
    )

pred eventDateAfter__month[step:(cur:id, nxt:id), date: (instance:id), other: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ date)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ date)[state] |
    ( 
      // Preconditions 
      (some ((other ⨝ (DateMonth ⨝ cur))[month][month as param_1_month] ⨯ (date ⨝ (DateMonth ⨝ cur))[month][month as cur_month]) where (cur_month > param_1_month)) ∧
      (some ((date ⨝ (DateYear ⨝ cur))[year][year as cur_year] ⨯ (other ⨝ (DateYear ⨝ cur))[year][year as param_2_year]) where (cur_year = param_2_year)) ∧
      inState[cur, other, initialized]  ∧ 
      // Postconditions
      (some ((date ⨝ (DateYear ⨝ cur))[year][year as cur_year] ⨯ (date ⨝ (DateYear ⨝ nxt))[year][year as nxt_year]) where (nxt_year = cur_year)) ∧
      (some ((date ⨝ (DateDay ⨝ nxt))[day][day as nxt_day] ⨯ (date ⨝ (DateDay ⨝ cur))[day][day as cur_day]) where (nxt_day = cur_day)) ∧
      (some ((date ⨝ (DateMonth ⨝ cur))[month][month as cur_month] ⨯ (date ⨝ (DateMonth ⨝ nxt))[month][month as nxt_month]) where (nxt_month = cur_month))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventDateAfter__month] ∧
      // Make sure this instance is in the change set
      inChangeSet[step, date]
    )

pred eventDateAfter__day[step:(cur:id, nxt:id), date: (instance:id), other: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ date)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ date)[state] |
    ( 
      // Preconditions 
      (some ((other ⨝ (DateDay ⨝ cur))[day][day as param_1_day] ⨯ (date ⨝ (DateDay ⨝ cur))[day][day as cur_day]) where (cur_day > param_1_day)) ∧
      (some ((other ⨝ (DateMonth ⨝ cur))[month][month as param_2_month] ⨯ (date ⨝ (DateMonth ⨝ cur))[month][month as cur_month]) where (cur_month = param_2_month)) ∧
      (some ((date ⨝ (DateYear ⨝ cur))[year][year as cur_year] ⨯ (other ⨝ (DateYear ⨝ cur))[year][year as param_3_year]) where (cur_year = param_3_year)) ∧
      inState[cur, other, initialized]  ∧ 
      // Postconditions
      (some ((date ⨝ (DateYear ⨝ cur))[year][year as cur_year] ⨯ (date ⨝ (DateYear ⨝ nxt))[year][year as nxt_year]) where (nxt_year = cur_year)) ∧
      (some ((date ⨝ (DateDay ⨝ nxt))[day][day as nxt_day] ⨯ (date ⨝ (DateDay ⨝ cur))[day][day as cur_day]) where (nxt_day = cur_day)) ∧
      (some ((date ⨝ (DateMonth ⨝ cur))[month][month as cur_month] ⨯ (date ⨝ (DateMonth ⨝ nxt))[month][month as nxt_month]) where (nxt_month = cur_month))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventDateAfter__day] ∧
      // Make sure this instance is in the change set
      inChangeSet[step, date]
    )


pred possibleTransitionsDate[step: (cur:id, nxt:id)] 
  = ∀ inst ∈ (Instance ⨝ Date)[instance] |
    (some inst ∩ ((raisedEvent ⨝ step)[instance]) ⇔ (
      (eventDateCreate[step,inst,(step ⨝ ParamEventDateCreateYear)[year],(step ⨝ ParamEventDateCreateMonth)[month],(step ⨝ ParamEventDateCreateDay)[day]] ∧
      (step ⨝ raisedEvent)[event] = EventDateCreate ∧
      changeSetCanContain[step, inst])
    ))
    ∧
    (notInChangeSet[step, inst] ⇒ frameDate[step, inst])


// Transition function
∀ step ∈ order| possibleTransitionsDate[step]


// Fact: CorrectDate
∀ cur_1 ∈ Config | let step_1 = (cur_1[config as cur] ⨝ (order)) | (∀ d ∈ (Instance ⨝ Date)[instance] | ((inState[cur_1, d, initialized] ⇒ (((some ((d ⨝ (DateYear ⨝ cur_1))[year][year as d]) where (d >= 1900)) ∧ ((some ((d ⨝ (DateYear ⨝ cur_1))[year][year as d]) where (d <= 2200)) ∧ ((some ((d ⨝ (DateMonth ⨝ cur_1))[month][month as d]) where (d > 0)) ∧ ((some ((d ⨝ (DateMonth ⨝ cur_1))[month][month as d]) where (d < 13)) ∧ ((some ((d ⨝ (DateDay ⨝ cur_1))[day][day as d]) where (d > 0)) ∧ ((((some ((d ⨝ (DateMonth ⨝ cur_1))[month][month as d]) where (d = 1)) ⇒ (some ((d ⨝ (DateDay ⨝ cur_1))[day][day as d]) where (d < 32)))) ∧ ((¬ (((some ((d ⨝ (DateMonth ⨝ cur_1))[month][month as d]) where (d = 1)))) ⇒ ((((some ((d ⨝ (DateMonth ⨝ cur_1))[month][month as d]) where (d = 2)) ⇒ (some ((d ⨝ (DateDay ⨝ cur_1))[day][day as d]) where (d < 30)))) ∧ ((¬ (((some ((d ⨝ (DateMonth ⨝ cur_1))[month][month as d]) where (d = 2)))) ⇒ ((((some ((d ⨝ (DateMonth ⨝ cur_1))[month][month as d]) where (d = 3)) ⇒ (some ((d ⨝ (DateDay ⨝ cur_1))[day][day as d]) where (d < 32)))) ∧ ((¬ (((some ((d ⨝ (DateMonth ⨝ cur_1))[month][month as d]) where (d = 3)))) ⇒ ((((some ((d ⨝ (DateMonth ⨝ cur_1))[month][month as d]) where (d = 4)) ⇒ (some ((d ⨝ (DateDay ⨝ cur_1))[day][day as d]) where (d < 31)))) ∧ ((¬ (((some ((d ⨝ (DateMonth ⨝ cur_1))[month][month as d]) where (d = 4)))) ⇒ ((((some ((d ⨝ (DateMonth ⨝ cur_1))[month][month as d]) where (d = 5)) ⇒ (some ((d ⨝ (DateDay ⨝ cur_1))[day][day as d]) where (d < 32)))) ∧ ((¬ (((some ((d ⨝ (DateMonth ⨝ cur_1))[month][month as d]) where (d = 5)))) ⇒ ((((some ((d ⨝ (DateMonth ⨝ cur_1))[month][month as d]) where (d = 6)) ⇒ (some ((d ⨝ (DateDay ⨝ cur_1))[day][day as d]) where (d < 31)))) ∧ ((¬ (((some ((d ⨝ (DateMonth ⨝ cur_1))[month][month as d]) where (d = 6)))) ⇒ ((((some ((d ⨝ (DateMonth ⨝ cur_1))[month][month as d]) where (d = 7)) ⇒ (some ((d ⨝ (DateDay ⨝ cur_1))[day][day as d]) where (d < 32)))) ∧ ((¬ (((some ((d ⨝ (DateMonth ⨝ cur_1))[month][month as d]) where (d = 7)))) ⇒ ((((some ((d ⨝ (DateMonth ⨝ cur_1))[month][month as d]) where (d = 8)) ⇒ (some ((d ⨝ (DateDay ⨝ cur_1))[day][day as d]) where (d < 32)))) ∧ ((¬ (((some ((d ⨝ (DateMonth ⨝ cur_1))[month][month as d]) where (d = 8)))) ⇒ ((((some ((d ⨝ (DateMonth ⨝ cur_1))[month][month as d]) where (d = 9)) ⇒ (some ((d ⨝ (DateDay ⨝ cur_1))[day][day as d]) where (d < 31)))) ∧ ((¬ (((some ((d ⨝ (DateMonth ⨝ cur_1))[month][month as d]) where (d = 9)))) ⇒ ((((some ((d ⨝ (DateMonth ⨝ cur_1))[month][month as d]) where (d = 10)) ⇒ (some ((d ⨝ (DateDay ⨝ cur_1))[day][day as d]) where (d < 32)))) ∧ ((¬ (((some ((d ⨝ (DateMonth ⨝ cur_1))[month][month as d]) where (d = 10)))) ⇒ ((((some ((d ⨝ (DateMonth ⨝ cur_1))[month][month as d]) where (d = 11)) ⇒ (some ((d ⨝ (DateDay ⨝ cur_1))[day][day as d]) where (d < 31)))) ∧ ((¬ (((some ((d ⨝ (DateMonth ⨝ cur_1))[month][month as d]) where (d = 11)))) ⇒ (some ((d ⨝ (DateDay ⨝ cur_1))[day][day as d]) where (d < 32))))))))))))))))))))))))))))))))))))))))))))
// Fact: TimeAlwaysMovesForward
∀ cur_1 ∈ Config | let step_1 = (cur_1[config as cur] ⨝ (order)) | (∃ d1 ∈ Date_NOW | let step_2 = ((order) ⨝ cur_1[config as cur]), cur_2 = step_2[nxt->config] | (∃ d2 ∈ Date_NOW | (((some ((d1 ⨝ (DateYear ⨝ cur_1))[year][year as d1] ⨯ (d2 ⨝ (DateYear ⨝ cur_2))[year][year as d2]) where (d2 > d1)) ∨ ((((some ((d1 ⨝ (DateYear ⨝ cur_1))[year][year as d1] ⨯ (d2 ⨝ (DateYear ⨝ cur_2))[year][year as d2]) where (d2 = d1)) ∧ (some ((d2 ⨝ (DateMonth ⨝ cur_2))[month][month as d2] ⨯ (d1 ⨝ (DateMonth ⨝ cur_1))[month][month as d1]) where (d2 > d1)))) ∨ (((some ((d1 ⨝ (DateYear ⨝ cur_1))[year][year as d1] ⨯ (d2 ⨝ (DateYear ⨝ cur_2))[year][year as d2]) where (d2 = d1)) ∧ ((some ((d2 ⨝ (DateMonth ⨝ cur_2))[month][month as d2] ⨯ (d1 ⨝ (DateMonth ⨝ cur_1))[month][month as d1]) where (d2 = d1)) ∧ (some ((d2 ⨝ (DateDay ⨝ cur_2))[day][day as d2] ⨯ (d1 ⨝ (DateDay ⨝ cur_1))[day][day as d1]) where (d2 > d1))))))))))
// Fact: NowAlwaysExists
∀ cur_1 ∈ Config | let step_1 = (cur_1[config as cur] ⨝ (order)) | (inState[cur_1, Date_NOW, initialized])
// Assert: SomeInitializedDate
∃ cur_1 ∈ Config | let step_1 = (cur_1[config as cur] ⨝ (order)) | (∃ d ∈ (Instance ⨝ Date)[instance] | (d != Date_NOW ∧ inState[cur_1, d, initialized]))



// Minimize the number of steps by minimizing the number of Configurations
objectives: minimize Config[count()]