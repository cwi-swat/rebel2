// Static configuration of state machines
// Define the specs that can take place in the transition system
CoffeeType (spec:id) = {<coffeetype>}
CoffeeMachine (spec:id) = {<coffeemachine>}

// Define all possible states for all machines
State (state:id) = {<state_uninitialized>,<state_finalized>,<state_coffeemachine_waiting>,<state_coffeemachine_serve>,<state_coffeemachine_acceptingpayment>}
initialized (state:id) = {<state_coffeemachine_waiting>,<state_coffeemachine_serve>,<state_coffeemachine_acceptingpayment>}
finalized (state:id) = {<state_finalized>}
uninitialized (state:id) = {<state_uninitialized>}

StateCoffeeMachineServe (state:id) = {<state_coffeemachine_serve>}
StateCoffeeMachineWaiting (state:id) = {<state_coffeemachine_waiting>}
StateCoffeeMachineAcceptingPayment (state:id) = {<state_coffeemachine_acceptingpayment>}


// Define which transitions are allowed (in the form of `from a state` -> ` via an event` -> `to a state`
allowedTransitions (from:id, to:id, event:id) = {<state_coffeemachine_waiting,state_coffeemachine_acceptingpayment,event_coffeemachine_select__espresso>,<state_coffeemachine_acceptingpayment,state_coffeemachine_serve,event_coffeemachine_pay__amountmet>,<state_coffeemachine_waiting,state_coffeemachine_acceptingpayment,event_coffeemachine_select__latte>,<state_coffeemachine_waiting,state_coffeemachine_acceptingpayment,event_coffeemachine_select__americano>,<state_coffeemachine_waiting,state_finalized,event_coffeemachine_poweroff>,<state_coffeemachine_serve,state_finalized,event_coffeemachine_poweroff>,<state_coffeemachine_serve,state_coffeemachine_waiting,event_coffeemachine_empty>,<state_coffeemachine_acceptingpayment,state_coffeemachine_acceptingpayment,event_coffeemachine_pay__amountnotmet>,<state_coffeemachine_acceptingpayment,state_coffeemachine_waiting,event_coffeemachine_cancel>,<state_uninitialized,state_coffeemachine_waiting,event_coffeemachine_poweron>,<state_coffeemachine_waiting,state_coffeemachine_acceptingpayment,event_coffeemachine_select__normal>,<state_coffeemachine_acceptingpayment,state_finalized,event_coffeemachine_poweroff>}
// Define each event as single relation so that the events can be used as variables in the constraints 
EventCoffeeMachineSelect__normal (event:id) = {<event_coffeemachine_select__normal>}
EventCoffeeMachineSelect__espresso (event:id) = {<event_coffeemachine_select__espresso>}
EventCoffeeMachinePay__amountMet (event:id) = {<event_coffeemachine_pay__amountmet>}
EventCoffeeMachine__frame (event:id) = {<event_coffeemachine___frame>}
EventCoffeeMachinePay__amountNotMet (event:id) = {<event_coffeemachine_pay__amountnotmet>}
EventCoffeeMachineSelect__latte (event:id) = {<event_coffeemachine_select__latte>}
EventCoffeeMachineSelect__americano (event:id) = {<event_coffeemachine_select__americano>}
EventCoffeeMachineEmpty (event:id) = {<event_coffeemachine_empty>}
EventCoffeeMachinePowerOn (event:id) = {<event_coffeemachine_poweron>}
EventCoffeeMachinePowerOff (event:id) = {<event_coffeemachine_poweroff>}
EventCoffeeMachineCancel (event:id) = {<event_coffeemachine_cancel>}

__IntConst_150 (const_150: int) = {<150>}
__IntConst_130 (const_130: int) = {<130>}
__IntConst_120 (const_120: int) = {<120>}
__IntConst_0 (const_0: int) = {<0>}
__IntConst_10 (const_10: int) = {<10>}
__IntConst_20 (const_20: int) = {<20>}
__IntConst_5 (const_5: int) = {<5>}
__IntConst_95 (const_95: int) = {<95>}
__IntConst_50 (const_50: int) = {<50>}


// Dynamic configuration of state machines
Config (config:id) >= {<c1>} <= {<c1>,<c2>,<c3>,<c4>,<c5>,<c6>,<c7>,<c8>,<c9>,<c10>,<c11>}
order (cur:id, nxt:id) <= {<c1,c2>,<c2,c3>,<c3,c4>,<c4,c5>,<c5,c6>,<c6,c7>,<c7,c8>,<c8,c9>,<c9,c10>,<c10,c11>}
first (config:id) = {<c1>}
last (config:id) <= {<c1>,<c2>,<c3>,<c4>,<c5>,<c6>,<c7>,<c8>,<c9>,<c10>,<c11>}
back (config:id) = {}
loop (cur:id, nxt:id) = {}

Instance (spec:id, instance:id) = {<coffeetype,AMERICANO>,<coffeemachine,cm>,<coffeetype,NORMAL>,<coffeetype,NONE>,<coffeetype,ESPRESSO>,<coffeetype,LATTE>}
instanceInState (config:id, instance:id, state:id) >={<c1,cm,state_uninitialized>}<= {<c1,cm,state_uninitialized>,<c1,cm,state_finalized>,<c1,cm,state_coffeemachine_waiting>,<c1,cm,state_coffeemachine_serve>,<c1,cm,state_coffeemachine_acceptingpayment>,<c2,cm,state_uninitialized>,<c2,cm,state_finalized>,<c2,cm,state_coffeemachine_waiting>,<c2,cm,state_coffeemachine_serve>,<c2,cm,state_coffeemachine_acceptingpayment>,<c3,cm,state_uninitialized>,<c3,cm,state_finalized>,<c3,cm,state_coffeemachine_waiting>,<c3,cm,state_coffeemachine_serve>,<c3,cm,state_coffeemachine_acceptingpayment>,<c4,cm,state_uninitialized>,<c4,cm,state_finalized>,<c4,cm,state_coffeemachine_waiting>,<c4,cm,state_coffeemachine_serve>,<c4,cm,state_coffeemachine_acceptingpayment>,<c5,cm,state_uninitialized>,<c5,cm,state_finalized>,<c5,cm,state_coffeemachine_waiting>,<c5,cm,state_coffeemachine_serve>,<c5,cm,state_coffeemachine_acceptingpayment>,<c6,cm,state_uninitialized>,<c6,cm,state_finalized>,<c6,cm,state_coffeemachine_waiting>,<c6,cm,state_coffeemachine_serve>,<c6,cm,state_coffeemachine_acceptingpayment>,<c7,cm,state_uninitialized>,<c7,cm,state_finalized>,<c7,cm,state_coffeemachine_waiting>,<c7,cm,state_coffeemachine_serve>,<c7,cm,state_coffeemachine_acceptingpayment>,<c8,cm,state_uninitialized>,<c8,cm,state_finalized>,<c8,cm,state_coffeemachine_waiting>,<c8,cm,state_coffeemachine_serve>,<c8,cm,state_coffeemachine_acceptingpayment>,<c9,cm,state_uninitialized>,<c9,cm,state_finalized>,<c9,cm,state_coffeemachine_waiting>,<c9,cm,state_coffeemachine_serve>,<c9,cm,state_coffeemachine_acceptingpayment>,<c10,cm,state_uninitialized>,<c10,cm,state_finalized>,<c10,cm,state_coffeemachine_waiting>,<c10,cm,state_coffeemachine_serve>,<c10,cm,state_coffeemachine_acceptingpayment>,<c11,cm,state_uninitialized>,<c11,cm,state_finalized>,<c11,cm,state_coffeemachine_waiting>,<c11,cm,state_coffeemachine_serve>,<c11,cm,state_coffeemachine_acceptingpayment>}
raisedEvent (cur:id, nxt:id, event:id, instance:id) <= {<c1,c2,event_coffeemachine_pay__amountnotmet,cm>,<c1,c2,event_coffeemachine_cancel,cm>,<c1,c2,event_coffeemachine_empty,cm>,<c1,c2,event_coffeemachine_pay__amountmet,cm>,<c1,c2,event_coffeemachine_select__americano,cm>,<c1,c2,event_coffeemachine_select__latte,cm>,<c1,c2,event_coffeemachine_select__normal,cm>,<c1,c2,event_coffeemachine_poweroff,cm>,<c1,c2,event_coffeemachine_poweron,cm>,<c1,c2,event_coffeemachine_select__espresso,cm>,<c2,c3,event_coffeemachine_pay__amountnotmet,cm>,<c2,c3,event_coffeemachine_cancel,cm>,<c2,c3,event_coffeemachine_empty,cm>,<c2,c3,event_coffeemachine_pay__amountmet,cm>,<c2,c3,event_coffeemachine_select__americano,cm>,<c2,c3,event_coffeemachine_select__latte,cm>,<c2,c3,event_coffeemachine_select__normal,cm>,<c2,c3,event_coffeemachine_poweroff,cm>,<c2,c3,event_coffeemachine_poweron,cm>,<c2,c3,event_coffeemachine_select__espresso,cm>,<c3,c4,event_coffeemachine_pay__amountnotmet,cm>,<c3,c4,event_coffeemachine_cancel,cm>,<c3,c4,event_coffeemachine_empty,cm>,<c3,c4,event_coffeemachine_pay__amountmet,cm>,<c3,c4,event_coffeemachine_select__americano,cm>,<c3,c4,event_coffeemachine_select__latte,cm>,<c3,c4,event_coffeemachine_select__normal,cm>,<c3,c4,event_coffeemachine_poweroff,cm>,<c3,c4,event_coffeemachine_poweron,cm>,<c3,c4,event_coffeemachine_select__espresso,cm>,<c4,c5,event_coffeemachine_pay__amountnotmet,cm>,<c4,c5,event_coffeemachine_cancel,cm>,<c4,c5,event_coffeemachine_empty,cm>,<c4,c5,event_coffeemachine_pay__amountmet,cm>,<c4,c5,event_coffeemachine_select__americano,cm>,<c4,c5,event_coffeemachine_select__latte,cm>,<c4,c5,event_coffeemachine_select__normal,cm>,<c4,c5,event_coffeemachine_poweroff,cm>,<c4,c5,event_coffeemachine_poweron,cm>,<c4,c5,event_coffeemachine_select__espresso,cm>,<c5,c6,event_coffeemachine_pay__amountnotmet,cm>,<c5,c6,event_coffeemachine_cancel,cm>,<c5,c6,event_coffeemachine_empty,cm>,<c5,c6,event_coffeemachine_pay__amountmet,cm>,<c5,c6,event_coffeemachine_select__americano,cm>,<c5,c6,event_coffeemachine_select__latte,cm>,<c5,c6,event_coffeemachine_select__normal,cm>,<c5,c6,event_coffeemachine_poweroff,cm>,<c5,c6,event_coffeemachine_poweron,cm>,<c5,c6,event_coffeemachine_select__espresso,cm>,<c6,c7,event_coffeemachine_pay__amountnotmet,cm>,<c6,c7,event_coffeemachine_cancel,cm>,<c6,c7,event_coffeemachine_empty,cm>,<c6,c7,event_coffeemachine_pay__amountmet,cm>,<c6,c7,event_coffeemachine_select__americano,cm>,<c6,c7,event_coffeemachine_select__latte,cm>,<c6,c7,event_coffeemachine_select__normal,cm>,<c6,c7,event_coffeemachine_poweroff,cm>,<c6,c7,event_coffeemachine_poweron,cm>,<c6,c7,event_coffeemachine_select__espresso,cm>,<c7,c8,event_coffeemachine_pay__amountnotmet,cm>,<c7,c8,event_coffeemachine_cancel,cm>,<c7,c8,event_coffeemachine_empty,cm>,<c7,c8,event_coffeemachine_pay__amountmet,cm>,<c7,c8,event_coffeemachine_select__americano,cm>,<c7,c8,event_coffeemachine_select__latte,cm>,<c7,c8,event_coffeemachine_select__normal,cm>,<c7,c8,event_coffeemachine_poweroff,cm>,<c7,c8,event_coffeemachine_poweron,cm>,<c7,c8,event_coffeemachine_select__espresso,cm>,<c8,c9,event_coffeemachine_pay__amountnotmet,cm>,<c8,c9,event_coffeemachine_cancel,cm>,<c8,c9,event_coffeemachine_empty,cm>,<c8,c9,event_coffeemachine_pay__amountmet,cm>,<c8,c9,event_coffeemachine_select__americano,cm>,<c8,c9,event_coffeemachine_select__latte,cm>,<c8,c9,event_coffeemachine_select__normal,cm>,<c8,c9,event_coffeemachine_poweroff,cm>,<c8,c9,event_coffeemachine_poweron,cm>,<c8,c9,event_coffeemachine_select__espresso,cm>,<c9,c10,event_coffeemachine_pay__amountnotmet,cm>,<c9,c10,event_coffeemachine_cancel,cm>,<c9,c10,event_coffeemachine_empty,cm>,<c9,c10,event_coffeemachine_pay__amountmet,cm>,<c9,c10,event_coffeemachine_select__americano,cm>,<c9,c10,event_coffeemachine_select__latte,cm>,<c9,c10,event_coffeemachine_select__normal,cm>,<c9,c10,event_coffeemachine_poweroff,cm>,<c9,c10,event_coffeemachine_poweron,cm>,<c9,c10,event_coffeemachine_select__espresso,cm>,<c10,c11,event_coffeemachine_pay__amountnotmet,cm>,<c10,c11,event_coffeemachine_cancel,cm>,<c10,c11,event_coffeemachine_empty,cm>,<c10,c11,event_coffeemachine_pay__amountmet,cm>,<c10,c11,event_coffeemachine_select__americano,cm>,<c10,c11,event_coffeemachine_select__latte,cm>,<c10,c11,event_coffeemachine_select__normal,cm>,<c10,c11,event_coffeemachine_poweroff,cm>,<c10,c11,event_coffeemachine_poweron,cm>,<c10,c11,event_coffeemachine_select__espresso,cm>}
changedInstance (cur:id, nxt:id, instance:id) <= {<c1,c2,cm>,<c2,c3,cm>,<c3,c4,cm>,<c4,c5,cm>,<c5,c6,cm>,<c6,c7,cm>,<c7,c8,cm>,<c8,c9,cm>,<c9,c10,cm>,<c10,c11,cm>}

CoffeeMachineSelected (config:id, instance:id, selected:id) <= {<c1,cm,NORMAL>,<c1,cm,AMERICANO>,<c1,cm,LATTE>,<c1,cm,NONE>,<c1,cm,ESPRESSO>,<c2,cm,NORMAL>,<c2,cm,AMERICANO>,<c2,cm,LATTE>,<c2,cm,NONE>,<c2,cm,ESPRESSO>,<c3,cm,NORMAL>,<c3,cm,AMERICANO>,<c3,cm,LATTE>,<c3,cm,NONE>,<c3,cm,ESPRESSO>,<c4,cm,NORMAL>,<c4,cm,AMERICANO>,<c4,cm,LATTE>,<c4,cm,NONE>,<c4,cm,ESPRESSO>,<c5,cm,NORMAL>,<c5,cm,AMERICANO>,<c5,cm,LATTE>,<c5,cm,NONE>,<c5,cm,ESPRESSO>,<c6,cm,NORMAL>,<c6,cm,AMERICANO>,<c6,cm,LATTE>,<c6,cm,NONE>,<c6,cm,ESPRESSO>,<c7,cm,NORMAL>,<c7,cm,AMERICANO>,<c7,cm,LATTE>,<c7,cm,NONE>,<c7,cm,ESPRESSO>,<c8,cm,NORMAL>,<c8,cm,AMERICANO>,<c8,cm,LATTE>,<c8,cm,NONE>,<c8,cm,ESPRESSO>,<c9,cm,NORMAL>,<c9,cm,AMERICANO>,<c9,cm,LATTE>,<c9,cm,NONE>,<c9,cm,ESPRESSO>,<c10,cm,NORMAL>,<c10,cm,AMERICANO>,<c10,cm,LATTE>,<c10,cm,NONE>,<c10,cm,ESPRESSO>,<c11,cm,NORMAL>,<c11,cm,AMERICANO>,<c11,cm,LATTE>,<c11,cm,NONE>,<c11,cm,ESPRESSO>}
CoffeeMachineAmountNeeded (config:id, instance:id, amountNeeded:int) <= {<c1,cm,?>,<c2,cm,?>,<c3,cm,?>,<c4,cm,?>,<c5,cm,?>,<c6,cm,?>,<c7,cm,?>,<c8,cm,?>,<c9,cm,?>,<c10,cm,?>,<c11,cm,?>}

CoffeeType_NONE (instance:id) = {<NONE>}
CoffeeType_NORMAL (instance:id) = {<NORMAL>}
CoffeeType_ESPRESSO (instance:id) = {<ESPRESSO>}
CoffeeType_AMERICANO (instance:id) = {<AMERICANO>}
CoffeeType_LATTE (instance:id) = {<LATTE>}

ParamEventCoffeeMachinePay__amountMetAmount (cur:id, nxt:id, amount:int) <= {<c1,c2,?>,<c2,c3,?>,<c3,c4,?>,<c4,c5,?>,<c5,c6,?>,<c6,c7,?>,<c7,c8,?>,<c8,c9,?>,<c9,c10,?>,<c10,c11,?>}
ParamEventCoffeeMachinePay__amountNotMetAmount (cur:id, nxt:id, amount:int) <= {<c1,c2,?>,<c2,c3,?>,<c3,c4,?>,<c4,c5,?>,<c5,c6,?>,<c6,c7,?>,<c7,c8,?>,<c8,c9,?>,<c9,c10,?>,<c10,c11,?>}
    

// Constraints for the configuration and ordering relations
order ⊆ Config[config as cur] ⨯ Config[config as nxt]
last = Config ∖ order[cur->config]  // There is only one last configuration
 

// Generic 'Type' constraints    
raisedEvent ⊆ (order) ⨯ allowedTransitions[event] ⨯ Instance[instance]
instanceInState ⊆ Instance[instance] ⨯ Config ⨯ State
changedInstance ⊆ (order) ⨯ Instance[instance]
    
// Machine specific `type` constraints
// For `CoffeeMachine`
CoffeeMachineAmountNeeded[config,instance]  ⊆ Config ⨯ (Instance ⨝ CoffeeMachine)[instance]
CoffeeMachineSelected  ⊆ Config ⨯ (Instance ⨝ CoffeeMachine)[instance] ⨯ (Instance ⨝ CoffeeType)[instance->selected]
ParamEventCoffeeMachinePay__amountMetAmount[cur,nxt] ⊆ order ∪ loop
ParamEventCoffeeMachinePay__amountNotMetAmount[cur,nxt] ⊆ order ∪ loop


// Specific per event: parameter multiplicity constraints
∀ step ∈ (order ∪ loop) ⨝ raisedEvent | (
  (some (step ⨝ EventCoffeeMachinePay__amountNotMet) ⇔ one (step ⨝ ParamEventCoffeeMachinePay__amountNotMetAmount)) ∧
  (some (step ⨝ EventCoffeeMachinePay__amountMet) ⇔ one (step ⨝ ParamEventCoffeeMachinePay__amountMetAmount))
)
// Generic: All configurations are reachable
∀ c ∈ Config ∖ first | c ⊆ (first[config as cur] ⨝ ^<cur,nxt>order)[nxt -> config]

// Generic: Every transition can only happen by exactly one event
∀ o ∈ order | one o ⨝ raisedEvent

// Specif: In every configuration all machines have a state IFF its a machine which is not empty
∀ c ∈ Config, inst ∈ (Instance ∖ ((CoffeeType) ⨝ Instance)) | one instanceInState ⨝ c ⨝ inst

// Specific per machine: In every configuration iff a machine is in an initialized state then it must have values
// for `CoffeeMachine`
∀ c ∈ Config, inst ∈ (Instance ⨝ CoffeeMachine)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇒ one CoffeeMachineSelected ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ CoffeeMachine)[instance] | (no (((c ⨯ inst) ⨝ instanceInState)[state] ∩ initialized) ⇒ no CoffeeMachineSelected ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ CoffeeMachine)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇔ one CoffeeMachineAmountNeeded ⨝ c ⨝ inst)

// Generic: Transitions are only allowed between if an event is specified between two states
∀ o ∈ (order) ⨝ raisedEvent | (o[cur as config] ⨝ instanceInState)[state->from] ⨯ (o[nxt as config] ⨝ instanceInState)[state->to] ⨯ o[event] ⊆ allowedTransitions

// Change set predicates
pred inChangeSet[step: (cur:id, nxt:id), instances: (instance:id)]
  = instances ⊆ (changedInstance ⨝ step)[instance]
 
pred notInChangeSet[step: (cur:id, nxt:id), instances: (instance:id)]
  = no instances ∩ (changedInstance ⨝ step)[instance]

pred changeSetCanContain[step: (cur:id, nxt:id), instances: (instance:id)]
  = (changedInstance ⨝ step)[instance] ⊆ instances 

// Generic predicates
pred forceState[curState: (state:id), nxtState: (state:id), raisedEvent: (event:id)]
  = nxtState = (curState[state as from] ⨝ (allowedTransitions ⨝ raisedEvent))[to->state]

pred inState[config: (config:id), instance: (instance:id), state: (state:id)]
  = ((instance ⨯ config) ⨝ instanceInState)[state] ⊆ state

// Event predicates for `CoffeeMachine`
pred frameCoffeeMachine[step: (cur:id, nxt:id), coffeemachine: (instance:id)] 
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ coffeemachine)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ coffeemachine)[state] | (
    nxtState = curState ∧
    (
      curState ⊆ uninitialized ∨ 
      (// Postconditions
       (coffeemachine ⨝ (CoffeeMachineSelected ⨝ nxt))[selected] = (coffeemachine ⨝ (CoffeeMachineSelected ⨝ cur))[selected] ∧
       (some ((coffeemachine ⨝ (CoffeeMachineAmountNeeded ⨝ nxt))[amountNeeded][amountNeeded as nxt_amountNeeded] ⨯ (coffeemachine ⨝ (CoffeeMachineAmountNeeded ⨝ cur))[amountNeeded][amountNeeded as cur_amountNeeded]) where (nxt_amountNeeded = cur_amountNeeded)))
    )
  )

pred eventCoffeeMachinePowerOff[step:(cur:id, nxt:id), coffeemachine: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ coffeemachine)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ coffeemachine)[state] |
    ( 
       
      // Postconditions
      (coffeemachine ⨝ (CoffeeMachineSelected ⨝ nxt))[selected] = (coffeemachine ⨝ (CoffeeMachineSelected ⨝ cur))[selected] ∧
      (some ((coffeemachine ⨝ (CoffeeMachineAmountNeeded ⨝ nxt))[amountNeeded][amountNeeded as nxt_amountNeeded] ⨯ (coffeemachine ⨝ (CoffeeMachineAmountNeeded ⨝ cur))[amountNeeded][amountNeeded as cur_amountNeeded]) where (nxt_amountNeeded = cur_amountNeeded))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventCoffeeMachinePowerOff] ∧
      // Make sure this instance is in the change set
      inChangeSet[step, coffeemachine]
    )

pred eventCoffeeMachineCancel[step:(cur:id, nxt:id), coffeemachine: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ coffeemachine)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ coffeemachine)[state] |
    ( 
       
      // Postconditions
      (some ((coffeemachine ⨝ (CoffeeMachineAmountNeeded ⨝ nxt))[amountNeeded][amountNeeded as nxt_amountNeeded]) where (nxt_amountNeeded = 0)) ∧
      (coffeemachine ⨝ (CoffeeMachineSelected ⨝ nxt))[selected] = CoffeeType_NONE[instance as selected]  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventCoffeeMachineCancel] ∧
      // Make sure this instance is in the change set
      inChangeSet[step, coffeemachine]
    )

pred eventCoffeeMachinePowerOn[step:(cur:id, nxt:id), coffeemachine: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ coffeemachine)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ coffeemachine)[state] |
    ( 
       
      // Postconditions
      (some ((coffeemachine ⨝ (CoffeeMachineAmountNeeded ⨝ nxt))[amountNeeded][amountNeeded as nxt_amountNeeded]) where (nxt_amountNeeded = 0)) ∧
      (coffeemachine ⨝ (CoffeeMachineSelected ⨝ nxt))[selected] = CoffeeType_NONE[instance as selected]  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventCoffeeMachinePowerOn] ∧
      // Make sure this instance is in the change set
      inChangeSet[step, coffeemachine]
    )

pred eventCoffeeMachineSelect__normal[step:(cur:id, nxt:id), coffeemachine: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ coffeemachine)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ coffeemachine)[state] |
    ( 
       
      // Postconditions
      (coffeemachine ⨝ (CoffeeMachineSelected ⨝ nxt))[selected] = CoffeeType_NORMAL[instance as selected] ∧
      (some ((coffeemachine ⨝ (CoffeeMachineAmountNeeded ⨝ nxt))[amountNeeded][amountNeeded as nxt_amountNeeded]) where (nxt_amountNeeded = 95))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventCoffeeMachineSelect__normal] ∧
      // Make sure this instance is in the change set
      inChangeSet[step, coffeemachine]
    )

pred eventCoffeeMachinePay__amountNotMet[step:(cur:id, nxt:id), coffeemachine: (instance:id), amount: (amount:int)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ coffeemachine)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ coffeemachine)[state] |
    ( 
      // Preconditions 
      (some (amount[amount as param_1_amount] ⨯ (coffeemachine ⨝ (CoffeeMachineAmountNeeded ⨝ cur))[amountNeeded][amountNeeded as cur_amountNeeded]) where (cur_amountNeeded - param_1_amount > 0)) ∧
      (((some (amount[amount as param_2_amount]) where (param_2_amount = 5)) ∨ ((some (amount[amount as param_3_amount]) where (param_3_amount = 10)) ∨ ((some (amount[amount as param_4_amount]) where (param_4_amount = 20)) ∨ (some (amount[amount as param_5_amount]) where (param_5_amount = 50))))))  ∧ 
      // Postconditions
      (coffeemachine ⨝ (CoffeeMachineSelected ⨝ nxt))[selected] = (coffeemachine ⨝ (CoffeeMachineSelected ⨝ cur))[selected] ∧
      (some (amount[amount as param_6_amount] ⨯ (coffeemachine ⨝ (CoffeeMachineAmountNeeded ⨝ nxt))[amountNeeded][amountNeeded as nxt_amountNeeded] ⨯ (coffeemachine ⨝ (CoffeeMachineAmountNeeded ⨝ cur))[amountNeeded][amountNeeded as cur_amountNeeded]) where (nxt_amountNeeded = cur_amountNeeded - param_6_amount))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventCoffeeMachinePay__amountNotMet] ∧
      // Make sure this instance is in the change set
      inChangeSet[step, coffeemachine]
    )

pred eventCoffeeMachinePay__amountMet[step:(cur:id, nxt:id), coffeemachine: (instance:id), amount: (amount:int)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ coffeemachine)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ coffeemachine)[state] |
    ( 
      // Preconditions 
      (some (amount[amount as param_1_amount] ⨯ (coffeemachine ⨝ (CoffeeMachineAmountNeeded ⨝ cur))[amountNeeded][amountNeeded as cur_amountNeeded]) where (cur_amountNeeded - param_1_amount = 0)) ∧
      (((some (amount[amount as param_2_amount]) where (param_2_amount = 5)) ∨ ((some (amount[amount as param_3_amount]) where (param_3_amount = 10)) ∨ ((some (amount[amount as param_4_amount]) where (param_4_amount = 20)) ∨ (some (amount[amount as param_5_amount]) where (param_5_amount = 50))))))  ∧ 
      // Postconditions
      (coffeemachine ⨝ (CoffeeMachineSelected ⨝ nxt))[selected] = CoffeeType_NONE[instance as selected] ∧
      (some (amount[amount as param_6_amount] ⨯ (coffeemachine ⨝ (CoffeeMachineAmountNeeded ⨝ nxt))[amountNeeded][amountNeeded as nxt_amountNeeded] ⨯ (coffeemachine ⨝ (CoffeeMachineAmountNeeded ⨝ cur))[amountNeeded][amountNeeded as cur_amountNeeded]) where (nxt_amountNeeded = cur_amountNeeded - param_6_amount))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventCoffeeMachinePay__amountMet] ∧
      // Make sure this instance is in the change set
      inChangeSet[step, coffeemachine]
    )

pred eventCoffeeMachineSelect__latte[step:(cur:id, nxt:id), coffeemachine: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ coffeemachine)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ coffeemachine)[state] |
    ( 
       
      // Postconditions
      (coffeemachine ⨝ (CoffeeMachineSelected ⨝ nxt))[selected] = CoffeeType_LATTE[instance as selected] ∧
      (some ((coffeemachine ⨝ (CoffeeMachineAmountNeeded ⨝ nxt))[amountNeeded][amountNeeded as nxt_amountNeeded]) where (nxt_amountNeeded = 150))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventCoffeeMachineSelect__latte] ∧
      // Make sure this instance is in the change set
      inChangeSet[step, coffeemachine]
    )

pred eventCoffeeMachineSelect__americano[step:(cur:id, nxt:id), coffeemachine: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ coffeemachine)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ coffeemachine)[state] |
    ( 
       
      // Postconditions
      (coffeemachine ⨝ (CoffeeMachineSelected ⨝ nxt))[selected] = CoffeeType_AMERICANO[instance as selected] ∧
      (some ((coffeemachine ⨝ (CoffeeMachineAmountNeeded ⨝ nxt))[amountNeeded][amountNeeded as nxt_amountNeeded]) where (nxt_amountNeeded = 130))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventCoffeeMachineSelect__americano] ∧
      // Make sure this instance is in the change set
      inChangeSet[step, coffeemachine]
    )

pred eventCoffeeMachineSelect__espresso[step:(cur:id, nxt:id), coffeemachine: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ coffeemachine)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ coffeemachine)[state] |
    ( 
       
      // Postconditions
      (coffeemachine ⨝ (CoffeeMachineSelected ⨝ nxt))[selected] = CoffeeType_ESPRESSO[instance as selected] ∧
      (some ((coffeemachine ⨝ (CoffeeMachineAmountNeeded ⨝ nxt))[amountNeeded][amountNeeded as nxt_amountNeeded]) where (nxt_amountNeeded = 120))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventCoffeeMachineSelect__espresso] ∧
      // Make sure this instance is in the change set
      inChangeSet[step, coffeemachine]
    )

pred eventCoffeeMachineEmpty[step:(cur:id, nxt:id), coffeemachine: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ coffeemachine)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ coffeemachine)[state] |
    ( 
       
      // Postconditions
      (coffeemachine ⨝ (CoffeeMachineSelected ⨝ nxt))[selected] = (coffeemachine ⨝ (CoffeeMachineSelected ⨝ cur))[selected] ∧
      (some ((coffeemachine ⨝ (CoffeeMachineAmountNeeded ⨝ nxt))[amountNeeded][amountNeeded as nxt_amountNeeded] ⨯ (coffeemachine ⨝ (CoffeeMachineAmountNeeded ⨝ cur))[amountNeeded][amountNeeded as cur_amountNeeded]) where (nxt_amountNeeded = cur_amountNeeded))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventCoffeeMachineEmpty] ∧
      // Make sure this instance is in the change set
      inChangeSet[step, coffeemachine]
    )


// Transition function for `CoffeeMachine`
pred possibleTransitionsCoffeeMachine[step: (cur:id, nxt:id)] 
  = ∀ inst ∈ (Instance ⨝ CoffeeMachine)[instance] |
    (some inst ∩ ((raisedEvent ⨝ step)[instance]) ⇔ (
      (eventCoffeeMachineSelect__americano[step,inst] ∧
      (step ⨝ raisedEvent)[event] = EventCoffeeMachineSelect__americano ∧
      changeSetCanContain[step, inst])
      ∨
      (eventCoffeeMachinePowerOff[step,inst] ∧
      (step ⨝ raisedEvent)[event] = EventCoffeeMachinePowerOff ∧
      changeSetCanContain[step, inst])
      ∨
      (eventCoffeeMachinePay__amountMet[step,inst,(step ⨝ ParamEventCoffeeMachinePay__amountMetAmount)[amount]] ∧
      (step ⨝ raisedEvent)[event] = EventCoffeeMachinePay__amountMet ∧
      changeSetCanContain[step, inst])
      ∨
      (eventCoffeeMachineSelect__normal[step,inst] ∧
      (step ⨝ raisedEvent)[event] = EventCoffeeMachineSelect__normal ∧
      changeSetCanContain[step, inst])
      ∨
      (eventCoffeeMachineSelect__espresso[step,inst] ∧
      (step ⨝ raisedEvent)[event] = EventCoffeeMachineSelect__espresso ∧
      changeSetCanContain[step, inst])
      ∨
      (eventCoffeeMachinePowerOn[step,inst] ∧
      (step ⨝ raisedEvent)[event] = EventCoffeeMachinePowerOn ∧
      changeSetCanContain[step, inst])
      ∨
      (eventCoffeeMachineCancel[step,inst] ∧
      (step ⨝ raisedEvent)[event] = EventCoffeeMachineCancel ∧
      changeSetCanContain[step, inst])
      ∨
      (eventCoffeeMachineSelect__latte[step,inst] ∧
      (step ⨝ raisedEvent)[event] = EventCoffeeMachineSelect__latte ∧
      changeSetCanContain[step, inst])
      ∨
      (eventCoffeeMachinePay__amountNotMet[step,inst,(step ⨝ ParamEventCoffeeMachinePay__amountNotMetAmount)[amount]] ∧
      (step ⨝ raisedEvent)[event] = EventCoffeeMachinePay__amountNotMet ∧
      changeSetCanContain[step, inst])
      ∨
      (eventCoffeeMachineEmpty[step,inst] ∧
      (step ⨝ raisedEvent)[event] = EventCoffeeMachineEmpty ∧
      changeSetCanContain[step, inst])
    ))
    ∧
    (notInChangeSet[step, inst] ⇒ frameCoffeeMachine[step, inst])


// Transition function
∀ step ∈ order| possibleTransitionsCoffeeMachine[step]



// Assert `MachineIsServing`
∃ cur_1 ∈ Config | let step_1 = cur_1[config as cur] ⨝ (order ∪ loop) | (∃ m ∈ (Instance ⨝ CoffeeMachine)[instance] | inState[cur_1, m, StateCoffeeMachineServe])
// Minimize the number of steps by minimizing the number of Configurations
objectives: minimize Config[count()]