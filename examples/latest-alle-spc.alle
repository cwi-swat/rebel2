// Static configuration of state machines
// Define the specs that can take place in the transition system
AccountNumber (spec:id) = {<accountnumber>}
Account (spec:id) = {<account>}
Transaction (spec:id) = {<transaction>}

// Define all possible states for all machines
State (state:id) = {<state_uninitialized>,<state_finalized>,<state_account_waitingforactivation>,<state_account_blocked>,<state_account_opened>,<state_transaction_created>}
initialized (state:id) = {<state_account_waitingforactivation>,<state_account_blocked>,<state_account_opened>,<state_transaction_created>}
finalized (state:id) = {<state_finalized>}
uninitialized (state:id) = {<state_uninitialized>}

StateAccountOpened (state:id) = {<state_account_opened>}
StateAccountBlocked (state:id) = {<state_account_blocked>}
StateAccountWaitingForActivation (state:id) = {<state_account_waitingforactivation>}

StateTransactionCreated (state:id) = {<state_transaction_created>}


// Define which transitions are allowed (in the form of `from a state` -> ` via an event` -> `to a state`
allowedTransitions (from:id, to:id, event:id) = {<state_account_opened,state_account_opened,event_account_deposit>,<state_account_opened,state_account_blocked,event_account_block>,<state_uninitialized,state_account_waitingforactivation,event_account_open>,<state_account_opened,state_finalized,event_account_close>,<state_account_opened,state_account_opened,event_account_withdraw>,<state_account_opened,state_account_opened,event_account_payinterest>,<state_account_blocked,state_account_opened,event_account_unblock>,<state_account_waitingforactivation,state_account_opened,event_account_deposit>,<state_account_blocked,state_finalized,event_account_forceclose>,<state_uninitialized,state_transaction_created,event_transaction_create>,<state_transaction_created,state_finalized,event_transaction_cancel>,<state_transaction_created,state_finalized,event_transaction_book>}
// Define each event as single relation so that the events can be used as variables in the constraints 
EventAccountForceClose (event:id) = {<event_account_forceclose>}
EventTransactionBook (event:id) = {<event_transaction_book>}
EventTransactionCancel (event:id) = {<event_transaction_cancel>}
EventAccountWithdraw (event:id) = {<event_account_withdraw>}
EventAccountOpen (event:id) = {<event_account_open>}
EventAccountDeposit (event:id) = {<event_account_deposit>}
EventAccountPayInterest (event:id) = {<event_account_payinterest>}
EventAccount__frame (event:id) = {<event_account___frame>}
EventAccountUnblock (event:id) = {<event_account_unblock>}
EventAccountBlock (event:id) = {<event_account_block>}
EventAccountClose (event:id) = {<event_account_close>}
EventTransactionCreate (event:id) = {<event_transaction_create>}
EventTransaction__frame (event:id) = {<event_transaction___frame>}

__IntConst_0 (const_0: int) = {<0>}
__IntConst_100 (const_100: int) = {<100>}


// Dynamic configuration of state machines
Config (config:id) >= {<c1>} <= {<c1>,<c2>,<c3>,<c4>,<c5>,<c6>}
order (cur:id, nxt:id) <= {<c1,c2>,<c2,c3>,<c3,c4>,<c4,c5>,<c5,c6>}
first (config:id) = {<c1>}
last (config:id) <= {<c1>,<c2>,<c3>,<c4>,<c5>,<c6>}
back (config:id)  <= {<c1>,<c2>,<c3>,<c4>,<c5>,<c6>} 
loop (cur:id, nxt:id)  <= {<c2,c1>,<c2,c2>,<c3,c1>,<c3,c2>,<c3,c3>,<c4,c1>,<c4,c2>,<c4,c3>,<c4,c4>,<c5,c1>,<c5,c2>,<c5,c3>,<c5,c4>,<c5,c5>,<c6,c1>,<c6,c2>,<c6,c3>,<c6,c4>,<c6,c5>,<c6,c6>} 

Instance (spec:id, instance:id) = {<accountnumber,an1>,<accountnumber,an2>,<account,ac1>,<account,ac2>,<transaction,t>}
instanceInState (config:id, instance:id, state:id) >={<c1,t,state_uninitialized>}<= {<c1,t,state_uninitialized>,<c1,t,state_finalized>,<c1,t,state_transaction_created>,<c1,ac1,state_account_opened>,<c1,ac1,state_account_blocked>,<c1,ac1,state_uninitialized>,<c1,ac1,state_account_waitingforactivation>,<c1,ac1,state_finalized>,<c1,ac2,state_account_opened>,<c1,ac2,state_account_blocked>,<c1,ac2,state_uninitialized>,<c1,ac2,state_account_waitingforactivation>,<c1,ac2,state_finalized>,<c2,t,state_uninitialized>,<c2,t,state_finalized>,<c2,t,state_transaction_created>,<c2,ac1,state_account_opened>,<c2,ac1,state_account_blocked>,<c2,ac1,state_uninitialized>,<c2,ac1,state_account_waitingforactivation>,<c2,ac1,state_finalized>,<c2,ac2,state_account_opened>,<c2,ac2,state_account_blocked>,<c2,ac2,state_uninitialized>,<c2,ac2,state_account_waitingforactivation>,<c2,ac2,state_finalized>,<c3,t,state_uninitialized>,<c3,t,state_finalized>,<c3,t,state_transaction_created>,<c3,ac1,state_account_opened>,<c3,ac1,state_account_blocked>,<c3,ac1,state_uninitialized>,<c3,ac1,state_account_waitingforactivation>,<c3,ac1,state_finalized>,<c3,ac2,state_account_opened>,<c3,ac2,state_account_blocked>,<c3,ac2,state_uninitialized>,<c3,ac2,state_account_waitingforactivation>,<c3,ac2,state_finalized>,<c4,t,state_uninitialized>,<c4,t,state_finalized>,<c4,t,state_transaction_created>,<c4,ac1,state_account_opened>,<c4,ac1,state_account_blocked>,<c4,ac1,state_uninitialized>,<c4,ac1,state_account_waitingforactivation>,<c4,ac1,state_finalized>,<c4,ac2,state_account_opened>,<c4,ac2,state_account_blocked>,<c4,ac2,state_uninitialized>,<c4,ac2,state_account_waitingforactivation>,<c4,ac2,state_finalized>,<c5,t,state_uninitialized>,<c5,t,state_finalized>,<c5,t,state_transaction_created>,<c5,ac1,state_account_opened>,<c5,ac1,state_account_blocked>,<c5,ac1,state_uninitialized>,<c5,ac1,state_account_waitingforactivation>,<c5,ac1,state_finalized>,<c5,ac2,state_account_opened>,<c5,ac2,state_account_blocked>,<c5,ac2,state_uninitialized>,<c5,ac2,state_account_waitingforactivation>,<c5,ac2,state_finalized>,<c6,t,state_uninitialized>,<c6,t,state_finalized>,<c6,t,state_transaction_created>,<c6,ac1,state_account_opened>,<c6,ac1,state_account_blocked>,<c6,ac1,state_uninitialized>,<c6,ac1,state_account_waitingforactivation>,<c6,ac1,state_finalized>,<c6,ac2,state_account_opened>,<c6,ac2,state_account_blocked>,<c6,ac2,state_uninitialized>,<c6,ac2,state_account_waitingforactivation>,<c6,ac2,state_finalized>}
raisedEvent (cur:id, nxt:id, event:id, instance:id) <= {<c1,c2,event_transaction_cancel,t>,<c1,c2,event_transaction_create,t>,<c1,c2,event_transaction_book,t>,<c2,c3,event_transaction_cancel,t>,<c2,c3,event_transaction_create,t>,<c2,c3,event_transaction_book,t>,<c3,c4,event_transaction_cancel,t>,<c3,c4,event_transaction_create,t>,<c3,c4,event_transaction_book,t>,<c4,c5,event_transaction_cancel,t>,<c4,c5,event_transaction_create,t>,<c4,c5,event_transaction_book,t>,<c5,c6,event_transaction_cancel,t>,<c5,c6,event_transaction_create,t>,<c5,c6,event_transaction_book,t>,<c6,c6,event_transaction_cancel,t>,<c6,c6,event_transaction_create,t>,<c6,c6,event_transaction_book,t>,<c6,c5,event_transaction_cancel,t>,<c6,c5,event_transaction_create,t>,<c6,c5,event_transaction_book,t>,<c6,c4,event_transaction_cancel,t>,<c6,c4,event_transaction_create,t>,<c6,c4,event_transaction_book,t>,<c6,c3,event_transaction_cancel,t>,<c6,c3,event_transaction_create,t>,<c6,c3,event_transaction_book,t>,<c6,c2,event_transaction_cancel,t>,<c6,c2,event_transaction_create,t>,<c6,c2,event_transaction_book,t>,<c6,c1,event_transaction_cancel,t>,<c6,c1,event_transaction_create,t>,<c6,c1,event_transaction_book,t>,<c5,c5,event_transaction_cancel,t>,<c5,c5,event_transaction_create,t>,<c5,c5,event_transaction_book,t>,<c5,c4,event_transaction_cancel,t>,<c5,c4,event_transaction_create,t>,<c5,c4,event_transaction_book,t>,<c5,c3,event_transaction_cancel,t>,<c5,c3,event_transaction_create,t>,<c5,c3,event_transaction_book,t>,<c5,c2,event_transaction_cancel,t>,<c5,c2,event_transaction_create,t>,<c5,c2,event_transaction_book,t>,<c5,c1,event_transaction_cancel,t>,<c5,c1,event_transaction_create,t>,<c5,c1,event_transaction_book,t>,<c4,c4,event_transaction_cancel,t>,<c4,c4,event_transaction_create,t>,<c4,c4,event_transaction_book,t>,<c4,c3,event_transaction_cancel,t>,<c4,c3,event_transaction_create,t>,<c4,c3,event_transaction_book,t>,<c4,c2,event_transaction_cancel,t>,<c4,c2,event_transaction_create,t>,<c4,c2,event_transaction_book,t>,<c4,c1,event_transaction_cancel,t>,<c4,c1,event_transaction_create,t>,<c4,c1,event_transaction_book,t>,<c3,c3,event_transaction_cancel,t>,<c3,c3,event_transaction_create,t>,<c3,c3,event_transaction_book,t>,<c3,c2,event_transaction_cancel,t>,<c3,c2,event_transaction_create,t>,<c3,c2,event_transaction_book,t>,<c3,c1,event_transaction_cancel,t>,<c3,c1,event_transaction_create,t>,<c3,c1,event_transaction_book,t>,<c2,c2,event_transaction_cancel,t>,<c2,c2,event_transaction_create,t>,<c2,c2,event_transaction_book,t>,<c2,c1,event_transaction_cancel,t>,<c2,c1,event_transaction_create,t>,<c2,c1,event_transaction_book,t>,<c1,c1,event_transaction_cancel,t>,<c1,c1,event_transaction_create,t>,<c1,c1,event_transaction_book,t>,<c1,c2,event_account_forceclose,ac1>,<c1,c2,event_account_deposit,ac1>,<c1,c2,event_account_block,ac1>,<c1,c2,event_account_payinterest,ac1>,<c1,c2,event_account_unblock,ac1>,<c1,c2,event_account_close,ac1>,<c1,c2,event_account_open,ac1>,<c1,c2,event_account_withdraw,ac1>,<c2,c3,event_account_forceclose,ac1>,<c2,c3,event_account_deposit,ac1>,<c2,c3,event_account_block,ac1>,<c2,c3,event_account_payinterest,ac1>,<c2,c3,event_account_unblock,ac1>,<c2,c3,event_account_close,ac1>,<c2,c3,event_account_open,ac1>,<c2,c3,event_account_withdraw,ac1>,<c3,c4,event_account_forceclose,ac1>,<c3,c4,event_account_deposit,ac1>,<c3,c4,event_account_block,ac1>,<c3,c4,event_account_payinterest,ac1>,<c3,c4,event_account_unblock,ac1>,<c3,c4,event_account_close,ac1>,<c3,c4,event_account_open,ac1>,<c3,c4,event_account_withdraw,ac1>,<c4,c5,event_account_forceclose,ac1>,<c4,c5,event_account_deposit,ac1>,<c4,c5,event_account_block,ac1>,<c4,c5,event_account_payinterest,ac1>,<c4,c5,event_account_unblock,ac1>,<c4,c5,event_account_close,ac1>,<c4,c5,event_account_open,ac1>,<c4,c5,event_account_withdraw,ac1>,<c5,c6,event_account_forceclose,ac1>,<c5,c6,event_account_deposit,ac1>,<c5,c6,event_account_block,ac1>,<c5,c6,event_account_payinterest,ac1>,<c5,c6,event_account_unblock,ac1>,<c5,c6,event_account_close,ac1>,<c5,c6,event_account_open,ac1>,<c5,c6,event_account_withdraw,ac1>,<c6,c6,event_account_forceclose,ac1>,<c6,c6,event_account_deposit,ac1>,<c6,c6,event_account_block,ac1>,<c6,c6,event_account_payinterest,ac1>,<c6,c6,event_account_unblock,ac1>,<c6,c6,event_account_close,ac1>,<c6,c6,event_account_open,ac1>,<c6,c6,event_account_withdraw,ac1>,<c6,c5,event_account_forceclose,ac1>,<c6,c5,event_account_deposit,ac1>,<c6,c5,event_account_block,ac1>,<c6,c5,event_account_payinterest,ac1>,<c6,c5,event_account_unblock,ac1>,<c6,c5,event_account_close,ac1>,<c6,c5,event_account_open,ac1>,<c6,c5,event_account_withdraw,ac1>,<c6,c4,event_account_forceclose,ac1>,<c6,c4,event_account_deposit,ac1>,<c6,c4,event_account_block,ac1>,<c6,c4,event_account_payinterest,ac1>,<c6,c4,event_account_unblock,ac1>,<c6,c4,event_account_close,ac1>,<c6,c4,event_account_open,ac1>,<c6,c4,event_account_withdraw,ac1>,<c6,c3,event_account_forceclose,ac1>,<c6,c3,event_account_deposit,ac1>,<c6,c3,event_account_block,ac1>,<c6,c3,event_account_payinterest,ac1>,<c6,c3,event_account_unblock,ac1>,<c6,c3,event_account_close,ac1>,<c6,c3,event_account_open,ac1>,<c6,c3,event_account_withdraw,ac1>,<c6,c2,event_account_forceclose,ac1>,<c6,c2,event_account_deposit,ac1>,<c6,c2,event_account_block,ac1>,<c6,c2,event_account_payinterest,ac1>,<c6,c2,event_account_unblock,ac1>,<c6,c2,event_account_close,ac1>,<c6,c2,event_account_open,ac1>,<c6,c2,event_account_withdraw,ac1>,<c6,c1,event_account_forceclose,ac1>,<c6,c1,event_account_deposit,ac1>,<c6,c1,event_account_block,ac1>,<c6,c1,event_account_payinterest,ac1>,<c6,c1,event_account_unblock,ac1>,<c6,c1,event_account_close,ac1>,<c6,c1,event_account_open,ac1>,<c6,c1,event_account_withdraw,ac1>,<c5,c5,event_account_forceclose,ac1>,<c5,c5,event_account_deposit,ac1>,<c5,c5,event_account_block,ac1>,<c5,c5,event_account_payinterest,ac1>,<c5,c5,event_account_unblock,ac1>,<c5,c5,event_account_close,ac1>,<c5,c5,event_account_open,ac1>,<c5,c5,event_account_withdraw,ac1>,<c5,c4,event_account_forceclose,ac1>,<c5,c4,event_account_deposit,ac1>,<c5,c4,event_account_block,ac1>,<c5,c4,event_account_payinterest,ac1>,<c5,c4,event_account_unblock,ac1>,<c5,c4,event_account_close,ac1>,<c5,c4,event_account_open,ac1>,<c5,c4,event_account_withdraw,ac1>,<c5,c3,event_account_forceclose,ac1>,<c5,c3,event_account_deposit,ac1>,<c5,c3,event_account_block,ac1>,<c5,c3,event_account_payinterest,ac1>,<c5,c3,event_account_unblock,ac1>,<c5,c3,event_account_close,ac1>,<c5,c3,event_account_open,ac1>,<c5,c3,event_account_withdraw,ac1>,<c5,c2,event_account_forceclose,ac1>,<c5,c2,event_account_deposit,ac1>,<c5,c2,event_account_block,ac1>,<c5,c2,event_account_payinterest,ac1>,<c5,c2,event_account_unblock,ac1>,<c5,c2,event_account_close,ac1>,<c5,c2,event_account_open,ac1>,<c5,c2,event_account_withdraw,ac1>,<c5,c1,event_account_forceclose,ac1>,<c5,c1,event_account_deposit,ac1>,<c5,c1,event_account_block,ac1>,<c5,c1,event_account_payinterest,ac1>,<c5,c1,event_account_unblock,ac1>,<c5,c1,event_account_close,ac1>,<c5,c1,event_account_open,ac1>,<c5,c1,event_account_withdraw,ac1>,<c4,c4,event_account_forceclose,ac1>,<c4,c4,event_account_deposit,ac1>,<c4,c4,event_account_block,ac1>,<c4,c4,event_account_payinterest,ac1>,<c4,c4,event_account_unblock,ac1>,<c4,c4,event_account_close,ac1>,<c4,c4,event_account_open,ac1>,<c4,c4,event_account_withdraw,ac1>,<c4,c3,event_account_forceclose,ac1>,<c4,c3,event_account_deposit,ac1>,<c4,c3,event_account_block,ac1>,<c4,c3,event_account_payinterest,ac1>,<c4,c3,event_account_unblock,ac1>,<c4,c3,event_account_close,ac1>,<c4,c3,event_account_open,ac1>,<c4,c3,event_account_withdraw,ac1>,<c4,c2,event_account_forceclose,ac1>,<c4,c2,event_account_deposit,ac1>,<c4,c2,event_account_block,ac1>,<c4,c2,event_account_payinterest,ac1>,<c4,c2,event_account_unblock,ac1>,<c4,c2,event_account_close,ac1>,<c4,c2,event_account_open,ac1>,<c4,c2,event_account_withdraw,ac1>,<c4,c1,event_account_forceclose,ac1>,<c4,c1,event_account_deposit,ac1>,<c4,c1,event_account_block,ac1>,<c4,c1,event_account_payinterest,ac1>,<c4,c1,event_account_unblock,ac1>,<c4,c1,event_account_close,ac1>,<c4,c1,event_account_open,ac1>,<c4,c1,event_account_withdraw,ac1>,<c3,c3,event_account_forceclose,ac1>,<c3,c3,event_account_deposit,ac1>,<c3,c3,event_account_block,ac1>,<c3,c3,event_account_payinterest,ac1>,<c3,c3,event_account_unblock,ac1>,<c3,c3,event_account_close,ac1>,<c3,c3,event_account_open,ac1>,<c3,c3,event_account_withdraw,ac1>,<c3,c2,event_account_forceclose,ac1>,<c3,c2,event_account_deposit,ac1>,<c3,c2,event_account_block,ac1>,<c3,c2,event_account_payinterest,ac1>,<c3,c2,event_account_unblock,ac1>,<c3,c2,event_account_close,ac1>,<c3,c2,event_account_open,ac1>,<c3,c2,event_account_withdraw,ac1>,<c3,c1,event_account_forceclose,ac1>,<c3,c1,event_account_deposit,ac1>,<c3,c1,event_account_block,ac1>,<c3,c1,event_account_payinterest,ac1>,<c3,c1,event_account_unblock,ac1>,<c3,c1,event_account_close,ac1>,<c3,c1,event_account_open,ac1>,<c3,c1,event_account_withdraw,ac1>,<c2,c2,event_account_forceclose,ac1>,<c2,c2,event_account_deposit,ac1>,<c2,c2,event_account_block,ac1>,<c2,c2,event_account_payinterest,ac1>,<c2,c2,event_account_unblock,ac1>,<c2,c2,event_account_close,ac1>,<c2,c2,event_account_open,ac1>,<c2,c2,event_account_withdraw,ac1>,<c2,c1,event_account_forceclose,ac1>,<c2,c1,event_account_deposit,ac1>,<c2,c1,event_account_block,ac1>,<c2,c1,event_account_payinterest,ac1>,<c2,c1,event_account_unblock,ac1>,<c2,c1,event_account_close,ac1>,<c2,c1,event_account_open,ac1>,<c2,c1,event_account_withdraw,ac1>,<c1,c1,event_account_forceclose,ac1>,<c1,c1,event_account_deposit,ac1>,<c1,c1,event_account_block,ac1>,<c1,c1,event_account_payinterest,ac1>,<c1,c1,event_account_unblock,ac1>,<c1,c1,event_account_close,ac1>,<c1,c1,event_account_open,ac1>,<c1,c1,event_account_withdraw,ac1>,<c1,c2,event_account_forceclose,ac2>,<c1,c2,event_account_deposit,ac2>,<c1,c2,event_account_block,ac2>,<c1,c2,event_account_payinterest,ac2>,<c1,c2,event_account_unblock,ac2>,<c1,c2,event_account_close,ac2>,<c1,c2,event_account_open,ac2>,<c1,c2,event_account_withdraw,ac2>,<c2,c3,event_account_forceclose,ac2>,<c2,c3,event_account_deposit,ac2>,<c2,c3,event_account_block,ac2>,<c2,c3,event_account_payinterest,ac2>,<c2,c3,event_account_unblock,ac2>,<c2,c3,event_account_close,ac2>,<c2,c3,event_account_open,ac2>,<c2,c3,event_account_withdraw,ac2>,<c3,c4,event_account_forceclose,ac2>,<c3,c4,event_account_deposit,ac2>,<c3,c4,event_account_block,ac2>,<c3,c4,event_account_payinterest,ac2>,<c3,c4,event_account_unblock,ac2>,<c3,c4,event_account_close,ac2>,<c3,c4,event_account_open,ac2>,<c3,c4,event_account_withdraw,ac2>,<c4,c5,event_account_forceclose,ac2>,<c4,c5,event_account_deposit,ac2>,<c4,c5,event_account_block,ac2>,<c4,c5,event_account_payinterest,ac2>,<c4,c5,event_account_unblock,ac2>,<c4,c5,event_account_close,ac2>,<c4,c5,event_account_open,ac2>,<c4,c5,event_account_withdraw,ac2>,<c5,c6,event_account_forceclose,ac2>,<c5,c6,event_account_deposit,ac2>,<c5,c6,event_account_block,ac2>,<c5,c6,event_account_payinterest,ac2>,<c5,c6,event_account_unblock,ac2>,<c5,c6,event_account_close,ac2>,<c5,c6,event_account_open,ac2>,<c5,c6,event_account_withdraw,ac2>,<c6,c6,event_account_forceclose,ac2>,<c6,c6,event_account_deposit,ac2>,<c6,c6,event_account_block,ac2>,<c6,c6,event_account_payinterest,ac2>,<c6,c6,event_account_unblock,ac2>,<c6,c6,event_account_close,ac2>,<c6,c6,event_account_open,ac2>,<c6,c6,event_account_withdraw,ac2>,<c6,c5,event_account_forceclose,ac2>,<c6,c5,event_account_deposit,ac2>,<c6,c5,event_account_block,ac2>,<c6,c5,event_account_payinterest,ac2>,<c6,c5,event_account_unblock,ac2>,<c6,c5,event_account_close,ac2>,<c6,c5,event_account_open,ac2>,<c6,c5,event_account_withdraw,ac2>,<c6,c4,event_account_forceclose,ac2>,<c6,c4,event_account_deposit,ac2>,<c6,c4,event_account_block,ac2>,<c6,c4,event_account_payinterest,ac2>,<c6,c4,event_account_unblock,ac2>,<c6,c4,event_account_close,ac2>,<c6,c4,event_account_open,ac2>,<c6,c4,event_account_withdraw,ac2>,<c6,c3,event_account_forceclose,ac2>,<c6,c3,event_account_deposit,ac2>,<c6,c3,event_account_block,ac2>,<c6,c3,event_account_payinterest,ac2>,<c6,c3,event_account_unblock,ac2>,<c6,c3,event_account_close,ac2>,<c6,c3,event_account_open,ac2>,<c6,c3,event_account_withdraw,ac2>,<c6,c2,event_account_forceclose,ac2>,<c6,c2,event_account_deposit,ac2>,<c6,c2,event_account_block,ac2>,<c6,c2,event_account_payinterest,ac2>,<c6,c2,event_account_unblock,ac2>,<c6,c2,event_account_close,ac2>,<c6,c2,event_account_open,ac2>,<c6,c2,event_account_withdraw,ac2>,<c6,c1,event_account_forceclose,ac2>,<c6,c1,event_account_deposit,ac2>,<c6,c1,event_account_block,ac2>,<c6,c1,event_account_payinterest,ac2>,<c6,c1,event_account_unblock,ac2>,<c6,c1,event_account_close,ac2>,<c6,c1,event_account_open,ac2>,<c6,c1,event_account_withdraw,ac2>,<c5,c5,event_account_forceclose,ac2>,<c5,c5,event_account_deposit,ac2>,<c5,c5,event_account_block,ac2>,<c5,c5,event_account_payinterest,ac2>,<c5,c5,event_account_unblock,ac2>,<c5,c5,event_account_close,ac2>,<c5,c5,event_account_open,ac2>,<c5,c5,event_account_withdraw,ac2>,<c5,c4,event_account_forceclose,ac2>,<c5,c4,event_account_deposit,ac2>,<c5,c4,event_account_block,ac2>,<c5,c4,event_account_payinterest,ac2>,<c5,c4,event_account_unblock,ac2>,<c5,c4,event_account_close,ac2>,<c5,c4,event_account_open,ac2>,<c5,c4,event_account_withdraw,ac2>,<c5,c3,event_account_forceclose,ac2>,<c5,c3,event_account_deposit,ac2>,<c5,c3,event_account_block,ac2>,<c5,c3,event_account_payinterest,ac2>,<c5,c3,event_account_unblock,ac2>,<c5,c3,event_account_close,ac2>,<c5,c3,event_account_open,ac2>,<c5,c3,event_account_withdraw,ac2>,<c5,c2,event_account_forceclose,ac2>,<c5,c2,event_account_deposit,ac2>,<c5,c2,event_account_block,ac2>,<c5,c2,event_account_payinterest,ac2>,<c5,c2,event_account_unblock,ac2>,<c5,c2,event_account_close,ac2>,<c5,c2,event_account_open,ac2>,<c5,c2,event_account_withdraw,ac2>,<c5,c1,event_account_forceclose,ac2>,<c5,c1,event_account_deposit,ac2>,<c5,c1,event_account_block,ac2>,<c5,c1,event_account_payinterest,ac2>,<c5,c1,event_account_unblock,ac2>,<c5,c1,event_account_close,ac2>,<c5,c1,event_account_open,ac2>,<c5,c1,event_account_withdraw,ac2>,<c4,c4,event_account_forceclose,ac2>,<c4,c4,event_account_deposit,ac2>,<c4,c4,event_account_block,ac2>,<c4,c4,event_account_payinterest,ac2>,<c4,c4,event_account_unblock,ac2>,<c4,c4,event_account_close,ac2>,<c4,c4,event_account_open,ac2>,<c4,c4,event_account_withdraw,ac2>,<c4,c3,event_account_forceclose,ac2>,<c4,c3,event_account_deposit,ac2>,<c4,c3,event_account_block,ac2>,<c4,c3,event_account_payinterest,ac2>,<c4,c3,event_account_unblock,ac2>,<c4,c3,event_account_close,ac2>,<c4,c3,event_account_open,ac2>,<c4,c3,event_account_withdraw,ac2>,<c4,c2,event_account_forceclose,ac2>,<c4,c2,event_account_deposit,ac2>,<c4,c2,event_account_block,ac2>,<c4,c2,event_account_payinterest,ac2>,<c4,c2,event_account_unblock,ac2>,<c4,c2,event_account_close,ac2>,<c4,c2,event_account_open,ac2>,<c4,c2,event_account_withdraw,ac2>,<c4,c1,event_account_forceclose,ac2>,<c4,c1,event_account_deposit,ac2>,<c4,c1,event_account_block,ac2>,<c4,c1,event_account_payinterest,ac2>,<c4,c1,event_account_unblock,ac2>,<c4,c1,event_account_close,ac2>,<c4,c1,event_account_open,ac2>,<c4,c1,event_account_withdraw,ac2>,<c3,c3,event_account_forceclose,ac2>,<c3,c3,event_account_deposit,ac2>,<c3,c3,event_account_block,ac2>,<c3,c3,event_account_payinterest,ac2>,<c3,c3,event_account_unblock,ac2>,<c3,c3,event_account_close,ac2>,<c3,c3,event_account_open,ac2>,<c3,c3,event_account_withdraw,ac2>,<c3,c2,event_account_forceclose,ac2>,<c3,c2,event_account_deposit,ac2>,<c3,c2,event_account_block,ac2>,<c3,c2,event_account_payinterest,ac2>,<c3,c2,event_account_unblock,ac2>,<c3,c2,event_account_close,ac2>,<c3,c2,event_account_open,ac2>,<c3,c2,event_account_withdraw,ac2>,<c3,c1,event_account_forceclose,ac2>,<c3,c1,event_account_deposit,ac2>,<c3,c1,event_account_block,ac2>,<c3,c1,event_account_payinterest,ac2>,<c3,c1,event_account_unblock,ac2>,<c3,c1,event_account_close,ac2>,<c3,c1,event_account_open,ac2>,<c3,c1,event_account_withdraw,ac2>,<c2,c2,event_account_forceclose,ac2>,<c2,c2,event_account_deposit,ac2>,<c2,c2,event_account_block,ac2>,<c2,c2,event_account_payinterest,ac2>,<c2,c2,event_account_unblock,ac2>,<c2,c2,event_account_close,ac2>,<c2,c2,event_account_open,ac2>,<c2,c2,event_account_withdraw,ac2>,<c2,c1,event_account_forceclose,ac2>,<c2,c1,event_account_deposit,ac2>,<c2,c1,event_account_block,ac2>,<c2,c1,event_account_payinterest,ac2>,<c2,c1,event_account_unblock,ac2>,<c2,c1,event_account_close,ac2>,<c2,c1,event_account_open,ac2>,<c2,c1,event_account_withdraw,ac2>,<c1,c1,event_account_forceclose,ac2>,<c1,c1,event_account_deposit,ac2>,<c1,c1,event_account_block,ac2>,<c1,c1,event_account_payinterest,ac2>,<c1,c1,event_account_unblock,ac2>,<c1,c1,event_account_close,ac2>,<c1,c1,event_account_open,ac2>,<c1,c1,event_account_withdraw,ac2>}
changedInstance (cur:id, nxt:id, instance:id) <= {<c1,c2,ac1>,<c1,c2,ac2>,<c1,c2,t>,<c2,c3,ac1>,<c2,c3,ac2>,<c2,c3,t>,<c3,c4,ac1>,<c3,c4,ac2>,<c3,c4,t>,<c4,c5,ac1>,<c4,c5,ac2>,<c4,c5,t>,<c5,c6,ac1>,<c5,c6,ac2>,<c5,c6,t>,<c6,c6,ac1>,<c6,c6,ac2>,<c6,c6,t>,<c6,c5,ac1>,<c6,c5,ac2>,<c6,c5,t>,<c6,c4,ac1>,<c6,c4,ac2>,<c6,c4,t>,<c6,c3,ac1>,<c6,c3,ac2>,<c6,c3,t>,<c6,c2,ac1>,<c6,c2,ac2>,<c6,c2,t>,<c6,c1,ac1>,<c6,c1,ac2>,<c6,c1,t>,<c5,c5,ac1>,<c5,c5,ac2>,<c5,c5,t>,<c5,c4,ac1>,<c5,c4,ac2>,<c5,c4,t>,<c5,c3,ac1>,<c5,c3,ac2>,<c5,c3,t>,<c5,c2,ac1>,<c5,c2,ac2>,<c5,c2,t>,<c5,c1,ac1>,<c5,c1,ac2>,<c5,c1,t>,<c4,c4,ac1>,<c4,c4,ac2>,<c4,c4,t>,<c4,c3,ac1>,<c4,c3,ac2>,<c4,c3,t>,<c4,c2,ac1>,<c4,c2,ac2>,<c4,c2,t>,<c4,c1,ac1>,<c4,c1,ac2>,<c4,c1,t>,<c3,c3,ac1>,<c3,c3,ac2>,<c3,c3,t>,<c3,c2,ac1>,<c3,c2,ac2>,<c3,c2,t>,<c3,c1,ac1>,<c3,c1,ac2>,<c3,c1,t>,<c2,c2,ac1>,<c2,c2,ac2>,<c2,c2,t>,<c2,c1,ac1>,<c2,c1,ac2>,<c2,c1,t>,<c1,c1,ac1>,<c1,c1,ac2>,<c1,c1,t>}

AccountNr (config:id, instance:id, nr:id) <= {<c1,ac1,an1>,<c1,ac1,an2>,<c2,ac1,an1>,<c2,ac1,an2>,<c3,ac1,an1>,<c3,ac1,an2>,<c4,ac1,an1>,<c4,ac1,an2>,<c5,ac1,an1>,<c5,ac1,an2>,<c6,ac1,an1>,<c6,ac1,an2>,<c1,ac2,an1>,<c1,ac2,an2>,<c2,ac2,an1>,<c2,ac2,an2>,<c3,ac2,an1>,<c3,ac2,an2>,<c4,ac2,an1>,<c4,ac2,an2>,<c5,ac2,an1>,<c5,ac2,an2>,<c6,ac2,an1>,<c6,ac2,an2>}
AccountBalance (config:id, instance:id, balance:int) <= {<c1,ac1,?>,<c2,ac1,?>,<c3,ac1,?>,<c4,ac1,?>,<c5,ac1,?>,<c6,ac1,?>,<c1,ac2,?>,<c2,ac2,?>,<c3,ac2,?>,<c4,ac2,?>,<c5,ac2,?>,<c6,ac2,?>}
TransactionFrom (config:id, instance:id, from:id) <= {<c1,t,ac1>,<c1,t,ac2>,<c2,t,ac1>,<c2,t,ac2>,<c3,t,ac1>,<c3,t,ac2>,<c4,t,ac1>,<c4,t,ac2>,<c5,t,ac1>,<c5,t,ac2>,<c6,t,ac1>,<c6,t,ac2>}
TransactionTo (config:id, instance:id, to:id) <= {<c1,t,ac1>,<c1,t,ac2>,<c2,t,ac1>,<c2,t,ac2>,<c3,t,ac1>,<c3,t,ac2>,<c4,t,ac1>,<c4,t,ac2>,<c5,t,ac1>,<c5,t,ac2>,<c6,t,ac1>,<c6,t,ac2>}
TransactionAmount (config:id, instance:id, amount:int) <= {<c1,t,?>,<c2,t,?>,<c3,t,?>,<c4,t,?>,<c5,t,?>,<c6,t,?>}


ParamEventAccountPayInterestRate (cur:id, nxt:id, rate:int) <= {<c1,c2,?>,<c2,c3,?>,<c3,c4,?>,<c4,c5,?>,<c5,c6,?>,<c6,c6,?>,<c6,c5,?>,<c6,c4,?>,<c6,c3,?>,<c6,c2,?>,<c6,c1,?>}
ParamEventAccountOpenNr (cur:id, nxt:id, nr:id) <= {<c1,c2,an1>,<c1,c2,an2>,<c2,c3,an1>,<c2,c3,an2>,<c3,c4,an1>,<c3,c4,an2>,<c4,c5,an1>,<c4,c5,an2>,<c5,c6,an1>,<c5,c6,an2>,<c6,c6,an1>,<c6,c6,an2>,<c6,c5,an1>,<c6,c5,an2>,<c6,c4,an1>,<c6,c4,an2>,<c6,c3,an1>,<c6,c3,an2>,<c6,c2,an1>,<c6,c2,an2>,<c6,c1,an1>,<c6,c1,an2>}
ParamEventAccountWithdrawAmount (cur:id, nxt:id, amount:int) <= {<c1,c2,?>,<c2,c3,?>,<c3,c4,?>,<c4,c5,?>,<c5,c6,?>,<c6,c6,?>,<c6,c5,?>,<c6,c4,?>,<c6,c3,?>,<c6,c2,?>,<c6,c1,?>}
ParamEventAccountDepositAmount (cur:id, nxt:id, amount:int) <= {<c1,c2,?>,<c2,c3,?>,<c3,c4,?>,<c4,c5,?>,<c5,c6,?>,<c6,c6,?>,<c6,c5,?>,<c6,c4,?>,<c6,c3,?>,<c6,c2,?>,<c6,c1,?>}
ParamEventTransactionCreateFrom (cur:id, nxt:id, from:id) <= {<c1,c2,ac1>,<c1,c2,ac2>,<c2,c3,ac1>,<c2,c3,ac2>,<c3,c4,ac1>,<c3,c4,ac2>,<c4,c5,ac1>,<c4,c5,ac2>,<c5,c6,ac1>,<c5,c6,ac2>,<c6,c6,ac1>,<c6,c6,ac2>,<c6,c5,ac1>,<c6,c5,ac2>,<c6,c4,ac1>,<c6,c4,ac2>,<c6,c3,ac1>,<c6,c3,ac2>,<c6,c2,ac1>,<c6,c2,ac2>,<c6,c1,ac1>,<c6,c1,ac2>}
ParamEventTransactionCreateTo (cur:id, nxt:id, to:id) <= {<c1,c2,ac1>,<c1,c2,ac2>,<c2,c3,ac1>,<c2,c3,ac2>,<c3,c4,ac1>,<c3,c4,ac2>,<c4,c5,ac1>,<c4,c5,ac2>,<c5,c6,ac1>,<c5,c6,ac2>,<c6,c6,ac1>,<c6,c6,ac2>,<c6,c5,ac1>,<c6,c5,ac2>,<c6,c4,ac1>,<c6,c4,ac2>,<c6,c3,ac1>,<c6,c3,ac2>,<c6,c2,ac1>,<c6,c2,ac2>,<c6,c1,ac1>,<c6,c1,ac2>}
ParamEventTransactionCreateAmount (cur:id, nxt:id, amount:int) <= {<c1,c2,?>,<c2,c3,?>,<c3,c4,?>,<c4,c5,?>,<c5,c6,?>,<c6,c6,?>,<c6,c5,?>,<c6,c4,?>,<c6,c3,?>,<c6,c2,?>,<c6,c1,?>}
    

// Constraints for the configuration and ordering relations
order ⊆ Config[config as cur] ⨯ Config[config as nxt]
last = Config ∖ order[cur->config]  // There is only one last configuration
back ⊆ Config 
lone back 
some loop  
loop ⊆ last[config as cur] ⨯ back[config as nxt] // Loop contains at most one tuple going back from the last configuration to the 

// Generic 'Type' constraints    
raisedEvent ⊆ (order ∪ loop) ⨯ allowedTransitions[event] ⨯ Instance[instance]
instanceInState ⊆ Instance[instance] ⨯ Config ⨯ State
changedInstance ⊆ (order ∪ loop) ⨯ Instance[instance]
    
// Machine specific `type` constraints
// For `Account`
ParamEventAccountOpenNr ⊆ (order ∪ loop) ⨯ (Instance ⨝ AccountNumber)[instance->nr]
ParamEventAccountDepositAmount[cur,nxt] ⊆ order ∪ loop
ParamEventAccountWithdrawAmount[cur,nxt] ⊆ order ∪ loop
AccountNr  ⊆ Config ⨯ (Instance ⨝ Account)[instance] ⨯ (Instance ⨝ AccountNumber)[instance->nr]
AccountBalance[config,instance]  ⊆ Config ⨯ (Instance ⨝ Account)[instance]
ParamEventAccountPayInterestRate[cur,nxt] ⊆ order ∪ loop
// For `Transaction`
TransactionAmount[config,instance]  ⊆ Config ⨯ (Instance ⨝ Transaction)[instance]
ParamEventTransactionCreateAmount[cur,nxt] ⊆ order ∪ loop
ParamEventTransactionCreateFrom ⊆ (order ∪ loop) ⨯ (Instance ⨝ Account)[instance->from]
ParamEventTransactionCreateTo ⊆ (order ∪ loop) ⨯ (Instance ⨝ Account)[instance->to]
TransactionTo  ⊆ Config ⨯ (Instance ⨝ Transaction)[instance] ⨯ (Instance ⨝ Account)[instance->to]
TransactionFrom  ⊆ Config ⨯ (Instance ⨝ Transaction)[instance] ⨯ (Instance ⨝ Account)[instance->from]


// Specific per event: parameter multiplicity constraints
∀ step ∈ (order ∪ loop) ⨝ raisedEvent | (
  (some (step ⨝ EventTransactionCreate) ⇔ one (step ⨝ ParamEventTransactionCreateAmount)) ∧
  (some (step ⨝ EventAccountWithdraw) ⇔ one (step ⨝ ParamEventAccountWithdrawAmount)) ∧
  (some (step ⨝ EventAccountDeposit) ⇔ one (step ⨝ ParamEventAccountDepositAmount)) ∧
  (some (step ⨝ EventTransactionCreate) ⇔ one (step ⨝ ParamEventTransactionCreateFrom)) ∧
  (some (step ⨝ EventAccountOpen) ⇔ one (step ⨝ ParamEventAccountOpenNr)) ∧
  (some (step ⨝ EventAccountPayInterest) ⇔ one (step ⨝ ParamEventAccountPayInterestRate)) ∧
  (some (step ⨝ EventTransactionCreate) ⇔ one (step ⨝ ParamEventTransactionCreateTo))
)
// Generic: All configurations are reachable
∀ c ∈ Config ∖ first | c ⊆ (first[config as cur] ⨝ ^<cur,nxt>order)[nxt -> config]

// Generic: Every transition can only happen by exactly one event
∀ o ∈ order ∪ loop | one o ⨝ raisedEvent

// Specif: In every configuration all machines have a state IFF its a machine which is not empty
∀ c ∈ Config, inst ∈ (Instance ∖ ((AccountNumber) ⨝ Instance)) | one instanceInState ⨝ c ⨝ inst

// Specific per machine: In every configuration iff a machine is in an initialized state then it must have values
// for `Account`
∀ c ∈ Config, inst ∈ (Instance ⨝ Account)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇔ one AccountBalance ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Account)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇒ one AccountNr ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Account)[instance] | (no (((c ⨯ inst) ⨝ instanceInState)[state] ∩ initialized) ⇒ no AccountNr ⨝ c ⨝ inst)
// for `Transaction`
∀ c ∈ Config, inst ∈ (Instance ⨝ Transaction)[instance] | (no (((c ⨯ inst) ⨝ instanceInState)[state] ∩ initialized) ⇒ no TransactionFrom ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Transaction)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇔ one TransactionAmount ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Transaction)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇒ one TransactionTo ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Transaction)[instance] | (no (((c ⨯ inst) ⨝ instanceInState)[state] ∩ initialized) ⇒ no TransactionTo ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Transaction)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇒ one TransactionFrom ⨝ c ⨝ inst)

// Generic: Transitions are only allowed between if an event is specified between two states
∀ o ∈ (order ∪ loop) ⨝ raisedEvent | (o[cur as config] ⨝ instanceInState)[state->from] ⨯ (o[nxt as config] ⨝ instanceInState)[state->to] ⨯ o[event] ⊆ allowedTransitions

// Change set predicates
pred inChangeSet[step: (cur:id, nxt:id), instances: (instance:id)]
  = instances ⊆ (changedInstance ⨝ step)[instance]
 
pred notInChangeSet[step: (cur:id, nxt:id), instances: (instance:id)]
  = no instances ∩ (changedInstance ⨝ step)[instance]

pred changeSetCanContain[step: (cur:id, nxt:id), instances: (instance:id)]
  = (changedInstance ⨝ step)[instance] ⊆ instances 

// Generic predicates
pred forceState[curState: (state:id), nxtState: (state:id), raisedEvent: (event:id)]
  = nxtState = (curState[state as from] ⨝ (allowedTransitions ⨝ raisedEvent))[to->state]

pred inState[config: (config:id), instance: (instance:id), state: (state:id)]
  = ((instance ⨯ config) ⨝ instanceInState)[state] ⊆ state

// Event predicates for `Account`
pred frameAccount[step: (cur:id, nxt:id), account: (instance:id)] 
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ account)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ account)[state] | (
    nxtState = curState ∧
    (
      curState ⊆ uninitialized ∨ 
      (// Postconditions
       (account ⨝ (AccountNr ⨝ nxt))[nr] = (account ⨝ (AccountNr ⨝ cur))[nr] ∧
       (some ((account ⨝ (AccountBalance ⨝ nxt))[balance][balance as nxt_balance] ⨯ (account ⨝ (AccountBalance ⨝ cur))[balance][balance as cur_balance]) where (nxt_balance = cur_balance)))
    )
  )

pred eventAccountClose[step:(cur:id, nxt:id), account: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ account)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ account)[state] |
    ( 
      // Preconditions 
      (some ((account ⨝ (AccountBalance ⨝ cur))[balance][balance as cur_balance]) where (cur_balance = 0))  ∧ 
       
      // Generic event conditions
      forceState[curState, nxtState, EventAccountClose] ∧
      // Make sure this instance is in the change set
      inChangeSet[step, account]
    )

pred eventAccountForceClose[step:(cur:id, nxt:id), account: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ account)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ account)[state] |
    ( 
       
       
      // Generic event conditions
      forceState[curState, nxtState, EventAccountForceClose] ∧
      // Make sure this instance is in the change set
      inChangeSet[step, account]
    )

pred eventAccountOpen[step:(cur:id, nxt:id), account: (instance:id), nr: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ account)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ account)[state] |
    ( 
       
      // Postconditions
      (account ⨝ (AccountNr ⨝ nxt))[nr] = nr[instance as nr] ∧
      (some ((account ⨝ (AccountBalance ⨝ nxt))[balance][balance as nxt_balance]) where (nxt_balance = 0))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventAccountOpen] ∧
      // Make sure this instance is in the change set
      inChangeSet[step, account]
    )

pred eventAccountWithdraw[step:(cur:id, nxt:id), account: (instance:id), amount: (amount:int)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ account)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ account)[state] |
    ( 
      // Preconditions 
      (some (amount[amount as param_1_amount]) where (param_1_amount > 0)) ∧
      (some ((account ⨝ (AccountBalance ⨝ cur))[balance][balance as cur_balance] ⨯ amount[amount as param_2_amount]) where (cur_balance >= param_2_amount))  ∧ 
      // Postconditions
      (account ⨝ (AccountNr ⨝ nxt))[nr] = (account ⨝ (AccountNr ⨝ cur))[nr] ∧
      (some ((account ⨝ (AccountBalance ⨝ nxt))[balance][balance as nxt_balance] ⨯ (account ⨝ (AccountBalance ⨝ cur))[balance][balance as cur_balance] ⨯ amount[amount as param_3_amount]) where (nxt_balance = cur_balance - param_3_amount))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventAccountWithdraw] ∧
      // Make sure this instance is in the change set
      inChangeSet[step, account]
    )

pred eventAccountPayInterest[step:(cur:id, nxt:id), account: (instance:id), rate: (rate:int)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ account)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ account)[state] |
    ( 
       
      // Postconditions
      (account ⨝ (AccountNr ⨝ nxt))[nr] = (account ⨝ (AccountNr ⨝ cur))[nr] ∧
      (some ((account ⨝ (AccountBalance ⨝ nxt))[balance][balance as nxt_balance] ⨯ rate[rate as param_1_rate] ⨯ (account ⨝ (AccountBalance ⨝ cur))[balance][balance as cur_balance]) where (nxt_balance = cur_balance + ((cur_balance * param_1_rate) / 100)))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventAccountPayInterest] ∧
      // Make sure this instance is in the change set
      inChangeSet[step, account]
    )

pred eventAccountBlock[step:(cur:id, nxt:id), account: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ account)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ account)[state] |
    ( 
       
      // Postconditions
      (some ((account ⨝ (AccountBalance ⨝ nxt))[balance][balance as nxt_balance] ⨯ (account ⨝ (AccountBalance ⨝ cur))[balance][balance as cur_balance]) where (nxt_balance = cur_balance)) ∧
      (account ⨝ (AccountNr ⨝ nxt))[nr] = (account ⨝ (AccountNr ⨝ cur))[nr]  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventAccountBlock] ∧
      // Make sure this instance is in the change set
      inChangeSet[step, account]
    )

pred eventAccountUnblock[step:(cur:id, nxt:id), account: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ account)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ account)[state] |
    ( 
       
      // Postconditions
      (some ((account ⨝ (AccountBalance ⨝ nxt))[balance][balance as nxt_balance] ⨯ (account ⨝ (AccountBalance ⨝ cur))[balance][balance as cur_balance]) where (nxt_balance = cur_balance)) ∧
      (account ⨝ (AccountNr ⨝ nxt))[nr] = (account ⨝ (AccountNr ⨝ cur))[nr]  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventAccountUnblock] ∧
      // Make sure this instance is in the change set
      inChangeSet[step, account]
    )

pred eventAccountDeposit[step:(cur:id, nxt:id), account: (instance:id), amount: (amount:int)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ account)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ account)[state] |
    ( 
      // Preconditions 
      (some (amount[amount as param_1_amount]) where (param_1_amount > 0))  ∧ 
      // Postconditions
      (account ⨝ (AccountNr ⨝ nxt))[nr] = (account ⨝ (AccountNr ⨝ cur))[nr] ∧
      (some ((account ⨝ (AccountBalance ⨝ nxt))[balance][balance as nxt_balance] ⨯ (account ⨝ (AccountBalance ⨝ cur))[balance][balance as cur_balance] ⨯ amount[amount as param_2_amount]) where (nxt_balance = cur_balance + param_2_amount))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventAccountDeposit] ∧
      // Make sure this instance is in the change set
      inChangeSet[step, account]
    )

// Event predicates for `Transaction`
pred eventTransactionCreate[step:(cur:id, nxt:id), transaction: (instance:id), from: (instance:id), to: (instance:id), amount: (amount:int)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ transaction)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ transaction)[state] |
    ( 
      // Preconditions 
      from != to ∧
      inState[cur, from, StateAccountOpened] ∧
      inState[cur, to, StateAccountOpened] ∧
      (some (amount[amount as param_1_amount]) where (param_1_amount > 0))  ∧ 
      // Postconditions
      (transaction ⨝ (TransactionFrom ⨝ nxt))[from] = from[instance as from] ∧
      (transaction ⨝ (TransactionTo ⨝ nxt))[to] = to[instance as to] ∧
      (some ((transaction ⨝ (TransactionAmount ⨝ nxt))[amount][amount as nxt_amount] ⨯ amount[amount as param_2_amount]) where (nxt_amount = param_2_amount))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventTransactionCreate] ∧
      // Make sure this instance is in the change set
      inChangeSet[step, transaction]
    )

pred frameTransaction[step: (cur:id, nxt:id), transaction: (instance:id)] 
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ transaction)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ transaction)[state] | (
    nxtState = curState ∧
    (
      curState ⊆ uninitialized ∨ 
      (// Postconditions
       (transaction ⨝ (TransactionFrom ⨝ nxt))[from] = (transaction ⨝ (TransactionFrom ⨝ cur))[from] ∧
       (transaction ⨝ (TransactionTo ⨝ nxt))[to] = (transaction ⨝ (TransactionTo ⨝ cur))[to] ∧
       (some ((transaction ⨝ (TransactionAmount ⨝ cur))[amount][amount as cur_amount] ⨯ (transaction ⨝ (TransactionAmount ⨝ nxt))[amount][amount as nxt_amount]) where (nxt_amount = cur_amount)))
    )
  )

pred eventTransactionCancel[step:(cur:id, nxt:id), transaction: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ transaction)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ transaction)[state] |
    ( 
       
       
      // Generic event conditions
      forceState[curState, nxtState, EventTransactionCancel] ∧
      // Make sure this instance is in the change set
      inChangeSet[step, transaction]
    )

pred eventTransactionBook[step:(cur:id, nxt:id), transaction: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ transaction)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ transaction)[state] |
    ( 
      // Preconditions 
      eventAccountWithdraw[step, (transaction ⨝ (TransactionFrom ⨝ cur))[from][from as instance], (transaction ⨝ (TransactionAmount ⨝ cur))[amount]] ∧
      eventAccountDeposit[step, (transaction ⨝ (TransactionTo ⨝ cur))[to][to as instance], (transaction ⨝ (TransactionAmount ⨝ cur))[amount]]  ∧ 
       
      // Generic event conditions
      forceState[curState, nxtState, EventTransactionBook] ∧
      // Make sure this instance is in the change set
      inChangeSet[step, transaction]
    )


// Transition function for `Account`
pred possibleTransitionsAccount[step: (cur:id, nxt:id)] 
  = ∀ inst ∈ (Instance ⨝ Account)[instance] |
    (some inst ∩ ((raisedEvent ⨝ step)[instance]) ⇔ (
      (eventAccountPayInterest[step,inst,(step ⨝ ParamEventAccountPayInterestRate)[rate]] ∧
      (step ⨝ raisedEvent)[event] = EventAccountPayInterest ∧
      changeSetCanContain[step, inst])
      ∨
      (eventAccountBlock[step,inst] ∧
      (step ⨝ raisedEvent)[event] = EventAccountBlock ∧
      changeSetCanContain[step, inst])
      ∨
      (eventAccountUnblock[step,inst] ∧
      (step ⨝ raisedEvent)[event] = EventAccountUnblock ∧
      changeSetCanContain[step, inst])
      ∨
      (eventAccountClose[step,inst] ∧
      (step ⨝ raisedEvent)[event] = EventAccountClose ∧
      changeSetCanContain[step, inst])
      ∨
      (eventAccountOpen[step,inst,(step ⨝ ParamEventAccountOpenNr)[nr->instance]] ∧
      (step ⨝ raisedEvent)[event] = EventAccountOpen ∧
      changeSetCanContain[step, inst])
      ∨
      (eventAccountWithdraw[step,inst,(step ⨝ ParamEventAccountWithdrawAmount)[amount]] ∧
      (step ⨝ raisedEvent)[event] = EventAccountWithdraw ∧
      changeSetCanContain[step, inst])
      ∨
      (eventAccountForceClose[step,inst] ∧
      (step ⨝ raisedEvent)[event] = EventAccountForceClose ∧
      changeSetCanContain[step, inst])
      ∨
      (eventAccountDeposit[step,inst,(step ⨝ ParamEventAccountDepositAmount)[amount]] ∧
      (step ⨝ raisedEvent)[event] = EventAccountDeposit ∧
      changeSetCanContain[step, inst])
    ))
    ∧
    (notInChangeSet[step, inst] ⇒ frameAccount[step, inst])

// Transition function for `Transaction`
pred possibleTransitionsTransaction[step: (cur:id, nxt:id)] 
  = ∀ inst ∈ (Instance ⨝ Transaction)[instance] |
    (some inst ∩ ((raisedEvent ⨝ step)[instance]) ⇔ (
      (eventTransactionCancel[step,inst] ∧
      (step ⨝ raisedEvent)[event] = EventTransactionCancel ∧
      changeSetCanContain[step, inst])
      ∨
      (eventTransactionBook[step,inst] ∧
      (step ⨝ raisedEvent)[event] = EventTransactionBook ∧
      let cur = step[cur->config], transaction = inst, transaction_this_from = (transaction ⨝ (TransactionFrom ⨝ cur))[from][from as instance], transaction_this_to = (transaction ⨝ (TransactionTo ⨝ cur))[to][to as instance] | changeSetCanContain[step, inst ∪ transaction_this_from ∪ transaction_this_to ∪ transaction])
      ∨
      (eventTransactionCreate[step,inst,(step ⨝ ParamEventTransactionCreateFrom)[from->instance],(step ⨝ ParamEventTransactionCreateTo)[to->instance],(step ⨝ ParamEventTransactionCreateAmount)[amount]] ∧
      (step ⨝ raisedEvent)[event] = EventTransactionCreate ∧
      changeSetCanContain[step, inst])
    ))
    ∧
    (notInChangeSet[step, inst] ⇒ frameTransaction[step, inst])


// Transition function
∀ step ∈ order ∪ loop| possibleTransitionsAccount[step] ∧ possibleTransitionsTransaction[step]


// Fact from `Account`
∀ cur_1 ∈ Config | let step_1 = cur_1[config as cur] ⨝ (order ∪ loop) | (∀ ac1 ∈ (Instance ⨝ Account)[instance],ac2 ∈ (Instance ⨝ Account)[instance] | (((inState[cur_1, ac1, initialized] ∧ (inState[cur_1, ac2, initialized] ∧ (ac1 ⨝ (AccountNr ⨝ cur_1))[nr] = (ac2 ⨝ (AccountNr ⨝ cur_1))[nr])) ⇒ ac1 = ac2)))

// Assert `TransactionCanGetStuck`
∃ cur_1 ∈ Config | let step_1 = cur_1[config as cur] ⨝ (order ∪ loop) | (∃ t ∈ (Instance ⨝ Transaction)[instance] | (inState[cur_1, t, initialized] ∧ ¬ (((EventTransactionBook ⊆ (raisedEvent ⨝ step_1 ⨝ t)[event])))))
// Minimize the number of steps by minimizing the number of Configurations
objectives: minimize Config[count()]