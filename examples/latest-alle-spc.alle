// Static configuration of state machines
// Define the specs that can take place in the transition system
Follower (spec:id) = {<follower>}
Leader (spec:id) = {<leader>}

// Define all possible states for all machines
State (state:id) = {<state_uninitialized>,<state_finalized>,<state_follower_active>,<state_leader_link>,<state_leader_active>}
initialized (state:id) = {<state_follower_active>,<state_leader_link>,<state_leader_active>}
finalized (state:id) = {<state_finalized>}
uninitialized (state:id) = {<state_uninitialized>}
StateFollowerActive (state:id) = {<state_follower_active>}
StateLeaderActive (state:id) = {<state_leader_active>}StateLeaderLink (state:id) = {<state_leader_link>}

// Define which transitions are allowed (in the form of `from a state` -> ` via an event` -> `to a state`
allowedTransitions (from:id, to:id, event:id) = {<state_follower_active,state_follower_active,event_follower_hit>,<state_uninitialized,state_follower_active,event_follower_start>,<state_uninitialized,state_leader_link,event_leader_start>,<state_leader_link,state_leader_link,event_leader_add>,<state_leader_active,state_leader_active,event_leader_hitall>,<state_leader_link,state_leader_active,event_leader_complete>}
// Define each event as single relation so that the events can be used as variables in the constraints 
EventLeaderAdd (event:id) = {<event_leader_add>}
EventLeader__frame (event:id) = {<event_leader___frame>}
EventFollower__frame (event:id) = {<event_follower___frame>}
EventLeaderStart (event:id) = {<event_leader_start>}
EventFollowerStart (event:id) = {<event_follower_start>}
EventFollowerHit (event:id) = {<event_follower_hit>}
EventLeaderComplete (event:id) = {<event_leader_complete>}
EventLeaderHitAll (event:id) = {<event_leader_hitall>}


// Dynamic configuration of state machines
Config (config:id) >= {<c1>} <= {<c1>,<c2>,<c3>,<c4>,<c5>,<c6>,<c7>,<c8>,<c9>,<c10>}
order (cur:id, nxt:id) <= {<c1,c2>,<c2,c3>,<c3,c4>,<c4,c5>,<c5,c6>,<c6,c7>,<c7,c8>,<c8,c9>,<c9,c10>}
InitialConfig (config:id) = {<c1>}

Instance (spec:id, instance:id) = {<follower,f2>,<follower,f1>,<leader,l1>}
instanceInState (config:id, instance:id, state:id) >= {<c1,f2,state_uninitialized>,<c1,f1,state_uninitialized>,<c1,l1,state_uninitialized>}<= {<c1,l1,state_leader_link>,<c1,l1,state_uninitialized>,<c1,l1,state_leader_active>,<c1,l1,state_finalized>,<c1,f1,state_uninitialized>,<c1,f1,state_finalized>,<c1,f1,state_follower_active>,<c1,f2,state_uninitialized>,<c1,f2,state_finalized>,<c1,f2,state_follower_active>,<c2,l1,state_leader_link>,<c2,l1,state_uninitialized>,<c2,l1,state_leader_active>,<c2,l1,state_finalized>,<c2,f1,state_uninitialized>,<c2,f1,state_finalized>,<c2,f1,state_follower_active>,<c2,f2,state_uninitialized>,<c2,f2,state_finalized>,<c2,f2,state_follower_active>,<c3,l1,state_leader_link>,<c3,l1,state_uninitialized>,<c3,l1,state_leader_active>,<c3,l1,state_finalized>,<c3,f1,state_uninitialized>,<c3,f1,state_finalized>,<c3,f1,state_follower_active>,<c3,f2,state_uninitialized>,<c3,f2,state_finalized>,<c3,f2,state_follower_active>,<c4,l1,state_leader_link>,<c4,l1,state_uninitialized>,<c4,l1,state_leader_active>,<c4,l1,state_finalized>,<c4,f1,state_uninitialized>,<c4,f1,state_finalized>,<c4,f1,state_follower_active>,<c4,f2,state_uninitialized>,<c4,f2,state_finalized>,<c4,f2,state_follower_active>,<c5,l1,state_leader_link>,<c5,l1,state_uninitialized>,<c5,l1,state_leader_active>,<c5,l1,state_finalized>,<c5,f1,state_uninitialized>,<c5,f1,state_finalized>,<c5,f1,state_follower_active>,<c5,f2,state_uninitialized>,<c5,f2,state_finalized>,<c5,f2,state_follower_active>,<c6,l1,state_leader_link>,<c6,l1,state_uninitialized>,<c6,l1,state_leader_active>,<c6,l1,state_finalized>,<c6,f1,state_uninitialized>,<c6,f1,state_finalized>,<c6,f1,state_follower_active>,<c6,f2,state_uninitialized>,<c6,f2,state_finalized>,<c6,f2,state_follower_active>,<c7,l1,state_leader_link>,<c7,l1,state_uninitialized>,<c7,l1,state_leader_active>,<c7,l1,state_finalized>,<c7,f1,state_uninitialized>,<c7,f1,state_finalized>,<c7,f1,state_follower_active>,<c7,f2,state_uninitialized>,<c7,f2,state_finalized>,<c7,f2,state_follower_active>,<c8,l1,state_leader_link>,<c8,l1,state_uninitialized>,<c8,l1,state_leader_active>,<c8,l1,state_finalized>,<c8,f1,state_uninitialized>,<c8,f1,state_finalized>,<c8,f1,state_follower_active>,<c8,f2,state_uninitialized>,<c8,f2,state_finalized>,<c8,f2,state_follower_active>,<c9,l1,state_leader_link>,<c9,l1,state_uninitialized>,<c9,l1,state_leader_active>,<c9,l1,state_finalized>,<c9,f1,state_uninitialized>,<c9,f1,state_finalized>,<c9,f1,state_follower_active>,<c9,f2,state_uninitialized>,<c9,f2,state_finalized>,<c9,f2,state_follower_active>,<c10,l1,state_leader_link>,<c10,l1,state_uninitialized>,<c10,l1,state_leader_active>,<c10,l1,state_finalized>,<c10,f1,state_uninitialized>,<c10,f1,state_finalized>,<c10,f1,state_follower_active>,<c10,f2,state_uninitialized>,<c10,f2,state_finalized>,<c10,f2,state_follower_active>}
raisedEvent (cur:id, nxt:id, event:id, instance:id) <= {<c1,c2,event_leader_complete,l1>,<c1,c2,event_leader_add,l1>,<c1,c2,event_leader_start,l1>,<c1,c2,event_leader___frame,l1>,<c1,c2,event_leader_hitall,l1>,<c2,c3,event_leader_complete,l1>,<c2,c3,event_leader_add,l1>,<c2,c3,event_leader_start,l1>,<c2,c3,event_leader___frame,l1>,<c2,c3,event_leader_hitall,l1>,<c3,c4,event_leader_complete,l1>,<c3,c4,event_leader_add,l1>,<c3,c4,event_leader_start,l1>,<c3,c4,event_leader___frame,l1>,<c3,c4,event_leader_hitall,l1>,<c4,c5,event_leader_complete,l1>,<c4,c5,event_leader_add,l1>,<c4,c5,event_leader_start,l1>,<c4,c5,event_leader___frame,l1>,<c4,c5,event_leader_hitall,l1>,<c5,c6,event_leader_complete,l1>,<c5,c6,event_leader_add,l1>,<c5,c6,event_leader_start,l1>,<c5,c6,event_leader___frame,l1>,<c5,c6,event_leader_hitall,l1>,<c6,c7,event_leader_complete,l1>,<c6,c7,event_leader_add,l1>,<c6,c7,event_leader_start,l1>,<c6,c7,event_leader___frame,l1>,<c6,c7,event_leader_hitall,l1>,<c7,c8,event_leader_complete,l1>,<c7,c8,event_leader_add,l1>,<c7,c8,event_leader_start,l1>,<c7,c8,event_leader___frame,l1>,<c7,c8,event_leader_hitall,l1>,<c8,c9,event_leader_complete,l1>,<c8,c9,event_leader_add,l1>,<c8,c9,event_leader_start,l1>,<c8,c9,event_leader___frame,l1>,<c8,c9,event_leader_hitall,l1>,<c9,c10,event_leader_complete,l1>,<c9,c10,event_leader_add,l1>,<c9,c10,event_leader_start,l1>,<c9,c10,event_leader___frame,l1>,<c9,c10,event_leader_hitall,l1>,<c1,c2,event_follower_start,f1>,<c1,c2,event_follower___frame,f1>,<c1,c2,event_follower_hit,f1>,<c2,c3,event_follower_start,f1>,<c2,c3,event_follower___frame,f1>,<c2,c3,event_follower_hit,f1>,<c3,c4,event_follower_start,f1>,<c3,c4,event_follower___frame,f1>,<c3,c4,event_follower_hit,f1>,<c4,c5,event_follower_start,f1>,<c4,c5,event_follower___frame,f1>,<c4,c5,event_follower_hit,f1>,<c5,c6,event_follower_start,f1>,<c5,c6,event_follower___frame,f1>,<c5,c6,event_follower_hit,f1>,<c6,c7,event_follower_start,f1>,<c6,c7,event_follower___frame,f1>,<c6,c7,event_follower_hit,f1>,<c7,c8,event_follower_start,f1>,<c7,c8,event_follower___frame,f1>,<c7,c8,event_follower_hit,f1>,<c8,c9,event_follower_start,f1>,<c8,c9,event_follower___frame,f1>,<c8,c9,event_follower_hit,f1>,<c9,c10,event_follower_start,f1>,<c9,c10,event_follower___frame,f1>,<c9,c10,event_follower_hit,f1>,<c1,c2,event_follower_start,f2>,<c1,c2,event_follower___frame,f2>,<c1,c2,event_follower_hit,f2>,<c2,c3,event_follower_start,f2>,<c2,c3,event_follower___frame,f2>,<c2,c3,event_follower_hit,f2>,<c3,c4,event_follower_start,f2>,<c3,c4,event_follower___frame,f2>,<c3,c4,event_follower_hit,f2>,<c4,c5,event_follower_start,f2>,<c4,c5,event_follower___frame,f2>,<c4,c5,event_follower_hit,f2>,<c5,c6,event_follower_start,f2>,<c5,c6,event_follower___frame,f2>,<c5,c6,event_follower_hit,f2>,<c6,c7,event_follower_start,f2>,<c6,c7,event_follower___frame,f2>,<c6,c7,event_follower_hit,f2>,<c7,c8,event_follower_start,f2>,<c7,c8,event_follower___frame,f2>,<c7,c8,event_follower_hit,f2>,<c8,c9,event_follower_start,f2>,<c8,c9,event_follower___frame,f2>,<c8,c9,event_follower_hit,f2>,<c9,c10,event_follower_start,f2>,<c9,c10,event_follower___frame,f2>,<c9,c10,event_follower_hit,f2>}
changedInstance (cur:id, nxt:id, instance:id) <= {<c1,c2,l1>,<c1,c2,f1>,<c1,c2,f2>,<c2,c3,l1>,<c2,c3,f1>,<c2,c3,f2>,<c3,c4,l1>,<c3,c4,f1>,<c3,c4,f2>,<c4,c5,l1>,<c4,c5,f1>,<c4,c5,f2>,<c5,c6,l1>,<c5,c6,f1>,<c5,c6,f2>,<c6,c7,l1>,<c6,c7,f1>,<c6,c7,f2>,<c7,c8,l1>,<c7,c8,f1>,<c7,c8,f2>,<c8,c9,l1>,<c8,c9,f1>,<c8,c9,f2>,<c9,c10,l1>,<c9,c10,f1>,<c9,c10,f2>}

FollowerNrOfHits (config:id, instance:id, nrOfHits:int) <= {<c1,f1,?>,<c2,f1,?>,<c3,f1,?>,<c4,f1,?>,<c5,f1,?>,<c6,f1,?>,<c7,f1,?>,<c8,f1,?>,<c9,f1,?>,<c10,f1,?>,<c1,f2,?>,<c2,f2,?>,<c3,f2,?>,<c4,f2,?>,<c5,f2,?>,<c6,f2,?>,<c7,f2,?>,<c8,f2,?>,<c9,f2,?>,<c10,f2,?>}
LeaderFollowers (config:id, instance:id, followers:id) <= {<c1,l1,f1>,<c1,l1,f2>,<c2,l1,f1>,<c2,l1,f2>,<c3,l1,f1>,<c3,l1,f2>,<c4,l1,f1>,<c4,l1,f2>,<c5,l1,f1>,<c5,l1,f2>,<c6,l1,f1>,<c6,l1,f2>,<c7,l1,f1>,<c7,l1,f2>,<c8,l1,f1>,<c8,l1,f2>,<c9,l1,f1>,<c9,l1,f2>,<c10,l1,f1>,<c10,l1,f2>}
LeaderNrOfHits (config:id, instance:id, nrOfHits:int) <= {<c1,l1,?>,<c2,l1,?>,<c3,l1,?>,<c4,l1,?>,<c5,l1,?>,<c6,l1,?>,<c7,l1,?>,<c8,l1,?>,<c9,l1,?>,<c10,l1,?>}

ParamEventLeaderAddFollower (cur:id, nxt:id, follower:id) <= {<c1,c2,f1>,<c1,c2,f2>,<c2,c3,f1>,<c2,c3,f2>,<c3,c4,f1>,<c3,c4,f2>,<c4,c5,f1>,<c4,c5,f2>,<c5,c6,f1>,<c5,c6,f2>,<c6,c7,f1>,<c6,c7,f2>,<c7,c8,f1>,<c7,c8,f2>,<c8,c9,f1>,<c8,c9,f2>,<c9,c10,f1>,<c9,c10,f2>}

// Generic 'Type' constraints
order ⊆ Config[config as cur] ⨯ Config[config as nxt]
raisedEvent ⊆ order ⨯ allowedTransitions[event] ⨯ Instance[instance]
instanceInState ⊆ Instance[instance] ⨯ Config ⨯ State
changedInstance ⊆ order ⨯ Instance[instance]
    
// Machine specific `type` constraints
FollowerNrOfHits[config,instance]  ⊆ Config ⨯ (Instance ⨝ Follower)[instance]
LeaderFollowers  ⊆ Config ⨯ (Instance ⨝ Leader)[instance] ⨯ (Instance ⨝ Follower)[instance->followers]
LeaderNrOfHits[config,instance]  ⊆ Config ⨯ (Instance ⨝ Leader)[instance]

ParamEventLeaderAddFollower ⊆ order ⨯ (Instance ⨝ Follower)[instance->follower]

// Specific per event
∀ step ∈ order ⨝ raisedEvent | (
  (some (step ⨝ EventLeaderAdd) ⇔ one (step ⨝ ParamEventLeaderAddFollower))
)

// Generic: All configurations are reachable
∀ c ∈ Config ∖ InitialConfig | c ⊆ (InitialConfig[config as cur] ⨝ ^<cur,nxt>order)[nxt -> config]

// Generic: Every transition can only happen by exactly one event
∀ o ∈ order | one o ⨝ raisedEvent

// Generic: In every configuration all machines have a state
∀ c ∈ Config, inst ∈ Instance | one instanceInState ⨝ c ⨝ inst

// Specific per machine: In every configuration iff a machine is in an initialized state then it must have values
∀ c ∈ Config, inst ∈ (Instance ⨝ Follower)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇔ one FollowerNrOfHits ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Leader)[instance] | (no (((c ⨯ inst) ⨝ instanceInState)[state] ∩ initialized) ⇒ no LeaderFollowers ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Leader)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇔ one LeaderNrOfHits ⨝ c ⨝ inst)


// Generic: Transitions are only allowed between if an event is specified between two states
∀ o ∈ order ⨝ raisedEvent | (o[cur as config] ⨝ instanceInState)[state->from] ⨯ (o[nxt as config] ⨝ instanceInState)[state->to] ⨯ o[event] ⊆ allowedTransitions

// Generic predicates
pred forceState[curState: (state:id), nxtState: (state:id), raisedEvent: (event:id)]
  = nxtState = (curState[state as from] ⨝ (allowedTransitions ⨝ raisedEvent))[to->state]

pred inState[config: (config:id), instance: (instance:id), state: (state:id)]
  = ((instance ⨯ config) ⨝ instanceInState)[state] ⊆ state

pred frameFollower[step: (cur:id, nxt:id), follower: (instance:id)] 
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ follower)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ follower)[state],
        curNrOfHits = (cur ⨝ FollowerNrOfHits ⨝ follower)[nrOfHits->curNrOfHits],
        nxtNrOfHits = (nxt ⨝ FollowerNrOfHits ⨝ follower)[nrOfHits->nxtNrOfHits] | (
    nxtState = curState ∧
    (
      curState ⊆ uninitialized ∨ 
      (// Postconditions
       (some (nxtNrOfHits ⨯ curNrOfHits) where (nxtNrOfHits = curNrOfHits)))
    )
  )

pred eventFollowerHit[step:(cur:id, nxt:id), follower: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ follower)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ follower)[state],
        curNrOfHits = (cur ⨝ FollowerNrOfHits ⨝ follower)[nrOfHits->curNrOfHits],
        nxtNrOfHits = (nxt ⨝ FollowerNrOfHits ⨝ follower)[nrOfHits->nxtNrOfHits] |
    ( 
       
      // Postconditions
      (some (nxtNrOfHits ⨯ curNrOfHits) where (nxtNrOfHits = curNrOfHits + 1))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventFollowerHit] ∧
      // Make sure this instance is in the change set
      follower ⊆ (changedInstance ⨝ step)[instance]
    )

pred eventFollowerStart[step:(cur:id, nxt:id), follower: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ follower)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ follower)[state],
        curNrOfHits = (cur ⨝ FollowerNrOfHits ⨝ follower)[nrOfHits->curNrOfHits],
        nxtNrOfHits = (nxt ⨝ FollowerNrOfHits ⨝ follower)[nrOfHits->nxtNrOfHits] |
    ( 
       
      // Postconditions
      (some (nxtNrOfHits) where (nxtNrOfHits = 0))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventFollowerStart] ∧
      // Make sure this instance is in the change set
      follower ⊆ (changedInstance ⨝ step)[instance]
    )


pred possibleTransitionsFollower[step: (cur:id, nxt:id)] 
  = ∀ inst ∈ (Instance ⨝ Follower)[instance] |
    (some inst ∩ ((raisedEvent ⨝ step)[instance]) ⇔ (
      (eventFollowerHit[step,inst] ∧
      (step ⨝ raisedEvent)[event] = EventFollowerHit ∧
      (changedInstance ⨝ step)[instance] ⊆ inst)
      ∨
      (eventFollowerStart[step,inst] ∧
      (step ⨝ raisedEvent)[event] = EventFollowerStart ∧
      (changedInstance ⨝ step)[instance] ⊆ inst)
    ))
    ∧
    (no inst ∩ (changedInstance ⨝ step)[instance] ⇔ frameFollower[step, inst])

pred eventLeaderComplete[step:(cur:id, nxt:id), leader: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ leader)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ leader)[state],
        curFollowers = (cur ⨝ LeaderFollowers ⨝ leader)[followers],
        nxtFollowers = (nxt ⨝ LeaderFollowers ⨝ leader)[followers],
        curNrOfHits = (cur ⨝ LeaderNrOfHits ⨝ leader)[nrOfHits->curNrOfHits],
        nxtNrOfHits = (nxt ⨝ LeaderNrOfHits ⨝ leader)[nrOfHits->nxtNrOfHits] |
    ( 
       
      // Postconditions
      (some (nxtNrOfHits ⨯ curNrOfHits) where (nxtNrOfHits = curNrOfHits)) ∧
      nxtFollowers[followers] = curFollowers[followers]  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventLeaderComplete] ∧
      // Make sure this instance is in the change set
      leader ⊆ (changedInstance ⨝ step)[instance]
    )

pred eventLeaderHitAll[step:(cur:id, nxt:id), leader: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ leader)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ leader)[state],
        curFollowers = (cur ⨝ LeaderFollowers ⨝ leader)[followers],
        nxtFollowers = (nxt ⨝ LeaderFollowers ⨝ leader)[followers],
        curNrOfHits = (cur ⨝ LeaderNrOfHits ⨝ leader)[nrOfHits->curNrOfHits],
        nxtNrOfHits = (nxt ⨝ LeaderNrOfHits ⨝ leader)[nrOfHits->nxtNrOfHits] |
    ( 
      // Preconditions 
      (forall f:curFollowers[followers][followers as f] | eventFollowerHit[step, f[f as instance]])  ∧ 
      // Postconditions
      nxtFollowers[followers] = curFollowers[followers] ∧
      (some (nxtNrOfHits ⨯ curNrOfHits) where (nxtNrOfHits = curNrOfHits + 1))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventLeaderHitAll] ∧
      // Make sure this instance is in the change set
      leader ⊆ (changedInstance ⨝ step)[instance]
    )

pred frameLeader[step: (cur:id, nxt:id), leader: (instance:id)] 
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ leader)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ leader)[state],
        curFollowers = (cur ⨝ LeaderFollowers ⨝ leader)[followers],
        nxtFollowers = (nxt ⨝ LeaderFollowers ⨝ leader)[followers],
        curNrOfHits = (cur ⨝ LeaderNrOfHits ⨝ leader)[nrOfHits->curNrOfHits],
        nxtNrOfHits = (nxt ⨝ LeaderNrOfHits ⨝ leader)[nrOfHits->nxtNrOfHits] | (
    nxtState = curState ∧
    (
      curState ⊆ uninitialized ∨ 
      (// Postconditions
       nxtFollowers[followers] = curFollowers[followers] ∧
       (some (nxtNrOfHits ⨯ curNrOfHits) where (nxtNrOfHits = curNrOfHits)))
    )
  )

pred eventLeaderStart[step:(cur:id, nxt:id), leader: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ leader)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ leader)[state],
        curFollowers = (cur ⨝ LeaderFollowers ⨝ leader)[followers],
        nxtFollowers = (nxt ⨝ LeaderFollowers ⨝ leader)[followers],
        curNrOfHits = (cur ⨝ LeaderNrOfHits ⨝ leader)[nrOfHits->curNrOfHits],
        nxtNrOfHits = (nxt ⨝ LeaderNrOfHits ⨝ leader)[nrOfHits->nxtNrOfHits] |
    ( 
       
      // Postconditions
      (some (nxtNrOfHits) where (nxtNrOfHits = 0)) ∧
      no nxtFollowers[followers]  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventLeaderStart] ∧
      // Make sure this instance is in the change set
      leader ⊆ (changedInstance ⨝ step)[instance]
    )

pred eventLeaderAdd[step:(cur:id, nxt:id), leader: (instance:id), follower: (follower:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ leader)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ leader)[state],
        curFollowers = (cur ⨝ LeaderFollowers ⨝ leader)[followers],
        nxtFollowers = (nxt ⨝ LeaderFollowers ⨝ leader)[followers],
        curNrOfHits = (cur ⨝ LeaderNrOfHits ⨝ leader)[nrOfHits->curNrOfHits],
        nxtNrOfHits = (nxt ⨝ LeaderNrOfHits ⨝ leader)[nrOfHits->nxtNrOfHits] |
    ( 
      // Preconditions 
      inState[cur, follower[follower->instance], initialized]  ∧ 
      // Postconditions
      (some (nxtNrOfHits ⨯ curNrOfHits) where (nxtNrOfHits = curNrOfHits)) ∧
      nxtFollowers[followers] = curFollowers[followers] + (follower[follower as followers])  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventLeaderAdd] ∧
      // Make sure this instance is in the change set
      leader ⊆ (changedInstance ⨝ step)[instance]
    )


pred possibleTransitionsLeader[step: (cur:id, nxt:id)] 
  = ∀ inst ∈ (Instance ⨝ Leader)[instance] |
    (some inst ∩ ((raisedEvent ⨝ step)[instance]) ⇔ (
      (eventLeaderComplete[step,inst] ∧
      (step ⨝ raisedEvent)[event] = EventLeaderComplete ∧
      (changedInstance ⨝ step)[instance] ⊆ inst)
      ∨
      (eventLeaderHitAll[step,inst] ∧
      (step ⨝ raisedEvent)[event] = EventLeaderHitAll ∧
      let cur = step[cur->config], followers = (LeaderFollowers |x| cur |x| inst)[followers->instance] | (changedInstance ⨝ step)[instance] ⊆ inst ∪ followers)
      ∨
      (eventLeaderStart[step,inst] ∧
      (step ⨝ raisedEvent)[event] = EventLeaderStart ∧
      (changedInstance ⨝ step)[instance] ⊆ inst)
      ∨
      (eventLeaderAdd[step,inst,(step ⨝ ParamEventLeaderAddFollower)[follower]] ∧
      (step ⨝ raisedEvent)[event] = EventLeaderAdd ∧
      (changedInstance ⨝ step)[instance] ⊆ inst)
    ))
    ∧
    (no inst ∩ (changedInstance ⨝ step)[instance] ⇔ frameLeader[step, inst])


// Transition function
∀ step ∈ order | possibleTransitionsFollower[step] ∧ possibleTransitionsLeader[step]

// Asserts: this is where the checks get added
∃ c ∈ Config, l ∈ (Instance ⨝ Leader)[instance] | ((some (LeaderFollowers ⨝ c ⨝ l)[count() as nr] where nr = 2) && (instanceInState |x| l |x| c)[state] in StateLeaderActive)
∃ c ∈ Config | (some (c |x| LeaderNrOfHits) where nrOfHits = 2)

// Minimize the number of steps by minimizing the number of Configurations
objectives: minimize Config[count()]
