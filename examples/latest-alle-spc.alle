// Static configuration of state machines
// Define the specs that can take place in the transition system
Follower (spec:id) = {<follower>}
Leader (spec:id) = {<leader>}

// Define all possible states for all machines
State (state:id) = {<state_uninitialized>,<state_finalized>,<state_follower_active>,<state_leader_active>}
initialized (state:id) = {<state_follower_active>,<state_leader_active>}
finalized (state:id) = {<state_finalized>}
uninitialized (state:id) = {<state_uninitialized>}
StateFollowerActive (state:id) = {<state_follower_active>}
StateLeaderActive (state:id) = {<state_leader_active>}

// Define which transitions are allowed (in the form of `from a state` -> ` via an event` -> `to a state`
allowedTransitions (from:id, to:id, event:id) = {<state_follower_active,state_follower_active,event_follower_hit>,<state_uninitialized,state_follower_active,event_follower_start>,<state_uninitialized,state_leader_active,event_leader_start>,<state_leader_active,state_leader_active,event_leader_hit>}
// Define each event as single relation so that the events can be used as variables in the constraints 
EventLeader__frame (event:id) = {<event_leader___frame>}
EventFollower__frame (event:id) = {<event_follower___frame>}
EventLeaderStart (event:id) = {<event_leader_start>}
EventFollowerStart (event:id) = {<event_follower_start>}
EventLeaderHit (event:id) = {<event_leader_hit>}
EventFollowerHit (event:id) = {<event_follower_hit>}

// Dynamic configuration of state machines
Config (config:id) >= {<c1>} <= {<c1>,<c2>,<c3>,<c4>,<c5>,<c6>}
order (cur:id, nxt:id) <= {<c1,c2>,<c2,c3>,<c3,c4>,<c4,c5>,<c5,c6>}
InitialConfig (config:id) = {<c1>}

Instance (spec:id, instance:id) = {<leader,l1>,<follower,f2>,<follower,f1>}
instanceInState (config:id, instance:id, state:id) >= {<c1,l1,state_uninitialized>,<c1,f2,state_uninitialized>,<c1,f1,state_uninitialized>}<= {<c1,l1,state_uninitialized>,<c1,l1,state_leader_active>,<c1,l1,state_finalized>,<c1,f1,state_uninitialized>,<c1,f1,state_finalized>,<c1,f1,state_follower_active>,<c1,f2,state_uninitialized>,<c1,f2,state_finalized>,<c1,f2,state_follower_active>,<c2,l1,state_uninitialized>,<c2,l1,state_leader_active>,<c2,l1,state_finalized>,<c2,f1,state_uninitialized>,<c2,f1,state_finalized>,<c2,f1,state_follower_active>,<c2,f2,state_uninitialized>,<c2,f2,state_finalized>,<c2,f2,state_follower_active>,<c3,l1,state_uninitialized>,<c3,l1,state_leader_active>,<c3,l1,state_finalized>,<c3,f1,state_uninitialized>,<c3,f1,state_finalized>,<c3,f1,state_follower_active>,<c3,f2,state_uninitialized>,<c3,f2,state_finalized>,<c3,f2,state_follower_active>,<c4,l1,state_uninitialized>,<c4,l1,state_leader_active>,<c4,l1,state_finalized>,<c4,f1,state_uninitialized>,<c4,f1,state_finalized>,<c4,f1,state_follower_active>,<c4,f2,state_uninitialized>,<c4,f2,state_finalized>,<c4,f2,state_follower_active>,<c5,l1,state_uninitialized>,<c5,l1,state_leader_active>,<c5,l1,state_finalized>,<c5,f1,state_uninitialized>,<c5,f1,state_finalized>,<c5,f1,state_follower_active>,<c5,f2,state_uninitialized>,<c5,f2,state_finalized>,<c5,f2,state_follower_active>,<c6,l1,state_uninitialized>,<c6,l1,state_leader_active>,<c6,l1,state_finalized>,<c6,f1,state_uninitialized>,<c6,f1,state_finalized>,<c6,f1,state_follower_active>,<c6,f2,state_uninitialized>,<c6,f2,state_finalized>,<c6,f2,state_follower_active>}
raisedEvent (cur:id, nxt:id, event:id, instance:id) <= {<c1,c2,event_leader_hit,l1>,<c1,c2,event_leader_start,l1>,<c1,c2,event_leader___frame,l1>,<c2,c3,event_leader_hit,l1>,<c2,c3,event_leader_start,l1>,<c2,c3,event_leader___frame,l1>,<c3,c4,event_leader_hit,l1>,<c3,c4,event_leader_start,l1>,<c3,c4,event_leader___frame,l1>,<c4,c5,event_leader_hit,l1>,<c4,c5,event_leader_start,l1>,<c4,c5,event_leader___frame,l1>,<c5,c6,event_leader_hit,l1>,<c5,c6,event_leader_start,l1>,<c5,c6,event_leader___frame,l1>,<c1,c2,event_follower_start,f1>,<c1,c2,event_follower___frame,f1>,<c1,c2,event_follower_hit,f1>,<c2,c3,event_follower_start,f1>,<c2,c3,event_follower___frame,f1>,<c2,c3,event_follower_hit,f1>,<c3,c4,event_follower_start,f1>,<c3,c4,event_follower___frame,f1>,<c3,c4,event_follower_hit,f1>,<c4,c5,event_follower_start,f1>,<c4,c5,event_follower___frame,f1>,<c4,c5,event_follower_hit,f1>,<c5,c6,event_follower_start,f1>,<c5,c6,event_follower___frame,f1>,<c5,c6,event_follower_hit,f1>,<c1,c2,event_follower_start,f2>,<c1,c2,event_follower___frame,f2>,<c1,c2,event_follower_hit,f2>,<c2,c3,event_follower_start,f2>,<c2,c3,event_follower___frame,f2>,<c2,c3,event_follower_hit,f2>,<c3,c4,event_follower_start,f2>,<c3,c4,event_follower___frame,f2>,<c3,c4,event_follower_hit,f2>,<c4,c5,event_follower_start,f2>,<c4,c5,event_follower___frame,f2>,<c4,c5,event_follower_hit,f2>,<c5,c6,event_follower_start,f2>,<c5,c6,event_follower___frame,f2>,<c5,c6,event_follower_hit,f2>}
changedInstance (cur:id, nxt:id, instance:id) <= {<c1,c2,l1>,<c1,c2,f1>,<c1,c2,f2>,<c2,c3,l1>,<c2,c3,f1>,<c2,c3,f2>,<c3,c4,l1>,<c3,c4,f1>,<c3,c4,f2>,<c4,c5,l1>,<c4,c5,f1>,<c4,c5,f2>,<c5,c6,l1>,<c5,c6,f1>,<c5,c6,f2>}

SVFollowerOnePrims (config:id, instance:id, times:int) <= {<c1,f1,?>,<c1,f2,?>,<c2,f1,?>,<c2,f2,?>,<c3,f1,?>,<c3,f2,?>,<c4,f1,?>,<c4,f2,?>,<c5,f1,?>,<c5,f2,?>,<c6,f1,?>,<c6,f2,?>}

SVLeaderOnePrims (config:id, instance:id, times:int) <= {<c1,l1,?>,<c2,l1,?>,<c3,l1,?>,<c4,l1,?>,<c5,l1,?>,<c6,l1,?>}
SVLeaderFollower (config:id, instance:id, follower:id) <= {<c1,l1,f1>,<c1,l1,f2>,<c2,l1,f1>,<c2,l1,f2>,<c3,l1,f1>,<c3,l1,f2>,<c4,l1,f1>,<c4,l1,f2>,<c5,l1,f1>,<c5,l1,f2>,<c6,l1,f1>,<c6,l1,f2>}

ParamsEventFollowerHitPrimitives (cur:id, nxt:id, times:int) <= {<c1,c2,?>,<c2,c3,?>,<c3,c4,?>,<c4,c5,?>,<c5,c6,?>}
ParamsEventLeaderHitPrimitives (cur:id, nxt:id, times:int) <= {<c1,c2,?>,<c2,c3,?>,<c3,c4,?>,<c4,c5,?>,<c5,c6,?>}
ParamsEventLeaderStartFollower (cur:id, nxt:id, follower:id) <= {<c1,c2,f1>,<c1,c2,f2>,<c2,c3,f1>,<c2,c3,f2>,<c3,c4,f1>,<c3,c4,f2>,<c4,c5,f1>,<c4,c5,f2>,<c5,c6,f1>,<c5,c6,f2>,<c6,c7,f1>,<c6,c7,f2>}

// Generic 'Type' constraints
order ⊆ Config[config as cur] ⨯ Config[config as nxt]
raisedEvent ⊆ order ⨯ allowedTransitions[event] ⨯ Instance[instance]
instanceInState ⊆ Instance[instance] ⨯ Config ⨯ State
changedInstance ⊆ order ⨯ Instance[instance]
    
// Machine specific `type` constraints
SVFollowerOnePrims[config,instance] ⊆ Config ⨯ (Instance ⨝ Follower)[instance]SVLeaderOnePrims[config,instance] ⊆ Config ⨯ (Instance ⨝ Leader)[instance]SVLeaderFollower ⊆ Config ⨯ (Instance ⨝ Leader)[instance] ⨯ (Instance ⨝ Follower)[instance->follower]

ParamsEventFollowerHitPrimitives[cur,nxt] ⊆ order
ParamsEventLeaderStartFollower ⊆ order ⨯ (Instance ⨝ Follower)[instance->follower]
ParamsEventLeaderHitPrimitives[cur,nxt] ⊆ order

// Specific per event
∀ o ∈ order ⨝ raisedEvent | (
  (some (o ⨝ EventFollowerHit) ⇔ one (o ⨝ ParamsEventFollowerHitPrimitives)) ∧
  (some (o ⨝ EventLeaderStart) ⇔ one (o ⨝ ParamsEventLeaderStartFollower)) ∧
  (some (o ⨝ EventLeaderHit) ⇔ one (o ⨝ ParamsEventLeaderHitPrimitives))
)

// Generic: All configurations are reachable
∀ c ∈ Config ∖ InitialConfig | c ⊆ (InitialConfig[config as cur] ⨝ ^<cur,nxt>order)[nxt -> config]

// Generic: Every transition can only happen by exactly one event
∀ o ∈ order | one o ⨝ raisedEvent

// Generic: In every configuration all machines have a state
∀ c ∈ Config, inst ∈ Instance | one instanceInState ⨝ c ⨝ inst

// Specific per machine: In every configuration iff a machine is in an initialized state then it must have values
∀ c ∈ Config, inst ∈ (Instance ⨝ Follower)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇔ one SVFollowerOnePrims ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Leader)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇔ one SVLeaderOnePrims ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Leader)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇒ one SVLeaderFollower ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Leader)[instance] | (no (((c ⨯ inst) ⨝ instanceInState)[state] ∩ initialized) ⇒ no SVLeaderFollower ⨝ c ⨝ inst)


// Generic: Transitions are only allowed between if an event is specified between two states
∀ o ∈ order ⨝ raisedEvent | (o[cur as config] ⨝ instanceInState)[state->from] ⨯ (o[nxt as config] ⨝ instanceInState)[state->to] ⨯ o[event] ⊆ allowedTransitions

// Generic predicates
pred forceState[curState: (state:id), nxtState: (state:id), raisedEvent: (event:id)]
  = nxtState = (curState[state as from] ⨝ (allowedTransitions ⨝ raisedEvent))[to->state]

pred inState[config: (config:id), instance: (instance:id), state: (state:id)]
  = ((instance ⨯ config) ⨝ instanceInState)[state] ⊆ state

pred frameFollower[step: (cur:id, nxt:id), follower: (instance:id)] 
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ follower)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ follower)[state],
        curFlat = (SVFollowerOnePrims ⨝ cur ⨝ follower)[times->curTimes],
        nxtFlat = (SVFollowerOnePrims ⨝ nxt ⨝ follower)[times->nxtTimes] | (
    nxtState = curState ∧
    (
      (no curFlat) ∨ 
      (// Postconditions
       (some (curFlat ⨯ nxtFlat) where (nxtTimes = curTimes)))
    )
  )

pred eventFollowerHit[step:(cur:id, nxt:id), follower: (instance:id), paramFlat: (times:int)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ follower)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ follower)[state],
        curFlat = (SVFollowerOnePrims ⨝ cur ⨝ follower)[times->curTimes],
        nxtFlat = (SVFollowerOnePrims ⨝ nxt ⨝ follower)[times->nxtTimes] |
    ( 
       
      // Postconditions
      (some (curFlat ⨯ nxtFlat ⨯ paramFlat) where (nxtTimes = curTimes  +  times))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventFollowerHit] ∧
      // Make sure this instance is in the change set
      follower ⊆ (changedInstance ⨝ step)[instance]
    )

pred eventFollowerStart[step:(cur:id, nxt:id), follower: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ follower)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ follower)[state],
        curFlat = (SVFollowerOnePrims ⨝ cur ⨝ follower)[times->curTimes],
        nxtFlat = (SVFollowerOnePrims ⨝ nxt ⨝ follower)[times->nxtTimes] |
    ( 
       
      // Postconditions
      (some (nxtFlat) where (nxtTimes = 0))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventFollowerStart] ∧
      // Make sure this instance is in the change set
      follower ⊆ (changedInstance ⨝ step)[instance]
    )


pred possibleTransitionsFollower[step: (cur:id, nxt:id)] 
  = ∀ inst ∈ (Instance ⨝ Follower)[instance] |
    (some inst ∩ ((raisedEvent ⨝ step)[instance]) ⇔ (
      (eventFollowerHit[step,inst,(step ⨝ ParamsEventFollowerHitPrimitives)[times]] ∧
      (step ⨝ raisedEvent)[event] = EventFollowerHit ∧
      (changedInstance ⨝ step)[instance] ⊆  inst) // todo: Needs to be extended for synced events!
      ∨
      (eventFollowerStart[step,inst] ∧
      (step ⨝ raisedEvent)[event] = EventFollowerStart ∧
      (changedInstance ⨝ step)[instance] ⊆  inst) // todo: Needs to be extended for synced events!
    ))
    ∧
    (no inst ∩ (changedInstance ⨝ step)[instance] ⇔ frameFollower[step, inst])

pred eventLeaderHit[step:(cur:id, nxt:id), leader: (instance:id), paramFlat: (times:int)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ leader)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ leader)[state],
        curFlat = (SVLeaderOnePrims ⨝ cur ⨝ leader)[times->curTimes],
        nxtFlat = (SVLeaderOnePrims ⨝ nxt ⨝ leader)[times->nxtTimes],
        curFollower = (cur ⨝ SVLeaderFollower ⨝ leader)[follower],
        nxtFollower = (nxt ⨝ SVLeaderFollower ⨝ leader)[follower] |
    ( 
      // Preconditions 
      eventFollowerHit[step, curFollower[follower][follower as instance], paramTimes]  ∧ 
      // Postconditions
      nxtFollower[follower] = curFollower[follower] ∧
      (some (curFlat ⨯ nxtFlat ⨯ paramFlat) where (nxtTimes = curTimes  +  times))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventLeaderHit] ∧
      // Make sure this instance is in the change set
      leader ⊆ (changedInstance ⨝ step)[instance]
    )

pred frameLeader[step: (cur:id, nxt:id), leader: (instance:id)] 
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ leader)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ leader)[state],
        curFlat = (SVLeaderOnePrims ⨝ cur ⨝ leader)[times->curTimes],
        nxtFlat = (SVLeaderOnePrims ⨝ nxt ⨝ leader)[times->nxtTimes],
        curFollower = (cur ⨝ SVLeaderFollower ⨝ leader)[follower],
        nxtFollower = (nxt ⨝ SVLeaderFollower ⨝ leader)[follower] | (
    nxtState = curState ∧
    (
      (no curFlat) ∨ 
      (// Postconditions
       (some (curFlat ⨯ nxtFlat) where (nxtTimes = curTimes)) ∧
       nxtFollower[follower] = curFollower[follower])
    )
  )

pred eventLeaderStart[step:(cur:id, nxt:id), leader: (instance:id), paramFollower: (follower:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ leader)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ leader)[state],
        curFlat = (SVLeaderOnePrims ⨝ cur ⨝ leader)[times->curTimes],
        nxtFlat = (SVLeaderOnePrims ⨝ nxt ⨝ leader)[times->nxtTimes],
        curFollower = (cur ⨝ SVLeaderFollower ⨝ leader)[follower],
        nxtFollower = (nxt ⨝ SVLeaderFollower ⨝ leader)[follower] |
    ( 
      // Preconditions 
      inState[cur, paramFollower[follower->instance], StateFollowerActive]  ∧ 
      // Postconditions
      nxtFollower[follower] = paramFollower ∧
      (some (nxtFlat) where (nxtTimes = 0))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventLeaderStart] ∧
      // Make sure this instance is in the change set
      leader ⊆ (changedInstance ⨝ step)[instance]
    )


pred possibleTransitionsLeader[step: (cur:id, nxt:id)] 
  = ∀ inst ∈ (Instance ⨝ Leader)[instance] |
    (some inst ∩ ((raisedEvent ⨝ step)[instance]) ⇔ (
      (eventLeaderHit[step,inst,(step ⨝ ParamsEventLeaderHitPrimitives)[times]] ∧
      (step ⨝ raisedEvent)[event] = EventLeaderHit ∧
      (changedInstance ⨝ step)[instance] ⊆  inst) // todo: Needs to be extended for synced events!
      ∨
      (eventLeaderStart[step,inst,(step ⨝ ParamsEventLeaderStartFollower)[follower]] ∧
      (step ⨝ raisedEvent)[event] = EventLeaderStart ∧
      (changedInstance ⨝ step)[instance] ⊆  inst) // todo: Needs to be extended for synced events!
    ))
    ∧
    (no inst ∩ (changedInstance ⨝ step)[instance] ⇔ frameLeader[step, inst])


// Transition function
∀ step ∈ order | possibleTransitionsFollower[step] ∧ possibleTransitionsLeader[step]

// Asserts: this is where the checks get added
∃ c ∈ Config, f ∈ SVFollowerOnePrims, l ∈ SVLeaderOnePrims | (some (c ⨝ f) where times = 1 ∧ some (c ⨝ l) where times = 1)

// Minimize the number of steps by minimizing the number of Configurations
objectives: minimize Config[count()]
