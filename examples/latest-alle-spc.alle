// Static configuration of state machines
// Define the specs that can take place in the transition system
Leader (spec:id) = {<leader>}
Follower (spec:id) = {<follower>}

// Define all possible states for all machines
State (state:id) = {<state_uninitialized>,<state_finalized>,<state_leader_link>,<state_leader_active>,<state_follower_active>}
initialized (state:id) = {<state_leader_link>,<state_leader_active>,<state_follower_active>}
finalized (state:id) = {<state_finalized>}
uninitialized (state:id) = {<state_uninitialized>}
StateLeaderActive (state:id) = {<state_leader_active>}StateLeaderLink (state:id) = {<state_leader_link>}
StateFollowerActive (state:id) = {<state_follower_active>}

// Define which transitions are allowed (in the form of `from a state` -> ` via an event` -> `to a state`
allowedTransitions (from:id, to:id, event:id) = {<state_uninitialized,state_leader_link,event_leader_start>,<state_leader_link,state_leader_link,event_leader_add>,<state_leader_link,state_leader_active,event_leader_complete>,<state_leader_active,state_leader_active,event_leader_hitsome>,<state_follower_active,state_follower_active,event_follower_hit>,<state_uninitialized,state_follower_active,event_follower_start>}
// Define each event as single relation so that the events can be used as variables in the constraints 
EventLeaderAdd (event:id) = {<event_leader_add>}
EventLeaderHitSome (event:id) = {<event_leader_hitsome>}
EventLeader__frame (event:id) = {<event_leader___frame>}
EventFollower__frame (event:id) = {<event_follower___frame>}
EventLeaderStart (event:id) = {<event_leader_start>}
EventFollowerStart (event:id) = {<event_follower_start>}
EventFollowerHit (event:id) = {<event_follower_hit>}
EventLeaderComplete (event:id) = {<event_leader_complete>}

__EMPTY (instance:id) = {}
__IntConst_0 (const_0: int) = {<0>}
__IntConst_1 (const_1: int) = {<1>}

// Dynamic configuration of state machines
Config (config:id) >= {<c1>} <= {<c1>,<c2>,<c3>,<c4>,<c5>,<c6>,<c7>,<c8>,<c9>,<c10>,<c11>,<c12>,<c13>}
order (cur:id, nxt:id) <= {<c1,c2>,<c2,c3>,<c3,c4>,<c4,c5>,<c5,c6>,<c6,c7>,<c7,c8>,<c8,c9>,<c9,c10>,<c10,c11>,<c11,c12>,<c12,c13>}
first (config:id) = {<c1>}
last (config:id) <= {<c1>,<c2>,<c3>,<c4>,<c5>,<c6>,<c7>,<c8>,<c9>,<c10>,<c11>,<c12>,<c13>}
back (config:id) <= {<c1>,<c2>,<c3>,<c4>,<c5>,<c6>,<c7>,<c8>,<c9>,<c10>,<c11>,<c12>,<c13>}
loop (cur:id, nxt:id) <= {<c2,c1>,<c2,c2>,<c3,c1>,<c3,c2>,<c3,c3>,<c4,c1>,<c4,c2>,<c4,c3>,<c4,c4>,<c5,c1>,<c5,c2>,<c5,c3>,<c5,c4>,<c5,c5>,<c6,c1>,<c6,c2>,<c6,c3>,<c6,c4>,<c6,c5>,<c6,c6>,<c7,c1>,<c7,c2>,<c7,c3>,<c7,c4>,<c7,c5>,<c7,c6>,<c7,c7>,<c8,c1>,<c8,c2>,<c8,c3>,<c8,c4>,<c8,c5>,<c8,c6>,<c8,c7>,<c8,c8>,<c9,c1>,<c9,c2>,<c9,c3>,<c9,c4>,<c9,c5>,<c9,c6>,<c9,c7>,<c9,c8>,<c9,c9>,<c10,c1>,<c10,c2>,<c10,c3>,<c10,c4>,<c10,c5>,<c10,c6>,<c10,c7>,<c10,c8>,<c10,c9>,<c10,c10>,<c11,c1>,<c11,c2>,<c11,c3>,<c11,c4>,<c11,c5>,<c11,c6>,<c11,c7>,<c11,c8>,<c11,c9>,<c11,c10>,<c11,c11>,<c12,c1>,<c12,c2>,<c12,c3>,<c12,c4>,<c12,c5>,<c12,c6>,<c12,c7>,<c12,c8>,<c12,c9>,<c12,c10>,<c12,c11>,<c12,c12>,<c13,c1>,<c13,c2>,<c13,c3>,<c13,c4>,<c13,c5>,<c13,c6>,<c13,c7>,<c13,c8>,<c13,c9>,<c13,c10>,<c13,c11>,<c13,c12>,<c13,c13>}

Instance (spec:id, instance:id) = {<leader,l>,<follower,f3>,<follower,f2>,<follower,f1>}
instanceInState (config:id, instance:id, state:id) >= {<c1,l,state_uninitialized>,<c1,f3,state_uninitialized>,<c1,f2,state_uninitialized>,<c1,f1,state_uninitialized>}<= {<c1,l,state_leader_link>,<c1,l,state_uninitialized>,<c1,l,state_leader_active>,<c1,l,state_finalized>,<c1,f1,state_uninitialized>,<c1,f1,state_finalized>,<c1,f1,state_follower_active>,<c1,f2,state_uninitialized>,<c1,f2,state_finalized>,<c1,f2,state_follower_active>,<c1,f3,state_uninitialized>,<c1,f3,state_finalized>,<c1,f3,state_follower_active>,<c2,l,state_leader_link>,<c2,l,state_uninitialized>,<c2,l,state_leader_active>,<c2,l,state_finalized>,<c2,f1,state_uninitialized>,<c2,f1,state_finalized>,<c2,f1,state_follower_active>,<c2,f2,state_uninitialized>,<c2,f2,state_finalized>,<c2,f2,state_follower_active>,<c2,f3,state_uninitialized>,<c2,f3,state_finalized>,<c2,f3,state_follower_active>,<c3,l,state_leader_link>,<c3,l,state_uninitialized>,<c3,l,state_leader_active>,<c3,l,state_finalized>,<c3,f1,state_uninitialized>,<c3,f1,state_finalized>,<c3,f1,state_follower_active>,<c3,f2,state_uninitialized>,<c3,f2,state_finalized>,<c3,f2,state_follower_active>,<c3,f3,state_uninitialized>,<c3,f3,state_finalized>,<c3,f3,state_follower_active>,<c4,l,state_leader_link>,<c4,l,state_uninitialized>,<c4,l,state_leader_active>,<c4,l,state_finalized>,<c4,f1,state_uninitialized>,<c4,f1,state_finalized>,<c4,f1,state_follower_active>,<c4,f2,state_uninitialized>,<c4,f2,state_finalized>,<c4,f2,state_follower_active>,<c4,f3,state_uninitialized>,<c4,f3,state_finalized>,<c4,f3,state_follower_active>,<c5,l,state_leader_link>,<c5,l,state_uninitialized>,<c5,l,state_leader_active>,<c5,l,state_finalized>,<c5,f1,state_uninitialized>,<c5,f1,state_finalized>,<c5,f1,state_follower_active>,<c5,f2,state_uninitialized>,<c5,f2,state_finalized>,<c5,f2,state_follower_active>,<c5,f3,state_uninitialized>,<c5,f3,state_finalized>,<c5,f3,state_follower_active>,<c6,l,state_leader_link>,<c6,l,state_uninitialized>,<c6,l,state_leader_active>,<c6,l,state_finalized>,<c6,f1,state_uninitialized>,<c6,f1,state_finalized>,<c6,f1,state_follower_active>,<c6,f2,state_uninitialized>,<c6,f2,state_finalized>,<c6,f2,state_follower_active>,<c6,f3,state_uninitialized>,<c6,f3,state_finalized>,<c6,f3,state_follower_active>,<c7,l,state_leader_link>,<c7,l,state_uninitialized>,<c7,l,state_leader_active>,<c7,l,state_finalized>,<c7,f1,state_uninitialized>,<c7,f1,state_finalized>,<c7,f1,state_follower_active>,<c7,f2,state_uninitialized>,<c7,f2,state_finalized>,<c7,f2,state_follower_active>,<c7,f3,state_uninitialized>,<c7,f3,state_finalized>,<c7,f3,state_follower_active>,<c8,l,state_leader_link>,<c8,l,state_uninitialized>,<c8,l,state_leader_active>,<c8,l,state_finalized>,<c8,f1,state_uninitialized>,<c8,f1,state_finalized>,<c8,f1,state_follower_active>,<c8,f2,state_uninitialized>,<c8,f2,state_finalized>,<c8,f2,state_follower_active>,<c8,f3,state_uninitialized>,<c8,f3,state_finalized>,<c8,f3,state_follower_active>,<c9,l,state_leader_link>,<c9,l,state_uninitialized>,<c9,l,state_leader_active>,<c9,l,state_finalized>,<c9,f1,state_uninitialized>,<c9,f1,state_finalized>,<c9,f1,state_follower_active>,<c9,f2,state_uninitialized>,<c9,f2,state_finalized>,<c9,f2,state_follower_active>,<c9,f3,state_uninitialized>,<c9,f3,state_finalized>,<c9,f3,state_follower_active>,<c10,l,state_leader_link>,<c10,l,state_uninitialized>,<c10,l,state_leader_active>,<c10,l,state_finalized>,<c10,f1,state_uninitialized>,<c10,f1,state_finalized>,<c10,f1,state_follower_active>,<c10,f2,state_uninitialized>,<c10,f2,state_finalized>,<c10,f2,state_follower_active>,<c10,f3,state_uninitialized>,<c10,f3,state_finalized>,<c10,f3,state_follower_active>,<c11,l,state_leader_link>,<c11,l,state_uninitialized>,<c11,l,state_leader_active>,<c11,l,state_finalized>,<c11,f1,state_uninitialized>,<c11,f1,state_finalized>,<c11,f1,state_follower_active>,<c11,f2,state_uninitialized>,<c11,f2,state_finalized>,<c11,f2,state_follower_active>,<c11,f3,state_uninitialized>,<c11,f3,state_finalized>,<c11,f3,state_follower_active>,<c12,l,state_leader_link>,<c12,l,state_uninitialized>,<c12,l,state_leader_active>,<c12,l,state_finalized>,<c12,f1,state_uninitialized>,<c12,f1,state_finalized>,<c12,f1,state_follower_active>,<c12,f2,state_uninitialized>,<c12,f2,state_finalized>,<c12,f2,state_follower_active>,<c12,f3,state_uninitialized>,<c12,f3,state_finalized>,<c12,f3,state_follower_active>,<c13,l,state_leader_link>,<c13,l,state_uninitialized>,<c13,l,state_leader_active>,<c13,l,state_finalized>,<c13,f1,state_uninitialized>,<c13,f1,state_finalized>,<c13,f1,state_follower_active>,<c13,f2,state_uninitialized>,<c13,f2,state_finalized>,<c13,f2,state_follower_active>,<c13,f3,state_uninitialized>,<c13,f3,state_finalized>,<c13,f3,state_follower_active>}
raisedEvent (cur:id, nxt:id, event:id, instance:id) <= {<c1,c2,event_leader_complete,l>,<c1,c2,event_leader_add,l>,<c1,c2,event_leader_start,l>,<c1,c2,event_leader_hitsome,l>,<c2,c3,event_leader_complete,l>,<c2,c3,event_leader_add,l>,<c2,c3,event_leader_start,l>,<c2,c3,event_leader_hitsome,l>,<c3,c4,event_leader_complete,l>,<c3,c4,event_leader_add,l>,<c3,c4,event_leader_start,l>,<c3,c4,event_leader_hitsome,l>,<c4,c5,event_leader_complete,l>,<c4,c5,event_leader_add,l>,<c4,c5,event_leader_start,l>,<c4,c5,event_leader_hitsome,l>,<c5,c6,event_leader_complete,l>,<c5,c6,event_leader_add,l>,<c5,c6,event_leader_start,l>,<c5,c6,event_leader_hitsome,l>,<c6,c7,event_leader_complete,l>,<c6,c7,event_leader_add,l>,<c6,c7,event_leader_start,l>,<c6,c7,event_leader_hitsome,l>,<c7,c8,event_leader_complete,l>,<c7,c8,event_leader_add,l>,<c7,c8,event_leader_start,l>,<c7,c8,event_leader_hitsome,l>,<c8,c9,event_leader_complete,l>,<c8,c9,event_leader_add,l>,<c8,c9,event_leader_start,l>,<c8,c9,event_leader_hitsome,l>,<c9,c10,event_leader_complete,l>,<c9,c10,event_leader_add,l>,<c9,c10,event_leader_start,l>,<c9,c10,event_leader_hitsome,l>,<c10,c11,event_leader_complete,l>,<c10,c11,event_leader_add,l>,<c10,c11,event_leader_start,l>,<c10,c11,event_leader_hitsome,l>,<c11,c12,event_leader_complete,l>,<c11,c12,event_leader_add,l>,<c11,c12,event_leader_start,l>,<c11,c12,event_leader_hitsome,l>,<c12,c13,event_leader_complete,l>,<c12,c13,event_leader_add,l>,<c12,c13,event_leader_start,l>,<c12,c13,event_leader_hitsome,l>,<c1,c2,event_follower_start,f1>,<c2,c3,event_follower_start,f1>,<c3,c4,event_follower_start,f1>,<c4,c5,event_follower_start,f1>,<c5,c6,event_follower_start,f1>,<c6,c7,event_follower_start,f1>,<c7,c8,event_follower_start,f1>,<c8,c9,event_follower_start,f1>,<c9,c10,event_follower_start,f1>,<c10,c11,event_follower_start,f1>,<c11,c12,event_follower_start,f1>,<c12,c13,event_follower_start,f1>,<c1,c2,event_follower_start,f2>,<c2,c3,event_follower_start,f2>,<c3,c4,event_follower_start,f2>,<c4,c5,event_follower_start,f2>,<c5,c6,event_follower_start,f2>,<c6,c7,event_follower_start,f2>,<c7,c8,event_follower_start,f2>,<c8,c9,event_follower_start,f2>,<c9,c10,event_follower_start,f2>,<c10,c11,event_follower_start,f2>,<c11,c12,event_follower_start,f2>,<c12,c13,event_follower_start,f2>,<c1,c2,event_follower_start,f3>,<c2,c3,event_follower_start,f3>,<c3,c4,event_follower_start,f3>,<c4,c5,event_follower_start,f3>,<c5,c6,event_follower_start,f3>,<c6,c7,event_follower_start,f3>,<c7,c8,event_follower_start,f3>,<c8,c9,event_follower_start,f3>,<c9,c10,event_follower_start,f3>,<c10,c11,event_follower_start,f3>,<c11,c12,event_follower_start,f3>,<c12,c13,event_follower_start,f3>}
changedInstance (cur:id, nxt:id, instance:id) <= {<c1,c2,l>,<c1,c2,f1>,<c1,c2,f2>,<c1,c2,f3>,<c2,c3,l>,<c2,c3,f1>,<c2,c3,f2>,<c2,c3,f3>,<c3,c4,l>,<c3,c4,f1>,<c3,c4,f2>,<c3,c4,f3>,<c4,c5,l>,<c4,c5,f1>,<c4,c5,f2>,<c4,c5,f3>,<c5,c6,l>,<c5,c6,f1>,<c5,c6,f2>,<c5,c6,f3>,<c6,c7,l>,<c6,c7,f1>,<c6,c7,f2>,<c6,c7,f3>,<c7,c8,l>,<c7,c8,f1>,<c7,c8,f2>,<c7,c8,f3>,<c8,c9,l>,<c8,c9,f1>,<c8,c9,f2>,<c8,c9,f3>,<c9,c10,l>,<c9,c10,f1>,<c9,c10,f2>,<c9,c10,f3>,<c10,c11,l>,<c10,c11,f1>,<c10,c11,f2>,<c10,c11,f3>,<c11,c12,l>,<c11,c12,f1>,<c11,c12,f2>,<c11,c12,f3>,<c12,c13,l>,<c12,c13,f1>,<c12,c13,f2>,<c12,c13,f3>}

LeaderFollowers (config:id, instance:id, followers:id) <= {<c1,l,f1>,<c1,l,f2>,<c1,l,f3>,<c2,l,f1>,<c2,l,f2>,<c2,l,f3>,<c3,l,f1>,<c3,l,f2>,<c3,l,f3>,<c4,l,f1>,<c4,l,f2>,<c4,l,f3>,<c5,l,f1>,<c5,l,f2>,<c5,l,f3>,<c6,l,f1>,<c6,l,f2>,<c6,l,f3>,<c7,l,f1>,<c7,l,f2>,<c7,l,f3>,<c8,l,f1>,<c8,l,f2>,<c8,l,f3>,<c9,l,f1>,<c9,l,f2>,<c9,l,f3>,<c10,l,f1>,<c10,l,f2>,<c10,l,f3>,<c11,l,f1>,<c11,l,f2>,<c11,l,f3>,<c12,l,f1>,<c12,l,f2>,<c12,l,f3>,<c13,l,f1>,<c13,l,f2>,<c13,l,f3>}
LeaderNrOfHits (config:id, instance:id, nrOfHits:int) <= {<c1,l,?>,<c2,l,?>,<c3,l,?>,<c4,l,?>,<c5,l,?>,<c6,l,?>,<c7,l,?>,<c8,l,?>,<c9,l,?>,<c10,l,?>,<c11,l,?>,<c12,l,?>,<c13,l,?>}
FollowerNrOfHits (config:id, instance:id, nrOfHits:int) <= {<c1,f1,?>,<c2,f1,?>,<c3,f1,?>,<c4,f1,?>,<c5,f1,?>,<c6,f1,?>,<c7,f1,?>,<c8,f1,?>,<c9,f1,?>,<c10,f1,?>,<c11,f1,?>,<c12,f1,?>,<c13,f1,?>,<c1,f2,?>,<c2,f2,?>,<c3,f2,?>,<c4,f2,?>,<c5,f2,?>,<c6,f2,?>,<c7,f2,?>,<c8,f2,?>,<c9,f2,?>,<c10,f2,?>,<c11,f2,?>,<c12,f2,?>,<c13,f2,?>,<c1,f3,?>,<c2,f3,?>,<c3,f3,?>,<c4,f3,?>,<c5,f3,?>,<c6,f3,?>,<c7,f3,?>,<c8,f3,?>,<c9,f3,?>,<c10,f3,?>,<c11,f3,?>,<c12,f3,?>,<c13,f3,?>}


ParamEventLeaderAddFollower (cur:id, nxt:id, follower:id) <= {<c1,c2,f1>,<c1,c2,f2>,<c1,c2,f3>,<c2,c3,f1>,<c2,c3,f2>,<c2,c3,f3>,<c3,c4,f1>,<c3,c4,f2>,<c3,c4,f3>,<c4,c5,f1>,<c4,c5,f2>,<c4,c5,f3>,<c5,c6,f1>,<c5,c6,f2>,<c5,c6,f3>,<c6,c7,f1>,<c6,c7,f2>,<c6,c7,f3>,<c7,c8,f1>,<c7,c8,f2>,<c7,c8,f3>,<c8,c9,f1>,<c8,c9,f2>,<c8,c9,f3>,<c9,c10,f1>,<c9,c10,f2>,<c9,c10,f3>,<c10,c11,f1>,<c10,c11,f2>,<c10,c11,f3>,<c11,c12,f1>,<c11,c12,f2>,<c11,c12,f3>,<c12,c13,f1>,<c12,c13,f2>,<c12,c13,f3>}

// Constraints for the configuration and ordering relations
order ⊆ Config[config as cur] ⨯ Config[config as nxt]
last = Config ∖ order[cur->config]  // There is only one last configuration
back ⊆ Config 
lone back   
loop ⊆ last[config as cur] ⨯ back[config as nxt] // Loop contains at most one tuple going back from the last configuration to the 

// Generic 'Type' constraints    
raisedEvent ⊆ order ⨯ allowedTransitions[event] ⨯ Instance[instance]
instanceInState ⊆ Instance[instance] ⨯ Config ⨯ State
changedInstance ⊆ order ⨯ Instance[instance]
    
// Machine specific `type` constraints
LeaderFollowers  ⊆ Config ⨯ (Instance ⨝ Leader)[instance] ⨯ (Instance ⨝ Follower)[instance->followers]
LeaderNrOfHits[config,instance]  ⊆ Config ⨯ (Instance ⨝ Leader)[instance]
FollowerNrOfHits[config,instance]  ⊆ Config ⨯ (Instance ⨝ Follower)[instance]

ParamEventLeaderAddFollower ⊆ order ⨯ (Instance ⨝ Follower)[instance->follower]

// Specific per event
∀ step ∈ order ⨝ raisedEvent | (
  (some (step ⨝ EventLeaderAdd) ⇔ one (step ⨝ ParamEventLeaderAddFollower))
)

// Generic: All configurations are reachable
∀ c ∈ Config ∖ first | c ⊆ (first[config as cur] ⨝ ^<cur,nxt>order)[nxt -> config]

// Generic: Every transition can only happen by exactly one event
∀ o ∈ order | one o ⨝ raisedEvent

// Specif: In every configuration all machines have a state IFF its a machine which is not empty
∀ c ∈ Config, inst ∈ Instance | one instanceInState ⨝ c ⨝ inst

// Specific per machine: In every configuration iff a machine is in an initialized state then it must have values
∀ c ∈ Config, inst ∈ (Instance ⨝ Leader)[instance] | (no (((c ⨯ inst) ⨝ instanceInState)[state] ∩ initialized) ⇒ no LeaderFollowers ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Leader)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇔ one LeaderNrOfHits ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Follower)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇔ one FollowerNrOfHits ⨝ c ⨝ inst)


// Generic: Transitions are only allowed between if an event is specified between two states
∀ o ∈ order ⨝ raisedEvent | (o[cur as config] ⨝ instanceInState)[state->from] ⨯ (o[nxt as config] ⨝ instanceInState)[state->to] ⨯ o[event] ⊆ allowedTransitions

// Change set predicates
pred inChangeSet[step: (cur:id, nxt:id), instances: (instance:id)]
  = instances ⊆ (changedInstance ⨝ step)[instance]
 
pred notInChangeSet[step: (cur:id, nxt:id), instances: (instance:id)]
  = no instances ∩ (changedInstance ⨝ step)[instance]

pred changeSetCanContain[step: (cur:id, nxt:id), instances: (instance:id)]
  = (changedInstance ⨝ step)[instance] ⊆ instances 

// Generic predicates
pred forceState[curState: (state:id), nxtState: (state:id), raisedEvent: (event:id)]
  = nxtState = (curState[state as from] ⨝ (allowedTransitions ⨝ raisedEvent))[to->state]

pred inState[config: (config:id), instance: (instance:id), state: (state:id)]
  = ((instance ⨯ config) ⨝ instanceInState)[state] ⊆ state

pred eventLeaderStart[step:(cur:id, nxt:id), leader: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ leader)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ leader)[state] |
    ( 
       
      // Postconditions
      (some ((leader ⨝ (LeaderNrOfHits ⨝ nxt))[nrOfHits][nrOfHits as nxt_nrOfHits]) where (nxt_nrOfHits = 0)) ∧
      no (leader ⨝ (LeaderFollowers ⨝ nxt))[followers]  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventLeaderStart] ∧
      // Make sure this instance is in the change set
      inChangeSet[step, leader]
    )

pred frameLeader[step: (cur:id, nxt:id), leader: (instance:id)] 
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ leader)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ leader)[state] | (
    nxtState = curState ∧
    (
      curState ⊆ uninitialized ∨ 
      (// Postconditions
       (leader ⨝ (LeaderFollowers ⨝ nxt))[followers] = (leader ⨝ (LeaderFollowers ⨝ cur))[followers] ∧
       (some ((leader ⨝ (LeaderNrOfHits ⨝ nxt))[nrOfHits][nrOfHits as nxt_nrOfHits] ⨯ (leader ⨝ (LeaderNrOfHits ⨝ cur))[nrOfHits][nrOfHits as cur_nrOfHits]) where (nxt_nrOfHits = cur_nrOfHits)))
    )
  )

pred eventLeaderHitSome[step:(cur:id, nxt:id), leader: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ leader)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ leader)[state] |
    ( 
      // Preconditions 
      (exists f ∈ (leader ⨝ (LeaderFollowers ⨝ cur))[followers] | eventFollowerHit[step, f[followers as instance]]) ∧
      (∀ f ∈ (leader ⨝ (LeaderFollowers ⨝ cur))[followers] | ((eventFollowerHit[step, f[followers as instance]] ∨ notInChangeSet[step, f[followers as instance]])))  ∧ 
      // Postconditions
      (leader ⨝ (LeaderFollowers ⨝ nxt))[followers] = (leader ⨝ (LeaderFollowers ⨝ cur))[followers] ∧
      (some ((leader ⨝ (LeaderNrOfHits ⨝ nxt))[nrOfHits][nrOfHits as nxt_nrOfHits] ⨯ (leader ⨝ (LeaderNrOfHits ⨝ cur))[nrOfHits][nrOfHits as cur_nrOfHits]) where (nxt_nrOfHits = cur_nrOfHits + 1))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventLeaderHitSome] ∧
      // Make sure this instance is in the change set
      inChangeSet[step, leader]
    )

pred eventLeaderComplete[step:(cur:id, nxt:id), leader: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ leader)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ leader)[state] |
    ( 
       
      // Postconditions
      (some ((leader ⨝ (LeaderNrOfHits ⨝ nxt))[nrOfHits][nrOfHits as nxt_nrOfHits] ⨯ (leader ⨝ (LeaderNrOfHits ⨝ cur))[nrOfHits][nrOfHits as cur_nrOfHits]) where (nxt_nrOfHits = cur_nrOfHits)) ∧
      (leader ⨝ (LeaderFollowers ⨝ nxt))[followers] = (leader ⨝ (LeaderFollowers ⨝ cur))[followers]  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventLeaderComplete] ∧
      // Make sure this instance is in the change set
      inChangeSet[step, leader]
    )

pred eventLeaderAdd[step:(cur:id, nxt:id), leader: (instance:id), follower: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ leader)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ leader)[state] |
    ( 
      // Preconditions 
      inState[cur, follower, initialized]  ∧ 
      // Postconditions
      (some ((leader ⨝ (LeaderNrOfHits ⨝ nxt))[nrOfHits][nrOfHits as nxt_nrOfHits] ⨯ (leader ⨝ (LeaderNrOfHits ⨝ cur))[nrOfHits][nrOfHits as cur_nrOfHits]) where (nxt_nrOfHits = cur_nrOfHits)) ∧
      (leader ⨝ (LeaderFollowers ⨝ nxt))[followers] = ((leader ⨝ (LeaderFollowers ⨝ cur))[followers] ∪ follower[instance as followers])  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventLeaderAdd] ∧
      // Make sure this instance is in the change set
      inChangeSet[step, leader]
    )


pred possibleTransitionsLeader[step: (cur:id, nxt:id)] 
  = ∀ inst ∈ (Instance ⨝ Leader)[instance] |
    (some inst ∩ ((raisedEvent ⨝ step)[instance]) ⇔ (
      (eventLeaderStart[step,inst] ∧
      (step ⨝ raisedEvent)[event] = EventLeaderStart ∧
      changeSetCanContain[step, inst])
      ∨
      (eventLeaderHitSome[step,inst] ∧
      (step ⨝ raisedEvent)[event] = EventLeaderHitSome ∧
      let cur = step[cur->config], leader = inst, leader = (leader ⨝ (LeaderFollowers ⨝ cur))[followers][followers as instance] | changeSetCanContain[step, inst ∪ leader])
      ∨
      (eventLeaderComplete[step,inst] ∧
      (step ⨝ raisedEvent)[event] = EventLeaderComplete ∧
      changeSetCanContain[step, inst])
      ∨
      (eventLeaderAdd[step,inst,(step ⨝ ParamEventLeaderAddFollower)[follower->instance]] ∧
      (step ⨝ raisedEvent)[event] = EventLeaderAdd ∧
      changeSetCanContain[step, inst])
    ))
    ∧
    (notInChangeSet[step, inst] ⇒ frameLeader[step, inst])

pred frameFollower[step: (cur:id, nxt:id), follower: (instance:id)] 
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ follower)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ follower)[state] | (
    nxtState = curState ∧
    (
      curState ⊆ uninitialized ∨ 
      (// Postconditions
       (some ((follower ⨝ (FollowerNrOfHits ⨝ cur))[nrOfHits][nrOfHits as cur_nrOfHits] ⨯ (follower ⨝ (FollowerNrOfHits ⨝ nxt))[nrOfHits][nrOfHits as nxt_nrOfHits]) where (nxt_nrOfHits = cur_nrOfHits)))
    )
  )

pred eventFollowerStart[step:(cur:id, nxt:id), follower: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ follower)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ follower)[state] |
    ( 
       
      // Postconditions
      (some ((follower ⨝ (FollowerNrOfHits ⨝ nxt))[nrOfHits][nrOfHits as nxt_nrOfHits]) where (nxt_nrOfHits = 0))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventFollowerStart] ∧
      // Make sure this instance is in the change set
      inChangeSet[step, follower]
    )

pred eventFollowerHit[step:(cur:id, nxt:id), follower: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ follower)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ follower)[state] |
    ( 
       
      // Postconditions
      (some ((follower ⨝ (FollowerNrOfHits ⨝ cur))[nrOfHits][nrOfHits as cur_nrOfHits] ⨯ (follower ⨝ (FollowerNrOfHits ⨝ nxt))[nrOfHits][nrOfHits as nxt_nrOfHits]) where (nxt_nrOfHits = cur_nrOfHits + 1))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventFollowerHit] ∧
      // Make sure this instance is in the change set
      inChangeSet[step, follower]
    )


pred possibleTransitionsFollower[step: (cur:id, nxt:id)] 
  = ∀ inst ∈ (Instance ⨝ Follower)[instance] |
    (some inst ∩ ((raisedEvent ⨝ step)[instance]) ⇔ (
      (eventFollowerStart[step,inst] ∧
      (step ⨝ raisedEvent)[event] = EventFollowerStart ∧
      changeSetCanContain[step, inst])
    ))
    ∧
    (notInChangeSet[step, inst] ⇒ frameFollower[step, inst])


// Transition function
∀ step ∈ order | possibleTransitionsLeader[step] ∧ possibleTransitionsFollower[step]


// Assert: AFollowerWith5Hits
∃ cur ∈ Config | (∃ f1 ∈ (Follower ⨝ Instance)[instance],f2 ∈ (Follower ⨝ Instance)[instance] | f1 != f2 ∧ (some ((f1 ⨝ FollowerNrOfHits ⨝ cur)[nrOfHits->f1NrOfHits]) where (f1NrOfHits = 3)) ∧ inState[cur, f2, initialized])

// Minimize the number of steps by minimizing the number of Configurations
objectives: minimize Config[count()]
