// Static configuration of state machines
// Define the specs that can take place in the transition system
Leader (spec:id) = {<leader>}
Follower (spec:id) = {<follower>}

// Define all possible states for all machines
State (state:id) = {<state_uninitialized>,<state_finalized>,<state_leader_active>,<state_follower_active>}
initialized (state:id) = {<state_leader_active>,<state_follower_active>}
finalized (state:id) = {<state_finalized>}
uninitialized (state:id) = {<state_uninitialized>}
StateLeaderActive (state:id) = {<state_leader_active>}
StateFollowerActive (state:id) = {<state_follower_active>}

// Define which transitions are allowed (in the form of `from a state` -> ` via an event` -> `to a state`
allowedTransitions (from:id, to:id, event:id) = {<state_uninitialized,state_leader_active,event_leader_start>,<state_leader_active,state_leader_active,event_leader_hit>,<state_follower_active,state_follower_active,event_follower_hit>,<state_uninitialized,state_follower_active,event_follower_start>}
// Define each event as single relation so that the events can be used as variables in the constraints 
EventLeader__frame (event:id) = {<event_leader___frame>}
EventFollower__frame (event:id) = {<event_follower___frame>}
EventLeaderStart (event:id) = {<event_leader_start>}
EventFollowerStart (event:id) = {<event_follower_start>}
EventLeaderHit (event:id) = {<event_leader_hit>}
EventFollowerHit (event:id) = {<event_follower_hit>}


// Dynamic configuration of state machines
Config (config:id) >= {<c1>} <= {<c1>,<c2>,<c3>,<c4>,<c5>,<c6>}
order (cur:id, nxt:id) <= {<c1,c2>,<c2,c3>,<c3,c4>,<c4,c5>,<c5,c6>}
first (config:id) = {<c1>}
last (config:id) <= {<c1>,<c2>,<c3>,<c4>,<c5>,<c6>}
back (config:id) <= {<c1>,<c2>,<c3>,<c4>,<c5>,<c6>}
loop (cur:id, nxt:id) <= {<c2,c1>,<c2,c2>,<c3,c1>,<c3,c2>,<c3,c3>,<c4,c1>,<c4,c2>,<c4,c3>,<c4,c4>,<c5,c1>,<c5,c2>,<c5,c3>,<c5,c4>,<c5,c5>,<c6,c1>,<c6,c2>,<c6,c3>,<c6,c4>,<c6,c5>,<c6,c6>}

Instance (spec:id, instance:id) = {<leader,l2>,<follower,f1>,<leader,l1>,<follower,f2>}
instanceInState (config:id, instance:id, state:id) >= {<c1,l2,state_uninitialized>,<c1,f1,state_uninitialized>,<c1,l1,state_uninitialized>,<c1,f2,state_uninitialized>}<= {<c1,l1,state_uninitialized>,<c1,l1,state_leader_active>,<c1,l1,state_finalized>,<c1,l2,state_uninitialized>,<c1,l2,state_leader_active>,<c1,l2,state_finalized>,<c1,f1,state_uninitialized>,<c1,f1,state_finalized>,<c1,f1,state_follower_active>,<c1,f2,state_uninitialized>,<c1,f2,state_finalized>,<c1,f2,state_follower_active>,<c2,l1,state_uninitialized>,<c2,l1,state_leader_active>,<c2,l1,state_finalized>,<c2,l2,state_uninitialized>,<c2,l2,state_leader_active>,<c2,l2,state_finalized>,<c2,f1,state_uninitialized>,<c2,f1,state_finalized>,<c2,f1,state_follower_active>,<c2,f2,state_uninitialized>,<c2,f2,state_finalized>,<c2,f2,state_follower_active>,<c3,l1,state_uninitialized>,<c3,l1,state_leader_active>,<c3,l1,state_finalized>,<c3,l2,state_uninitialized>,<c3,l2,state_leader_active>,<c3,l2,state_finalized>,<c3,f1,state_uninitialized>,<c3,f1,state_finalized>,<c3,f1,state_follower_active>,<c3,f2,state_uninitialized>,<c3,f2,state_finalized>,<c3,f2,state_follower_active>,<c4,l1,state_uninitialized>,<c4,l1,state_leader_active>,<c4,l1,state_finalized>,<c4,l2,state_uninitialized>,<c4,l2,state_leader_active>,<c4,l2,state_finalized>,<c4,f1,state_uninitialized>,<c4,f1,state_finalized>,<c4,f1,state_follower_active>,<c4,f2,state_uninitialized>,<c4,f2,state_finalized>,<c4,f2,state_follower_active>,<c5,l1,state_uninitialized>,<c5,l1,state_leader_active>,<c5,l1,state_finalized>,<c5,l2,state_uninitialized>,<c5,l2,state_leader_active>,<c5,l2,state_finalized>,<c5,f1,state_uninitialized>,<c5,f1,state_finalized>,<c5,f1,state_follower_active>,<c5,f2,state_uninitialized>,<c5,f2,state_finalized>,<c5,f2,state_follower_active>,<c6,l1,state_uninitialized>,<c6,l1,state_leader_active>,<c6,l1,state_finalized>,<c6,l2,state_uninitialized>,<c6,l2,state_leader_active>,<c6,l2,state_finalized>,<c6,f1,state_uninitialized>,<c6,f1,state_finalized>,<c6,f1,state_follower_active>,<c6,f2,state_uninitialized>,<c6,f2,state_finalized>,<c6,f2,state_follower_active>}
raisedEvent (cur:id, nxt:id, event:id, instance:id) <= {<c1,c2,event_leader_hit,l1>,<c1,c2,event_leader_start,l1>,<c2,c3,event_leader_hit,l1>,<c2,c3,event_leader_start,l1>,<c3,c4,event_leader_hit,l1>,<c3,c4,event_leader_start,l1>,<c4,c5,event_leader_hit,l1>,<c4,c5,event_leader_start,l1>,<c5,c6,event_leader_hit,l1>,<c5,c6,event_leader_start,l1>,<c1,c2,event_leader_hit,l2>,<c1,c2,event_leader_start,l2>,<c2,c3,event_leader_hit,l2>,<c2,c3,event_leader_start,l2>,<c3,c4,event_leader_hit,l2>,<c3,c4,event_leader_start,l2>,<c4,c5,event_leader_hit,l2>,<c4,c5,event_leader_start,l2>,<c5,c6,event_leader_hit,l2>,<c5,c6,event_leader_start,l2>,<c1,c2,event_follower_start,f1>,<c1,c2,event_follower_hit,f1>,<c2,c3,event_follower_start,f1>,<c2,c3,event_follower_hit,f1>,<c3,c4,event_follower_start,f1>,<c3,c4,event_follower_hit,f1>,<c4,c5,event_follower_start,f1>,<c4,c5,event_follower_hit,f1>,<c5,c6,event_follower_start,f1>,<c5,c6,event_follower_hit,f1>,<c1,c2,event_follower_start,f2>,<c1,c2,event_follower_hit,f2>,<c2,c3,event_follower_start,f2>,<c2,c3,event_follower_hit,f2>,<c3,c4,event_follower_start,f2>,<c3,c4,event_follower_hit,f2>,<c4,c5,event_follower_start,f2>,<c4,c5,event_follower_hit,f2>,<c5,c6,event_follower_start,f2>,<c5,c6,event_follower_hit,f2>}
changedInstance (cur:id, nxt:id, instance:id) <= {<c1,c2,l1>,<c1,c2,l2>,<c1,c2,f1>,<c1,c2,f2>,<c2,c3,l1>,<c2,c3,l2>,<c2,c3,f1>,<c2,c3,f2>,<c3,c4,l1>,<c3,c4,l2>,<c3,c4,f1>,<c3,c4,f2>,<c4,c5,l1>,<c4,c5,l2>,<c4,c5,f1>,<c4,c5,f2>,<c5,c6,l1>,<c5,c6,l2>,<c5,c6,f1>,<c5,c6,f2>}

LeaderTimes (config:id, instance:id, times:int) <= {<c1,l1,?>,<c2,l1,?>,<c3,l1,?>,<c4,l1,?>,<c5,l1,?>,<c6,l1,?>,<c1,l2,?>,<c2,l2,?>,<c3,l2,?>,<c4,l2,?>,<c5,l2,?>,<c6,l2,?>}
LeaderFollower (config:id, instance:id, follower:id) <= {<c1,l1,f1>,<c1,l1,f2>,<c2,l1,f1>,<c2,l1,f2>,<c3,l1,f1>,<c3,l1,f2>,<c4,l1,f1>,<c4,l1,f2>,<c5,l1,f1>,<c5,l1,f2>,<c6,l1,f1>,<c6,l1,f2>,<c1,l2,f1>,<c1,l2,f2>,<c2,l2,f1>,<c2,l2,f2>,<c3,l2,f1>,<c3,l2,f2>,<c4,l2,f1>,<c4,l2,f2>,<c5,l2,f1>,<c5,l2,f2>,<c6,l2,f1>,<c6,l2,f2>}
FollowerTimes (config:id, instance:id, times:int) <= {<c1,f1,?>,<c2,f1,?>,<c3,f1,?>,<c4,f1,?>,<c5,f1,?>,<c6,f1,?>,<c1,f2,?>,<c2,f2,?>,<c3,f2,?>,<c4,f2,?>,<c5,f2,?>,<c6,f2,?>}

ParamEventLeaderStartFollower (cur:id, nxt:id, follower:id) <= {<c1,c2,f1>,<c1,c2,f2>,<c2,c3,f1>,<c2,c3,f2>,<c3,c4,f1>,<c3,c4,f2>,<c4,c5,f1>,<c4,c5,f2>,<c5,c6,f1>,<c5,c6,f2>}

// Constraints for the configuration and ordering relations
order ⊆ Config[config as cur] ⨯ Config[config as nxt]
last = Config ∖ order[cur->config]  // There is only one last configuration
back ⊆ Config 
lone back   
loop ⊆ last[config as cur] ⨯ back[config as nxt] // Loop contains at most one tuple going back from the last configuration to the 

// Generic 'Type' constraints    
raisedEvent ⊆ order ⨯ allowedTransitions[event] ⨯ Instance[instance]
instanceInState ⊆ Instance[instance] ⨯ Config ⨯ State
changedInstance ⊆ order ⨯ Instance[instance]
    
// Machine specific `type` constraints
LeaderTimes[config,instance]  ⊆ Config ⨯ (Instance ⨝ Leader)[instance]
LeaderFollower  ⊆ Config ⨯ (Instance ⨝ Leader)[instance] ⨯ (Instance ⨝ Follower)[instance->follower]
FollowerTimes[config,instance]  ⊆ Config ⨯ (Instance ⨝ Follower)[instance]

ParamEventLeaderStartFollower ⊆ order ⨯ (Instance ⨝ Follower)[instance->follower]

// Specific per event
∀ step ∈ order ⨝ raisedEvent | (
  (some (step ⨝ EventLeaderStart) ⇔ one (step ⨝ ParamEventLeaderStartFollower))
)

// Generic: All configurations are reachable
∀ c ∈ Config ∖ first | c ⊆ (first[config as cur] ⨝ ^<cur,nxt>order)[nxt -> config]

// Generic: Every transition can only happen by exactly one event
∀ o ∈ order | one o ⨝ raisedEvent

// Generic: In every configuration all machines have a state
∀ c ∈ Config, inst ∈ Instance | one instanceInState ⨝ c ⨝ inst

// Specific per machine: In every configuration iff a machine is in an initialized state then it must have values
∀ c ∈ Config, inst ∈ (Instance ⨝ Leader)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇔ one LeaderTimes ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Leader)[instance] | (no (((c ⨯ inst) ⨝ instanceInState)[state] ∩ initialized) ⇒ no LeaderFollower ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Leader)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇒ one LeaderFollower ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Follower)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇔ one FollowerTimes ⨝ c ⨝ inst)


// Generic: Transitions are only allowed between if an event is specified between two states
∀ o ∈ order ⨝ raisedEvent | (o[cur as config] ⨝ instanceInState)[state->from] ⨯ (o[nxt as config] ⨝ instanceInState)[state->to] ⨯ o[event] ⊆ allowedTransitions

// Generic predicates
pred forceState[curState: (state:id), nxtState: (state:id), raisedEvent: (event:id)]
  = nxtState = (curState[state as from] ⨝ (allowedTransitions ⨝ raisedEvent))[to->state]

pred inState[config: (config:id), instance: (instance:id), state: (state:id)]
  = ((instance ⨯ config) ⨝ instanceInState)[state] ⊆ state

pred eventLeaderHit[step:(cur:id, nxt:id), leader: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ leader)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ leader)[state],
        curTimes = (cur ⨝ LeaderTimes ⨝ leader)[times->curTimes],
        nxtTimes = (nxt ⨝ LeaderTimes ⨝ leader)[times->nxtTimes],
        curFollower = (cur ⨝ LeaderFollower ⨝ leader)[follower],
        nxtFollower = (nxt ⨝ LeaderFollower ⨝ leader)[follower] |
    ( 
      // Preconditions 
      eventFollowerHit[step, curFollower[follower as instance]]  ∧ 
      // Postconditions
      nxtFollower = curFollower ∧
      (some (curTimes ⨯ nxtTimes) where (nxtTimes = curTimes + 1))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventLeaderHit] ∧
      // Make sure this instance is in the change set
      leader ⊆ (changedInstance ⨝ step)[instance]
    )

pred eventLeaderStart[step:(cur:id, nxt:id), leader: (instance:id), follower: (follower:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ leader)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ leader)[state],
        curTimes = (cur ⨝ LeaderTimes ⨝ leader)[times->curTimes],
        nxtTimes = (nxt ⨝ LeaderTimes ⨝ leader)[times->nxtTimes],
        curFollower = (cur ⨝ LeaderFollower ⨝ leader)[follower],
        nxtFollower = (nxt ⨝ LeaderFollower ⨝ leader)[follower] |
    ( 
      // Preconditions 
      inState[cur, follower[follower->instance], StateFollowerActive]  ∧ 
      // Postconditions
      nxtFollower = follower ∧
      (some (nxtTimes) where (nxtTimes = 0))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventLeaderStart] ∧
      // Make sure this instance is in the change set
      leader ⊆ (changedInstance ⨝ step)[instance]
    )

pred frameLeader[step: (cur:id, nxt:id), leader: (instance:id)] 
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ leader)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ leader)[state],
        curTimes = (cur ⨝ LeaderTimes ⨝ leader)[times->curTimes],
        nxtTimes = (nxt ⨝ LeaderTimes ⨝ leader)[times->nxtTimes],
        curFollower = (cur ⨝ LeaderFollower ⨝ leader)[follower],
        nxtFollower = (nxt ⨝ LeaderFollower ⨝ leader)[follower] | (
    nxtState = curState ∧
    (
      curState ⊆ uninitialized ∨ 
      (// Postconditions
       (some (curTimes ⨯ nxtTimes) where (nxtTimes = curTimes)) ∧
       nxtFollower = curFollower)
    )
  )


pred possibleTransitionsLeader[step: (cur:id, nxt:id)] 
  = ∀ inst ∈ (Instance ⨝ Leader)[instance] |
    (some inst ∩ ((raisedEvent ⨝ step)[instance]) ⇔ (
      (eventLeaderHit[step,inst] ∧
      (step ⨝ raisedEvent)[event] = EventLeaderHit ∧
      let cur = step[cur->config], follower = (LeaderFollower ⨝ cur ⨝ inst)[follower -> instance] | (changedInstance ⨝ step)[instance] ⊆ inst ∪ follower)
      ∨
      (eventLeaderStart[step,inst,(step ⨝ ParamEventLeaderStartFollower)[follower]] ∧
      (step ⨝ raisedEvent)[event] = EventLeaderStart ∧
      (changedInstance ⨝ step)[instance] ⊆ inst)
    ))
    ∧
    (no inst ∩ (changedInstance ⨝ step)[instance] ⇒ frameLeader[step, inst])

pred eventFollowerStart[step:(cur:id, nxt:id), follower: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ follower)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ follower)[state],
        curTimes = (cur ⨝ FollowerTimes ⨝ follower)[times->curTimes],
        nxtTimes = (nxt ⨝ FollowerTimes ⨝ follower)[times->nxtTimes] |
    ( 
       
      // Postconditions
      (some (nxtTimes) where (nxtTimes = 0))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventFollowerStart] ∧
      // Make sure this instance is in the change set
      follower ⊆ (changedInstance ⨝ step)[instance]
    )

pred eventFollowerHit[step:(cur:id, nxt:id), follower: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ follower)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ follower)[state],
        curTimes = (cur ⨝ FollowerTimes ⨝ follower)[times->curTimes],
        nxtTimes = (nxt ⨝ FollowerTimes ⨝ follower)[times->nxtTimes] |
    ( 
       
      // Postconditions
      (some (curTimes ⨯ nxtTimes) where (nxtTimes = curTimes + 2))  ∧ 
      // Generic event conditions
      forceState[curState, nxtState, EventFollowerHit] ∧
      // Make sure this instance is in the change set
      follower ⊆ (changedInstance ⨝ step)[instance]
    )

pred frameFollower[step: (cur:id, nxt:id), follower: (instance:id)] 
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ cur ⨝ follower)[state],
        nxtState = (instanceInState ⨝ nxt ⨝ follower)[state],
        curTimes = (cur ⨝ FollowerTimes ⨝ follower)[times->curTimes],
        nxtTimes = (nxt ⨝ FollowerTimes ⨝ follower)[times->nxtTimes] | (
    nxtState = curState ∧
    (
      curState ⊆ uninitialized ∨ 
      (// Postconditions
       (some (curTimes ⨯ nxtTimes) where (nxtTimes = curTimes)))
    )
  )


pred possibleTransitionsFollower[step: (cur:id, nxt:id)] 
  = ∀ inst ∈ (Instance ⨝ Follower)[instance] |
    (some inst ∩ ((raisedEvent ⨝ step)[instance]) ⇔ (
      (eventFollowerStart[step,inst] ∧
      (step ⨝ raisedEvent)[event] = EventFollowerStart ∧
      (changedInstance ⨝ step)[instance] ⊆ inst)
      ∨
      (eventFollowerHit[step,inst] ∧
      (step ⨝ raisedEvent)[event] = EventFollowerHit ∧
      (changedInstance ⨝ step)[instance] ⊆ inst)
    ))
    ∧
    (no inst ∩ (changedInstance ⨝ step)[instance] ⇒ frameFollower[step, inst])


// Transition function
∀ step ∈ order | possibleTransitionsLeader[step] ∧ possibleTransitionsFollower[step]

// Fact: UniqueFollowers
∀ cur ∈ Config | (∀ l1 ∈ (Leader ⨝ Instance)[instance],l2 ∈ (Leader ⨝ Instance)[instance] | ((inState[cur, l1, initialized] ∧ inState[cur, l2, initialized] ∧ (l1 ⨝ LeaderFollower ⨝ cur)[follower] = (l2 ⨝ LeaderFollower ⨝ cur)[follower]) ⇒ l1 = l2))
// Asserts: this is where the checks get added
∃ cur ∈ Config | (∃ l1 ∈ (Leader ⨝ Instance)[instance],l2 ∈ (Leader ⨝ Instance)[instance] | (inState[cur, l1, initialized] ∧ inState[cur, l2, initialized] ∧ l1 != l2 ∧ (l1 ⨝ LeaderFollower ⨝ cur)[follower] = (l2 ⨝ LeaderFollower ⨝ cur)[follower]))

// Minimize the number of steps by minimizing the number of Configurations
objectives: minimize Config[count()]
