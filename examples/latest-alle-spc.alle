// Static configuration of state machines
PingPong (spec:id) = {<pingpong>}

State (state:id) = {<state_uninitialized>,<state_finalized>,<state_pingpong_ping>,<state_pingpong_pong>}
initialized (state:id) = {<state_pingpong_ping>,<state_pingpong_pong>}
finalized (state:id) = {<state_finalized>}
uninitialized (state:id) = {<state_uninitialized>}
StatePingPongPing (state:id) = {<state_pingpong_ping>}
StatePingPongPong (state:id) = {<state_pingpong_pong>}


allowedTransitions (from:id, to:id, event:id) = {<state_pingpong_pong,state_pingpong_ping,event_pingpong_hit>,<state_uninitialized,state_pingpong_ping,event_pingpong_start>,<state_pingpong_ping,state_pingpong_pong,event_pingpong_hit>}

EventPingPongStart (event:id) = {<event_pingpong_start>}
EventPingPongHit (event:id) = {<event_pingpong_hit>}

// Dynamic configuration of state machines
Config (config:id) >= {<c1>} <= {<c1>,<c2>,<c3>,<c4>,<c5>,<c6>,<c7>,<c8>,<c9>,<c10>}
order (cur:id, nxt:id) <= {<c1,c2>,<c2,c3>,<c3,c4>,<c4,c5>,<c5,c6>,<c6,c7>,<c7,c8>,<c8,c9>,<c9,c10>}
InitialConfig (config:id) = {<c1>}

Instance (spec:id, instance:id) = {<pingpong,p1>,<pingpong,p2>}
instanceInState (config:id, instance:id, state:id) >= {<c1,p1,state_uninitialized>,<c1,p2,state_uninitialized>}<= {<c1,p1,state_uninitialized>,<c1,p1,state_finalized>,<c1,p1,state_pingpong_ping>,<c1,p1,state_pingpong_pong>,<c1,p2,state_uninitialized>,<c1,p2,state_finalized>,<c1,p2,state_pingpong_ping>,<c1,p2,state_pingpong_pong>,<c2,p1,state_uninitialized>,<c2,p1,state_finalized>,<c2,p1,state_pingpong_ping>,<c2,p1,state_pingpong_pong>,<c2,p2,state_uninitialized>,<c2,p2,state_finalized>,<c2,p2,state_pingpong_ping>,<c2,p2,state_pingpong_pong>,<c3,p1,state_uninitialized>,<c3,p1,state_finalized>,<c3,p1,state_pingpong_ping>,<c3,p1,state_pingpong_pong>,<c3,p2,state_uninitialized>,<c3,p2,state_finalized>,<c3,p2,state_pingpong_ping>,<c3,p2,state_pingpong_pong>,<c4,p1,state_uninitialized>,<c4,p1,state_finalized>,<c4,p1,state_pingpong_ping>,<c4,p1,state_pingpong_pong>,<c4,p2,state_uninitialized>,<c4,p2,state_finalized>,<c4,p2,state_pingpong_ping>,<c4,p2,state_pingpong_pong>,<c5,p1,state_uninitialized>,<c5,p1,state_finalized>,<c5,p1,state_pingpong_ping>,<c5,p1,state_pingpong_pong>,<c5,p2,state_uninitialized>,<c5,p2,state_finalized>,<c5,p2,state_pingpong_ping>,<c5,p2,state_pingpong_pong>,<c6,p1,state_uninitialized>,<c6,p1,state_finalized>,<c6,p1,state_pingpong_ping>,<c6,p1,state_pingpong_pong>,<c6,p2,state_uninitialized>,<c6,p2,state_finalized>,<c6,p2,state_pingpong_ping>,<c6,p2,state_pingpong_pong>,<c7,p1,state_uninitialized>,<c7,p1,state_finalized>,<c7,p1,state_pingpong_ping>,<c7,p1,state_pingpong_pong>,<c7,p2,state_uninitialized>,<c7,p2,state_finalized>,<c7,p2,state_pingpong_ping>,<c7,p2,state_pingpong_pong>,<c8,p1,state_uninitialized>,<c8,p1,state_finalized>,<c8,p1,state_pingpong_ping>,<c8,p1,state_pingpong_pong>,<c8,p2,state_uninitialized>,<c8,p2,state_finalized>,<c8,p2,state_pingpong_ping>,<c8,p2,state_pingpong_pong>,<c9,p1,state_uninitialized>,<c9,p1,state_finalized>,<c9,p1,state_pingpong_ping>,<c9,p1,state_pingpong_pong>,<c9,p2,state_uninitialized>,<c9,p2,state_finalized>,<c9,p2,state_pingpong_ping>,<c9,p2,state_pingpong_pong>,<c10,p1,state_uninitialized>,<c10,p1,state_finalized>,<c10,p1,state_pingpong_ping>,<c10,p1,state_pingpong_pong>,<c10,p2,state_uninitialized>,<c10,p2,state_finalized>,<c10,p2,state_pingpong_ping>,<c10,p2,state_pingpong_pong>}
raisedEvent (cur:id, nxt:id, event:id, instance:id) <= {<c1,c2,event_pingpong_hit,p1>,<c1,c2,event_pingpong_start,p1>,<c2,c3,event_pingpong_hit,p1>,<c2,c3,event_pingpong_start,p1>,<c3,c4,event_pingpong_hit,p1>,<c3,c4,event_pingpong_start,p1>,<c4,c5,event_pingpong_hit,p1>,<c4,c5,event_pingpong_start,p1>,<c5,c6,event_pingpong_hit,p1>,<c5,c6,event_pingpong_start,p1>,<c6,c7,event_pingpong_hit,p1>,<c6,c7,event_pingpong_start,p1>,<c7,c8,event_pingpong_hit,p1>,<c7,c8,event_pingpong_start,p1>,<c8,c9,event_pingpong_hit,p1>,<c8,c9,event_pingpong_start,p1>,<c9,c10,event_pingpong_hit,p1>,<c9,c10,event_pingpong_start,p1>,<c1,c2,event_pingpong_hit,p2>,<c1,c2,event_pingpong_start,p2>,<c2,c3,event_pingpong_hit,p2>,<c2,c3,event_pingpong_start,p2>,<c3,c4,event_pingpong_hit,p2>,<c3,c4,event_pingpong_start,p2>,<c4,c5,event_pingpong_hit,p2>,<c4,c5,event_pingpong_start,p2>,<c5,c6,event_pingpong_hit,p2>,<c5,c6,event_pingpong_start,p2>,<c6,c7,event_pingpong_hit,p2>,<c6,c7,event_pingpong_start,p2>,<c7,c8,event_pingpong_hit,p2>,<c7,c8,event_pingpong_start,p2>,<c8,c9,event_pingpong_hit,p2>,<c8,c9,event_pingpong_start,p2>,<c9,c10,event_pingpong_hit,p2>,<c9,c10,event_pingpong_start,p2>}
changedInstance (cur:id, nxt:id, instance:id) <= {<c1,c2,p1>,<c1,c2,p2>,<c2,c3,p1>,<c2,c3,p2>,<c3,c4,p1>,<c3,c4,p2>,<c4,c5,p1>,<c4,c5,p2>,<c5,c6,p1>,<c5,c6,p2>,<c6,c7,p1>,<c6,c7,p2>,<c7,c8,p1>,<c7,c8,p2>,<c8,c9,p1>,<c8,c9,p2>,<c9,c10,p1>,<c9,c10,p2>}

SVPingPongOnePrims (config:id, instance:id, id:int, times:int) <= {<c1,p1,?,?>,<c1,p2,?,?>,<c2,p1,?,?>,<c2,p2,?,?>,<c3,p1,?,?>,<c3,p2,?,?>,<c4,p1,?,?>,<c4,p2,?,?>,<c5,p1,?,?>,<c5,p2,?,?>,<c6,p1,?,?>,<c6,p2,?,?>,<c7,p1,?,?>,<c7,p2,?,?>,<c8,p1,?,?>,<c8,p2,?,?>,<c9,p1,?,?>,<c9,p2,?,?>,<c10,p1,?,?>,<c10,p2,?,?>}



ParamsEventPingPongStartPrimitives (cur:id, nxt:id, id:int) <= {<c1,c2,?>,<c2,c3,?>,<c3,c4,?>,<c4,c5,?>,<c5,c6,?>,<c6,c7,?>,<c7,c8,?>,<c8,c9,?>,<c9,c10,?>}



// Generic 'Type' constraints
order in Config[config as cur] x Config[config as nxt]
raisedEvent in order x allowedTransitions[event] x Instance[instance]
instanceInState in Instance[instance] x Config x State
changedInstance in order x Instance[instance]
    
// Machine specific 'Type' constraints
SVPingPongOnePrims[config,instance] in Config x Instance[instance]

ParamsEventPingPongStartPrimitives[cur,nxt] in order


// Specific per event
∀ o ∈ order ⨝ raisedEvent | (
    (some (o |x| EventPingPongStart) <=> one (o |x| ParamsEventPingPongStartPrimitives))

)
// Generic: All configurations are reachable
forall c : Config - InitialConfig | c in (InitialConfig[config as cur] |x| ^<cur,nxt>order)[nxt -> config]

// Generic: Every transition can only happen by exactly one event
forall o : order | one o |x| raisedEvent

// Generic: In every configuration all machines have a state
forall c : Config, inst : Instance | one instanceInState |x| c |x| inst

// Specific per machine: In every configuration iff a machine is in an initialized state then it must have values
forall c : Config, inst : (Instance |x| PingPong)[instance] | (((c x inst) |x| instanceInState)[state] ⊆ initialized <=> one SVPingPongOnePrims |x| c |x| inst)


// Generic: Transitions are only allowed between if an event is specified between two states
forall o : order |x| raisedEvent | (o[cur as config] ⨝ instanceInState)[state->from] x (o[nxt as config] ⨝ instanceInState)[state->to] x o[event] ⊆ allowedTransitions

// Transition function
forall o : order |  
(
  forall inst : (Instance |x| PingPong)[instance] |  
    let cur = (o[cur as config] |x| SVPingPongOnePrims |x| instanceInState |x| inst)[config -> curConfig, state->curState, instance->curInstance, id->curId, times->curTimes],
        nxt = (o[nxt as config] |x| SVPingPongOnePrims |x| instanceInState |x| inst)[config -> nxtConfig, state->nxtState, instance->instance, id->nxtId, times->nxtTimes] | 
      // Iff this is the instance that raised the event then one of the transitions must have happened 
      (some nxt[instance] & ((raisedEvent |x| o)[instance]) <=> 
        (
          ( // Event PingPong.hit
     
     // Postconditions
     (some (cur x nxt) where (nxtTimes = curTimes  +  1)) &&
     (some (cur x nxt) where (nxtId = curId)) &&
    (o |x| raisedEvent)[event] = EventPingPongHit &&
    nxt[nxtState] = ((o[cur->config] |x| instanceInState |x| inst)[state as from] |x| (allowedTransitions |x| EventPingPongHit))[to->nxtState] && 
    (changedInstance |x| o)[instance] = nxt[instance] // TODO: needs to be extended when syncing events is introduced
  )
  ||
  ( // Event PingPong.start
     
     // Postconditions
     (some (nxt x o |x| ParamsEventPingPongStartPrimitives) where (nxtId = id)) &&
     (some (nxt) where (nxtTimes = 0)) &&
    (o |x| raisedEvent)[event] = EventPingPongStart &&
    nxt[nxtState] = ((o[cur->config] |x| instanceInState |x| inst)[state as from] |x| (allowedTransitions |x| EventPingPongStart))[to->nxtState] && 
    (changedInstance |x| o)[instance] = nxt[instance] // TODO: needs to be extended when syncing events is introduced
  )
        )
      ) 
      &&
      // If it is not a transitioning instance, frame the values
      (no nxt[instance] & (raisedEvent |x| o)[instance] <=> 
        (
          // The instance keeps its current state
          (o[nxt->config] |x| instanceInState |x| inst)[state] = (o[cur->config] |x| instanceInState |x| inst)[state] 
          && (
            // Either there was no values attached yet 
            (no (o[nxt->config] ⨝ SVPingPongOnePrims |x| inst)) 
            || 
            // Or keep the current values
            (some (nxt x cur) where ((nxtId = curId) && (nxtTimes = curTimes)))
          )
      )) 
    
)

// Asserts: this is where the checks get added
exists c: Config, p: SVPingPongOnePrims | some (c |x| p) where times = 5

objectives: minimize(Config[count()])
