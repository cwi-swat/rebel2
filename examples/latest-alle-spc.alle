// Static configuration of state machines
CoffeeMachine (spec:id) = {<coffeemachine>}

State (state:id) = {<state_uninitialized>,<state_finalized>,<state_coffeemachine_waiting>,<state_coffeemachine_serve>,<state_coffeemachine_acceptingpayment>}
initialized (state:id) = {<state_coffeemachine_waiting>,<state_coffeemachine_serve>,<state_coffeemachine_acceptingpayment>}
finalized (state:id) = {<state_finalized>}
uninitialized (state:id) = {<state_uninitialized>}
StateCoffeeMachineWaiting (state:id) = {<state_coffeemachine_waiting>}
StateCoffeeMachineAcceptingPayment (state:id) = {<state_coffeemachine_acceptingpayment>}
StateCoffeeMachineServe (state:id) = {<state_coffeemachine_serve>}


allowedTransitions (from:id, to:id, event:id) = {<state_coffeemachine_waiting,state_coffeemachine_acceptingpayment,event_coffeemachine_selectamericano>,<state_coffeemachine_waiting,state_coffeemachine_acceptingpayment,event_coffeemachine_selectespresso>,<state_coffeemachine_serve,state_coffeemachine_waiting,event_coffeemachine_empty>,<state_coffeemachine_acceptingpayment,state_coffeemachine_serve,event_coffeemachine_pay_amountmet>,<state_coffeemachine_waiting,state_finalized,event_coffeemachine_poweroff>,<state_coffeemachine_serve,state_finalized,event_coffeemachine_poweroff>,<state_coffeemachine_waiting,state_coffeemachine_acceptingpayment,event_coffeemachine_selectlatte>,<state_coffeemachine_waiting,state_coffeemachine_acceptingpayment,event_coffeemachine_selectnormal>,<state_coffeemachine_acceptingpayment,state_coffeemachine_acceptingpayment,event_coffeemachine_pay>,<state_coffeemachine_acceptingpayment,state_coffeemachine_waiting,event_coffeemachine_cancel>,<state_uninitialized,state_coffeemachine_waiting,event_coffeemachine_poweron>,<state_coffeemachine_acceptingpayment,state_finalized,event_coffeemachine_poweroff>}

EventCoffeeMachineSelectNormal (event:id) = {<event_coffeemachine_selectnormal>}
EventCoffeeMachineSelectEspresso (event:id) = {<event_coffeemachine_selectespresso>}
EventCoffeeMachineSelectAmericano (event:id) = {<event_coffeemachine_selectamericano>}
EventCoffeeMachinePay_amountMet (event:id) = {<event_coffeemachine_pay_amountmet>}
EventCoffeeMachineSelectLatte (event:id) = {<event_coffeemachine_selectlatte>}
EventCoffeeMachinePay (event:id) = {<event_coffeemachine_pay>}
EventCoffeeMachineEmpty (event:id) = {<event_coffeemachine_empty>}
EventCoffeeMachinePowerOn (event:id) = {<event_coffeemachine_poweron>}
EventCoffeeMachinePowerOff (event:id) = {<event_coffeemachine_poweroff>}
EventCoffeeMachineCancel (event:id) = {<event_coffeemachine_cancel>}

// Dynamic configuration of state machines
Config (config:id) >= {<c1>} <= {<c1>,<c2>,<c3>,<c4>,<c5>,<c6>,<c7>,<c8>,<c9>,<c10>}
order (cur:id, nxt:id) <= {<c1,c2>,<c2,c3>,<c3,c4>,<c4,c5>,<c5,c6>,<c6,c7>,<c7,c8>,<c8,c9>,<c9,c10>}
InitialConfig (config:id) = {<c1>}

Instance (spec:id, instance:id) = {<coffeemachine,cm1>}
instanceInState (config:id, instance:id, state:id) >= {<c1,cm1,state_uninitialized>}<= {<c1,cm1,state_uninitialized>,<c1,cm1,state_finalized>,<c1,cm1,state_coffeemachine_waiting>,<c1,cm1,state_coffeemachine_serve>,<c1,cm1,state_coffeemachine_acceptingpayment>,<c2,cm1,state_uninitialized>,<c2,cm1,state_finalized>,<c2,cm1,state_coffeemachine_waiting>,<c2,cm1,state_coffeemachine_serve>,<c2,cm1,state_coffeemachine_acceptingpayment>,<c3,cm1,state_uninitialized>,<c3,cm1,state_finalized>,<c3,cm1,state_coffeemachine_waiting>,<c3,cm1,state_coffeemachine_serve>,<c3,cm1,state_coffeemachine_acceptingpayment>,<c4,cm1,state_uninitialized>,<c4,cm1,state_finalized>,<c4,cm1,state_coffeemachine_waiting>,<c4,cm1,state_coffeemachine_serve>,<c4,cm1,state_coffeemachine_acceptingpayment>,<c5,cm1,state_uninitialized>,<c5,cm1,state_finalized>,<c5,cm1,state_coffeemachine_waiting>,<c5,cm1,state_coffeemachine_serve>,<c5,cm1,state_coffeemachine_acceptingpayment>,<c6,cm1,state_uninitialized>,<c6,cm1,state_finalized>,<c6,cm1,state_coffeemachine_waiting>,<c6,cm1,state_coffeemachine_serve>,<c6,cm1,state_coffeemachine_acceptingpayment>,<c7,cm1,state_uninitialized>,<c7,cm1,state_finalized>,<c7,cm1,state_coffeemachine_waiting>,<c7,cm1,state_coffeemachine_serve>,<c7,cm1,state_coffeemachine_acceptingpayment>,<c8,cm1,state_uninitialized>,<c8,cm1,state_finalized>,<c8,cm1,state_coffeemachine_waiting>,<c8,cm1,state_coffeemachine_serve>,<c8,cm1,state_coffeemachine_acceptingpayment>,<c9,cm1,state_uninitialized>,<c9,cm1,state_finalized>,<c9,cm1,state_coffeemachine_waiting>,<c9,cm1,state_coffeemachine_serve>,<c9,cm1,state_coffeemachine_acceptingpayment>,<c10,cm1,state_uninitialized>,<c10,cm1,state_finalized>,<c10,cm1,state_coffeemachine_waiting>,<c10,cm1,state_coffeemachine_serve>,<c10,cm1,state_coffeemachine_acceptingpayment>}
raisedEvent (cur:id, nxt:id, event:id, instance:id) <= {<c1,c2,event_coffeemachine_cancel,cm1>,<c1,c2,event_coffeemachine_selectamericano,cm1>,<c1,c2,event_coffeemachine_selectlatte,cm1>,<c1,c2,event_coffeemachine_selectnormal,cm1>,<c1,c2,event_coffeemachine_poweroff,cm1>,<c1,c2,event_coffeemachine_poweron,cm1>,<c1,c2,event_coffeemachine_pay_amountmet,cm1>,<c1,c2,event_coffeemachine_empty,cm1>,<c1,c2,event_coffeemachine_selectespresso,cm1>,<c1,c2,event_coffeemachine_pay,cm1>,<c2,c3,event_coffeemachine_cancel,cm1>,<c2,c3,event_coffeemachine_selectamericano,cm1>,<c2,c3,event_coffeemachine_selectlatte,cm1>,<c2,c3,event_coffeemachine_selectnormal,cm1>,<c2,c3,event_coffeemachine_poweroff,cm1>,<c2,c3,event_coffeemachine_poweron,cm1>,<c2,c3,event_coffeemachine_pay_amountmet,cm1>,<c2,c3,event_coffeemachine_empty,cm1>,<c2,c3,event_coffeemachine_selectespresso,cm1>,<c2,c3,event_coffeemachine_pay,cm1>,<c3,c4,event_coffeemachine_cancel,cm1>,<c3,c4,event_coffeemachine_selectamericano,cm1>,<c3,c4,event_coffeemachine_selectlatte,cm1>,<c3,c4,event_coffeemachine_selectnormal,cm1>,<c3,c4,event_coffeemachine_poweroff,cm1>,<c3,c4,event_coffeemachine_poweron,cm1>,<c3,c4,event_coffeemachine_pay_amountmet,cm1>,<c3,c4,event_coffeemachine_empty,cm1>,<c3,c4,event_coffeemachine_selectespresso,cm1>,<c3,c4,event_coffeemachine_pay,cm1>,<c4,c5,event_coffeemachine_cancel,cm1>,<c4,c5,event_coffeemachine_selectamericano,cm1>,<c4,c5,event_coffeemachine_selectlatte,cm1>,<c4,c5,event_coffeemachine_selectnormal,cm1>,<c4,c5,event_coffeemachine_poweroff,cm1>,<c4,c5,event_coffeemachine_poweron,cm1>,<c4,c5,event_coffeemachine_pay_amountmet,cm1>,<c4,c5,event_coffeemachine_empty,cm1>,<c4,c5,event_coffeemachine_selectespresso,cm1>,<c4,c5,event_coffeemachine_pay,cm1>,<c5,c6,event_coffeemachine_cancel,cm1>,<c5,c6,event_coffeemachine_selectamericano,cm1>,<c5,c6,event_coffeemachine_selectlatte,cm1>,<c5,c6,event_coffeemachine_selectnormal,cm1>,<c5,c6,event_coffeemachine_poweroff,cm1>,<c5,c6,event_coffeemachine_poweron,cm1>,<c5,c6,event_coffeemachine_pay_amountmet,cm1>,<c5,c6,event_coffeemachine_empty,cm1>,<c5,c6,event_coffeemachine_selectespresso,cm1>,<c5,c6,event_coffeemachine_pay,cm1>,<c6,c7,event_coffeemachine_cancel,cm1>,<c6,c7,event_coffeemachine_selectamericano,cm1>,<c6,c7,event_coffeemachine_selectlatte,cm1>,<c6,c7,event_coffeemachine_selectnormal,cm1>,<c6,c7,event_coffeemachine_poweroff,cm1>,<c6,c7,event_coffeemachine_poweron,cm1>,<c6,c7,event_coffeemachine_pay_amountmet,cm1>,<c6,c7,event_coffeemachine_empty,cm1>,<c6,c7,event_coffeemachine_selectespresso,cm1>,<c6,c7,event_coffeemachine_pay,cm1>,<c7,c8,event_coffeemachine_cancel,cm1>,<c7,c8,event_coffeemachine_selectamericano,cm1>,<c7,c8,event_coffeemachine_selectlatte,cm1>,<c7,c8,event_coffeemachine_selectnormal,cm1>,<c7,c8,event_coffeemachine_poweroff,cm1>,<c7,c8,event_coffeemachine_poweron,cm1>,<c7,c8,event_coffeemachine_pay_amountmet,cm1>,<c7,c8,event_coffeemachine_empty,cm1>,<c7,c8,event_coffeemachine_selectespresso,cm1>,<c7,c8,event_coffeemachine_pay,cm1>,<c8,c9,event_coffeemachine_cancel,cm1>,<c8,c9,event_coffeemachine_selectamericano,cm1>,<c8,c9,event_coffeemachine_selectlatte,cm1>,<c8,c9,event_coffeemachine_selectnormal,cm1>,<c8,c9,event_coffeemachine_poweroff,cm1>,<c8,c9,event_coffeemachine_poweron,cm1>,<c8,c9,event_coffeemachine_pay_amountmet,cm1>,<c8,c9,event_coffeemachine_empty,cm1>,<c8,c9,event_coffeemachine_selectespresso,cm1>,<c8,c9,event_coffeemachine_pay,cm1>,<c9,c10,event_coffeemachine_cancel,cm1>,<c9,c10,event_coffeemachine_selectamericano,cm1>,<c9,c10,event_coffeemachine_selectlatte,cm1>,<c9,c10,event_coffeemachine_selectnormal,cm1>,<c9,c10,event_coffeemachine_poweroff,cm1>,<c9,c10,event_coffeemachine_poweron,cm1>,<c9,c10,event_coffeemachine_pay_amountmet,cm1>,<c9,c10,event_coffeemachine_empty,cm1>,<c9,c10,event_coffeemachine_selectespresso,cm1>,<c9,c10,event_coffeemachine_pay,cm1>}
changedInstance (cur:id, nxt:id, instance:id) <= {<c1,c2,cm1>,<c2,c3,cm1>,<c3,c4,cm1>,<c4,c5,cm1>,<c5,c6,cm1>,<c6,c7,cm1>,<c7,c8,cm1>,<c8,c9,cm1>,<c9,c10,cm1>}

StateVectorCoffeeMachinePrimitives (config:id, instance:id, id:int, amountNeeded:int) <= {<c1,cm1,?,?>,<c2,cm1,?,?>,<c3,cm1,?,?>,<c4,cm1,?,?>,<c5,cm1,?,?>,<c6,cm1,?,?>,<c7,cm1,?,?>,<c8,cm1,?,?>,<c9,cm1,?,?>,<c10,cm1,?,?>}

ParamsEventCoffeeMachinePowerOnPrimitives (cur:id, nxt:id, id:int) <= {<c1,c2,?>,<c2,c3,?>,<c3,c4,?>,<c4,c5,?>,<c5,c6,?>,<c6,c7,?>,<c7,c8,?>,<c8,c9,?>,<c9,c10,?>} 
ParamsEventCoffeeMachinePayPrimitives (cur:id, nxt:id, amount:int) <= {<c1,c2,?>,<c2,c3,?>,<c3,c4,?>,<c4,c5,?>,<c5,c6,?>,<c6,c7,?>,<c7,c8,?>,<c8,c9,?>,<c9,c10,?>} 
ParamsEventCoffeeMachinePay_amountMetPrimitives (cur:id, nxt:id, amount:int) <= {<c1,c2,?>,<c2,c3,?>,<c3,c4,?>,<c4,c5,?>,<c5,c6,?>,<c6,c7,?>,<c7,c8,?>,<c8,c9,?>,<c9,c10,?>} 

// Generic 'Type' constraints
order in Config[config as cur] x Config[config as nxt]
raisedEvent in order x allowedTransitions[event] x Instance[instance]
instanceInState in Instance[instance] x Config x State
changedInstance in order x Instance[instance]
    
// Machine specific 'Type' constraints
StateVectorCoffeeMachinePrimitives[config,instance] in Config x Instance[instance]

// Generic: All configurations are reachable
forall c : Config - InitialConfig | c in (InitialConfig[config as cur] |x| ^<cur,nxt>order)[nxt -> config]

// Generic: Every transition can only happen by exactly one event
forall o : order | one o |x| raisedEvent

// Generic: In every configuration all machines have a state
forall c : Config, inst : Instance | one instanceInState |x| c |x| inst

// Specific per machine: In every configuration iff a machine is in an initialized state then it must have values
forall c : Config, inst : (Instance |x| CoffeeMachine)[instance] | (((c x inst) |x| instanceInState)[state] ⊆ initialized <=> one StateVectorCoffeeMachinePrimitives |x| c |x| inst)


// Generic: Transitions are only allowed between if an event is specified between two states
forall o : order |x| raisedEvent | (o[cur as config] ⨝ instanceInState)[state->from] x (o[nxt as config] ⨝ instanceInState)[state->to] x o[event] ⊆ allowedTransitions

// Transition function
forall o : order |  
  // Possible transitions for CoffeeMachine
  (
    forall inst : (Instance |x| CoffeeMachine)[instance] |  
      let cur = (o[cur as config] |x| StateVectorCoffeeMachinePrimitives |x| instanceInState |x| inst)[config -> curConfig, state->curState, instance->curInstance, id->curId, amountNeeded->curAmountNeeded],
          nxt = (o[nxt as config] |x| StateVectorCoffeeMachinePrimitives |x| instanceInState |x| inst)[config -> nxtConfig, state->nxtState, instance->instance, id->nxtId, amountNeeded->nxtAmountNeeded] | 
        // Iff this is the instance that raised the event then one of the transitions must have happened 
        (some nxt[instance] & ((raisedEvent |x| o)[instance]) <=> 
          (
            ( // Event CoffeeMachine.selectEspresso
       
       // Postconditions
       (some (cur x nxt) where (nxtId = curId)) &&
       (some (nxt) where (nxtAmountNeeded = 120)) &&
      (o |x| raisedEvent)[event] = EventCoffeeMachineSelectEspresso &&
      nxt[nxtState] = ((o[cur->config] |x| instanceInState |x| inst)[state as from] |x| (allowedTransitions |x| EventCoffeeMachineSelectEspresso))[to->nxtState] && 
      (changedInstance |x| o)[instance] = nxt[instance] // TODO: needs to be extended when syncing events is introduced
    )
    ||
    ( // Event CoffeeMachine.cancel
       
       // Postconditions
       (some (cur x nxt) where (nxtId = curId)) &&
       (some (nxt) where (nxtAmountNeeded = 0)) &&
      (o |x| raisedEvent)[event] = EventCoffeeMachineCancel &&
      nxt[nxtState] = ((o[cur->config] |x| instanceInState |x| inst)[state as from] |x| (allowedTransitions |x| EventCoffeeMachineCancel))[to->nxtState] && 
      (changedInstance |x| o)[instance] = nxt[instance] // TODO: needs to be extended when syncing events is introduced
    )
    ||
    ( // Event CoffeeMachine.empty
       
       // Postconditions
       (some (cur x nxt) where (nxtId = curId)) &&
       (some (cur x nxt) where (nxtAmountNeeded = curAmountNeeded)) &&
      (o |x| raisedEvent)[event] = EventCoffeeMachineEmpty &&
      nxt[nxtState] = ((o[cur->config] |x| instanceInState |x| inst)[state as from] |x| (allowedTransitions |x| EventCoffeeMachineEmpty))[to->nxtState] && 
      (changedInstance |x| o)[instance] = nxt[instance] // TODO: needs to be extended when syncing events is introduced
    )
    ||
    ( // Event CoffeeMachine.selectNormal
       
       // Postconditions
       (some (cur x nxt) where (nxtId = curId)) &&
       (some (nxt) where (nxtAmountNeeded = 100)) &&
      (o |x| raisedEvent)[event] = EventCoffeeMachineSelectNormal &&
      nxt[nxtState] = ((o[cur->config] |x| instanceInState |x| inst)[state as from] |x| (allowedTransitions |x| EventCoffeeMachineSelectNormal))[to->nxtState] && 
      (changedInstance |x| o)[instance] = nxt[instance] // TODO: needs to be extended when syncing events is introduced
    )
    ||
    ( // Event CoffeeMachine.powerOn
       
       // Postconditions
       (some (nxt x o |x| ParamsEventCoffeeMachinePowerOnPrimitives) where (nxtId = id)) &&
       (some (nxt) where (nxtAmountNeeded = 0)) &&
      (o |x| raisedEvent)[event] = EventCoffeeMachinePowerOn &&
      nxt[nxtState] = ((o[cur->config] |x| instanceInState |x| inst)[state as from] |x| (allowedTransitions |x| EventCoffeeMachinePowerOn))[to->nxtState] && 
      (changedInstance |x| o)[instance] = nxt[instance] // TODO: needs to be extended when syncing events is introduced
    )
    ||
    ( // Event CoffeeMachine.pay
       // Preconditions 
       (some (cur x o |x| ParamsEventCoffeeMachinePayPrimitives) where (curAmountNeeded  -  amount > 0)) &&
       // Postconditions
       (some (cur x nxt) where (nxtId = curId)) &&
       (some (cur x nxt x o |x| ParamsEventCoffeeMachinePayPrimitives) where (nxtAmountNeeded = curAmountNeeded  -  amount)) &&
      (o |x| raisedEvent)[event] = EventCoffeeMachinePay &&
      nxt[nxtState] = ((o[cur->config] |x| instanceInState |x| inst)[state as from] |x| (allowedTransitions |x| EventCoffeeMachinePay))[to->nxtState] && 
      (changedInstance |x| o)[instance] = nxt[instance] // TODO: needs to be extended when syncing events is introduced
    )
    ||
    ( // Event CoffeeMachine.powerOff
       
       // Postconditions
       (some (cur x nxt) where (nxtId = curId)) &&
       (some (cur x nxt) where (nxtAmountNeeded = curAmountNeeded)) &&
      (o |x| raisedEvent)[event] = EventCoffeeMachinePowerOff &&
      nxt[nxtState] = ((o[cur->config] |x| instanceInState |x| inst)[state as from] |x| (allowedTransitions |x| EventCoffeeMachinePowerOff))[to->nxtState] && 
      (changedInstance |x| o)[instance] = nxt[instance] // TODO: needs to be extended when syncing events is introduced
    )
    ||
    ( // Event CoffeeMachine.pay_amountMet
       // Preconditions 
       (some (cur x o |x| ParamsEventCoffeeMachinePay_amountMetPrimitives) where (curAmountNeeded  -  amount = 0)) &&
       // Postconditions
       (some (cur x nxt) where (nxtId = curId)) &&
       (some (nxt) where (nxtAmountNeeded = 0)) &&
      (o |x| raisedEvent)[event] = EventCoffeeMachinePay_amountMet &&
      nxt[nxtState] = ((o[cur->config] |x| instanceInState |x| inst)[state as from] |x| (allowedTransitions |x| EventCoffeeMachinePay_amountMet))[to->nxtState] && 
      (changedInstance |x| o)[instance] = nxt[instance] // TODO: needs to be extended when syncing events is introduced
    )
    ||
    ( // Event CoffeeMachine.selectAmericano
       
       // Postconditions
       (some (cur x nxt) where (nxtId = curId)) &&
       (some (nxt) where (nxtAmountNeeded = 130)) &&
      (o |x| raisedEvent)[event] = EventCoffeeMachineSelectAmericano &&
      nxt[nxtState] = ((o[cur->config] |x| instanceInState |x| inst)[state as from] |x| (allowedTransitions |x| EventCoffeeMachineSelectAmericano))[to->nxtState] && 
      (changedInstance |x| o)[instance] = nxt[instance] // TODO: needs to be extended when syncing events is introduced
    )
    ||
    ( // Event CoffeeMachine.selectLatte
       
       // Postconditions
       (some (cur x nxt) where (nxtId = curId)) &&
       (some (nxt) where (nxtAmountNeeded = 150)) &&
      (o |x| raisedEvent)[event] = EventCoffeeMachineSelectLatte &&
      nxt[nxtState] = ((o[cur->config] |x| instanceInState |x| inst)[state as from] |x| (allowedTransitions |x| EventCoffeeMachineSelectLatte))[to->nxtState] && 
      (changedInstance |x| o)[instance] = nxt[instance] // TODO: needs to be extended when syncing events is introduced
    )
          )
        ) 
        &&
        // If it is not a transitioning instance, frame the values
        (no nxt[instance] & (raisedEvent |x| o)[instance] <=> 
          (
            // The instance keeps its current state
            (o[nxt->config] |x| instanceInState |x| inst)[state] = (o[cur->config] |x| instanceInState |x| inst)[state] 
            && (
              // Either there was no values attached yet 
              (no (o[nxt->config] ⨝ StateVectorCoffeeMachinePrimitives |x| inst)) 
              || 
              // Or keep the current values
              (some (nxt x cur) where ((nxtId = curId) && (nxtAmountNeeded = curAmountNeeded)))
            )
        )) 
      
  )
  

// Asserts: this is where the checks get added
exists c: Config | (c |x| instanceInState)[state] in StateCoffeeMachineServe

objectives: minimize(Config[count()])
