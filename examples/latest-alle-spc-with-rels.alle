// Static configuration of state machines
Follower (spec:id) = {<follower>}
Leader (spec:id) = {<leader>}

State (state:id) = {<state_uninitialized>,<state_finalized>,<state_follower_active>,<state_leader_active>}
initialized (state:id) = {<state_follower_active>,<state_leader_active>}
finalized (state:id) = {<state_finalized>}
uninitialized (state:id) = {<state_uninitialized>}
StateFollowerActive (state:id) = {<state_follower_active>}

StateLeaderActive (state:id) = {<state_leader_active>}


allowedTransitions (from:id, to:id, event:id) = {<state_follower_active,state_follower_active,event_follower_hit>,<state_uninitialized,state_follower_active,event_follower_start>,<state_uninitialized,state_leader_active,event_leader_start>,<state_leader_active,state_leader_active,event_leader_hit>}

EventLeaderStart (event:id) = {<event_leader_start>}
EventFollowerStart (event:id) = {<event_follower_start>}
EventLeaderHit (event:id) = {<event_leader_hit>}
EventFollowerHit (event:id) = {<event_follower_hit>}

// Dynamic configuration of state machines
Config (config:id) >= {<c1>} <= {<c1>,<c2>,<c3>,<c4>,<c5>}
order (cur:id, nxt:id) <= {<c1,c2>,<c2,c3>,<c3,c4>,<c4,c5>}
InitialConfig (config:id) = {<c1>}

Instance (spec:id, instance:id) = {<follower,f1>,<leader,l1>}

instanceInState (config:id, instance:id, state:id) >= {<c1,f1,state_uninitialized>,<c1,l1,state_uninitialized>}<= {<c1,f1,state_uninitialized>,<c1,f1,state_finalized>,<c1,f1,state_follower_active>,<c1,l1,state_uninitialized>,<c1,l1,state_leader_active>,<c1,l1,state_finalized>,<c2,f1,state_uninitialized>,<c2,f1,state_finalized>,<c2,f1,state_follower_active>,<c2,l1,state_uninitialized>,<c2,l1,state_leader_active>,<c2,l1,state_finalized>,<c3,f1,state_uninitialized>,<c3,f1,state_finalized>,<c3,f1,state_follower_active>,<c3,l1,state_uninitialized>,<c3,l1,state_leader_active>,<c3,l1,state_finalized>,<c4,f1,state_uninitialized>,<c4,f1,state_finalized>,<c4,f1,state_follower_active>,<c4,l1,state_uninitialized>,<c4,l1,state_leader_active>,<c4,l1,state_finalized>,<c5,f1,state_uninitialized>,<c5,f1,state_finalized>,<c5,f1,state_follower_active>,<c5,l1,state_uninitialized>,<c5,l1,state_leader_active>,<c5,l1,state_finalized>}
raisedEvent (cur:id, nxt:id, event:id, instance:id) <= {<c1,c2,event_follower_start,f1>,<c1,c2,event_follower_hit,f1>,<c2,c3,event_follower_start,f1>,<c2,c3,event_follower_hit,f1>,<c3,c4,event_follower_start,f1>,<c3,c4,event_follower_hit,f1>,<c4,c5,event_follower_start,f1>,<c4,c5,event_follower_hit,f1>,<c1,c2,event_leader_hit,l1>,<c1,c2,event_leader_start,l1>,<c2,c3,event_leader_hit,l1>,<c2,c3,event_leader_start,l1>,<c3,c4,event_leader_hit,l1>,<c3,c4,event_leader_start,l1>,<c4,c5,event_leader_hit,l1>,<c4,c5,event_leader_start,l1>}
changedInstance (cur:id, nxt:id, instance:id) <= {<c1,c2,l1>,<c1,c2,f1>,<c2,c3,l1>,<c2,c3,f1>,<c3,c4,l1>,<c3,c4,f1>,<c4,c5,l1>,<c4,c5,f1>}

StateVectorFollowerPrimitives (config:id, instance:id, id:int, times:int) <= {<c1,f1,?,?>,<c2,f1,?,?>,<c3,f1,?,?>,<c4,f1,?,?>,<c5,f1,?,?>}
StateVectorLeaderPrimitives (config:id, instance:id, id:int, times:int) <= {<c1,l1,?,?>,<c2,l1,?,?>,<c3,l1,?,?>,<c4,l1,?,?>,<c5,l1,?,?>}
SVLeaderFollower(config:id, instance:id, follower:id) <= {<c1,l1,f1>,<c2,l1,f1>,<c3,l1,f1>,<c4,l1,f1>,<c5,l1,f1>}

ParamsEventFollowerStartPrimitives (cur:id, nxt:id, id:int) <= {<c1,c2,?>,<c2,c3,?>,<c3,c4,?>,<c4,c5,?>}
 
ParamsEventLeaderStartPrimitives (cur:id, nxt:id, id:int) <= {<c1,c2,?>,<c2,c3,?>,<c3,c4,?>,<c4,c5,?>} 
ParamsEventLeaderStartFollower (cur:id, nxt:id, follower:id) <= {<c1,c2,f1>,<c2,c3,f1>,<c3,c4,f1>,<c4,c5,f1>}

// Generic 'Type' constraints
order ⊆ Config[config as cur] ⨯ Config[config as nxt]
raisedEvent ⊆ order ⨯ allowedTransitions[event] ⨯ Instance[instance]
instanceInState ⊆ Instance[instance] ⨯ Config ⨯ State
changedInstance ⊆ order ⨯ Instance[instance]
    
// Machine specific 'Type' constraints
StateVectorFollowerPrimitives[config,instance] ⊆ Config ⨯ Instance[instance]
StateVectorLeaderPrimitives[config,instance] ⊆ Config ⨯ Instance[instance]

SVLeaderFollower ⊆ Config ⨯ (Instance)[instance] ⨯ (Instance)[instance->follower]
// multiplicity constraint, follower is a one-2-one mapping
∀ c ∈ Config | lone SVLeaderFollower ⨝ c

∀ c ∈ Config ∖ InitialConfig | c ⊆ (InitialConfig[config as cur] ⨝ ^<cur,nxt>order)[nxt -> config]

// Generic: Every transition can only happen by exactly one event
∀ o ∈ order | one o ⨝ raisedEvent

// Generic: In every configuration all machines have a state
∀ c ∈ Config, inst ∈ Instance | one instanceInState ⨝ c ⨝ inst

// Specific per machine: In every configuration iff a machine is in an initialized state then it must have values
∀ c ∈ Config, inst ∈ (Instance ⨝ Follower)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇔ one StateVectorFollowerPrimitives ⨝ c ⨝ inst)

∀ c ∈ Config, inst ∈ (Instance ⨝ Leader)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇔ (one StateVectorLeaderPrimitives ⨝ c ⨝ inst))
∀ c ∈ Config, inst ∈ (Instance ⨝ Leader)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇔ (one SVLeaderFollower ⨝ c ⨝ inst))

// Generic: Transitions are only allowed between if an event is specified between two states
∀ o ∈ order ⨝ raisedEvent | (o[cur as config] ⨝ instanceInState)[state->from] ⨯ (o[nxt as config] ⨝ instanceInState)[state->to] ⨯ o[event] ⊆ allowedTransitions

// Transition function
∀ o ∈ order | (
  ∀ inst ∈ (Instance ⨝ Follower)[instance] | let cur = (o[cur as config] ⨝ StateVectorFollowerPrimitives ⨝ instanceInState ⨝ inst)[config -> curConfig, state->curState, instance->curInstance, id->curId, times->curTimes],
        nxt = (o[nxt as config] ⨝ StateVectorFollowerPrimitives ⨝ instanceInState ⨝ inst)[config -> nxtConfig, state->nxtState, instance->instance, id->nxtId, times->nxtTimes] | 
      // Iff this is the instance that raised the event then one of the transitions must have happened 
      (some nxt[instance] ∩ ((raisedEvent ⨝ o)[instance]) ⇔ (
          ( // Event Follower.start
     // Preconditions 
     (some (o ⨝ ParamsEventFollowerStartPrimitives) where (id > 0)) ∧ (some (nxt ⨯ o ⨝ ParamsEventFollowerStartPrimitives) where (nxtId = id)) ∧ (some (nxt) where (nxtTimes = 0)) ∧ (o ⨝ raisedEvent)[event] = EventFollowerStart ∧ nxt[nxtState] = ((o[cur->config] ⨝ instanceInState ⨝ inst)[state as from] ⨝ (allowedTransitions ⨝ EventFollowerStart))[to->nxtState] ∧ (changedInstance ⨝ o)[instance] = nxt[instance] // TODO: needs to be extended when syncing events is introduced
  ) ∨ ( // Event Follower.hit
     
     // Postconditions
     (some (cur ⨯ nxt) where (nxtId = curId)) ∧ (some (cur ⨯ nxt) where (nxtTimes = curTimes  +  1)) ∧ (o ⨝ raisedEvent)[event] = EventFollowerHit ∧ nxt[nxtState] = ((o[cur->config] ⨝ instanceInState ⨝ inst)[state as from] ⨝ (allowedTransitions ⨝ EventFollowerHit))[to->nxtState] ∧ (changedInstance ⨝ o)[instance] = nxt[instance] // TODO: needs to be extended when syncing events is introduced
  )
        )
      ) ∧ (no nxt[instance] ∩ (raisedEvent ⨝ o)[instance] ⇔ (
          // The instance keeps its current state
          (o[nxt->config] ⨝ instanceInState ⨝ inst)[state] = (o[cur->config] ⨝ instanceInState ⨝ inst)[state] ∧ (
            // Either there was no values attached yet 
            (no (o[nxt->config] ⨝ StateVectorFollowerPrimitives ⨝ inst)) ∨ (some (nxt ⨯ cur) where ((nxtId = curId) && (nxtTimes = curTimes)))
          )
      )) 
    
) ∧ (
  ∀ inst ∈ (Instance ⨝ Leader)[instance] | let cur = (o[cur as config] ⨝ StateVectorLeaderPrimitives ⨝ instanceInState ⨝ inst)[config -> curConfig, state->curState, instance->curInstance, id->curId, times->curTimes],
        nxt = (o[nxt as config] ⨝ StateVectorLeaderPrimitives ⨝ instanceInState ⨝ inst)[config -> nxtConfig, state->nxtState, instance->instance, id->nxtId, times->nxtTimes] | 
      // Iff this is the instance that raised the event then one of the transitions must have happened 
      (some nxt[instance] ∩ ((raisedEvent ⨝ o)[instance]) ⇔ (
        ( // Event Leader.hit
          // Postconditions
          (some (cur ⨯ nxt) where (nxtId = curId)) ∧ 
          (some (cur ⨯ nxt) where (nxtTimes = curTimes  +  1)) ∧ 
          (o ⨝ raisedEvent)[event] = EventLeaderHit ∧ 
          nxt[nxtState] = ((o[cur->config] ⨝ instanceInState ⨝ inst)[state as from] ⨝ (allowedTransitions ⨝ EventLeaderHit))[to->nxtState] ∧ 
          (changedInstance ⨝ o)[instance] = nxt[instance] // TODO: needs to be extended when syncing events is introduced
        ) 
        ∨ 
        ( // Event Leader.start
          // Preconditions 
          (some (o ⨝ ParamsEventLeaderStartPrimitives) where (id > 0)) ∧ 
          ((o ⨝ ParamsEventLeaderStartFollower)[cur->config, follower->instance] ⨝ instanceInState)[state] ⊆ initialized ∧ 
          // Postconditions
          (some (nxt ⨯ o ⨝ ParamsEventLeaderStartPrimitives) where (nxtId = id)) ∧ 
          (some (nxt) where (nxtTimes = 0)) ∧ 
          (nxt ⨝ SVLeaderFollower)[follower] = (o ⨝ ParamsEventLeaderStartFollower)[follower] ∧ 
          (o ⨝ raisedEvent)[event] = EventLeaderStart ∧ nxt[nxtState] = ((o[cur->config] ⨝ instanceInState ⨝ inst)[state as from] ⨝ (allowedTransitions ⨝ EventLeaderStart))[to->nxtState] ∧ 
          (changedInstance ⨝ o)[instance] = nxt[instance] // TODO: needs to be extended when syncing events is introduced
        )
      )) 
      ∧ (no nxt[instance] ∩ (raisedEvent ⨝ o)[instance] ⇔ (
          // The instance keeps its current state
          (o[nxt->config] ⨝ instanceInState ⨝ inst)[state] = (o[cur->config] ⨝ instanceInState ⨝ inst)[state] ∧ (
            // Either there was no values attached yet 
            (
              (no (o[nxt->config] ⨝ StateVectorLeaderPrimitives ⨝ inst)) //∧ 
             // (no (o[nxt->config] ⨝ SVLeaderFollower ⨝ inst))
            )
            ∨ 
            (
              (some (nxt ⨯ cur) where ((nxtId = curId) && (nxtTimes = curTimes))) //∧ 
             // (o[nxt->config] ⨝ SVLeaderFollower)[follower] = (o[cur->config] ⨝ SVLeaderFollower)[follower]
            ) 
          )
      )) 
    
)

// Asserts: this is where the checks get added
∃ c ∈ Config, f ∈ StateVectorFollowerPrimitives, l ∈ StateVectorLeaderPrimitives | (some (c ⨝ f) where times = 1 ∧ some (c ⨝ l) where times = 1)

objectives: minimize(Config[count()])
