module RopeBridge

spec Adventurer
  timeToCross: Integer;
    
  internal event cross(crossingTime: Integer)
    pre: crossingTime = this.timeToCross;
    
  states:
    near -> far: cross;
    far -> near: cross;
    
spec FlashLight
  totalTimeSpend: Integer;
  
  event crossNearToFar(p1: Adventurer, p2: Adventurer, p1CrossingTime: Integer, p2CrossingTime: Integer)
    pre: 
      p1 is near, p2 is near,
      p1.cross(p1CrossingTime), p2.cross(p2CrossingTime);
    post:
      if p1CrossingTime > p2CrossingTime 
        then this.totalTimeSpend' = this.totalTimeSpend + p1CrossingTime
        else this.totalTimeSpend' = this.totalTimeSpend + p2CrossingTime;
      
  event crossFarToNear(p: Adventurer, crossingTime: Integer)
    pre: p is far, p.cross(crossingTime);
    post: this.totalTimeSpend' >= this.totalTimeSpend + crossingTime; 
    
  states:
    near -> far: crossNearToFar;
    far -> near: crossFarToNear;   
      
assert EverybodyCrossedInTheLeastTime
  = eventually ((forall a: Adventurer | a is far) && (exists fl: FlashLight | fl.totalTimeSpend = 17));

config EverybodyNear
  = a1,a2,a3,a4: Adventurer is near, 
    fl: FlashLight is near with totalTimeSpend = 0,
    a1 with timeToCross = 1,
    a2 with timeToCross = 2,  
    a3 with timeToCross = 5,
    a4 with timeToCross = 10;
  
check EverybodyCrossedInTheLeastTime from EverybodyNear in max 6 steps;  

