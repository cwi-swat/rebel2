module sync::double::Leader

import sync::double::Follower 
  
spec Leader   
  times: Integer,
  follower: Follower; 

  event start(follower: Follower) 
    pre: 
      follower is active; 
    post:  
      this.follower' = follower, 
      this.times' = 0; 
   
  event hit() 
    pre: this.follower.hit(this.times);  
    post: this.times' = this.times + 1; 
  
  states : 
    (*) -> active : start;
    active -> active : hit;

fact UniqueFollowers
  = always forall l1,l2: Leader | 
    ((l1 is initialized && l2 is initialized && l1.follower = l2.follower) => l1 = l2);
    
config OneLeaderAndFollower = l: Leader, f: Follower;
config TwoLeadersAndFollowers = l1,l2: Leader, f1,f2: Follower;

assert FollowerHit4Times = eventually exists f: Follower | f.times > 3;
  
check FollowerHit4Times from TwoLeadersAndFollowers in max 7 steps;       
    