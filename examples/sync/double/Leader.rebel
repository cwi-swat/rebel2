module sync::double::Leader

import sync::double::Follower 
  
spec Leader   
  times: Integer,
  follower: Follower; 

  init event start(follower: Follower) 
    pre: 
      follower is active; 
    post:  
      this.follower' = follower, 
      this.times' = 0; 
   
  event hit() 
    pre: this.follower.hit(); 
    post: this.times' = this.times + 1; 
  
  states : 
    (*) -> active : start;
    active -> active : hit;

fact UniqueFollowers
  = always forall l1,l2: Leader | 
    ((l1 is initialized && l2 is initialized && l1.follower = l2.follower) => l1 = l2);
    
config TwoOfEachUninitialized
  = l1, l2: Leader is uninitialized,
    f1, f2: Follower is uninitialized;
    
assert AllLeadersActive
  = eventually forall l: Leader | l is active;
     
assert UniqueFollower
  = eventually exists l1: Leader, l2: Leader | 
      (l1 is initialized && l2 is initialized && l1 != l2 && l1.follower = l2.follower);
 
check UniqueFollower starting at TwoOfEachUninitialized in max 5 steps;
    