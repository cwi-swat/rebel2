module paper::example::Date
 
spec Date [NOW*]
  year: Integer,
  month: Integer,  
  day: Integer;
    
  pred after(other: Date) =
    (this.year > other.year) ||
    (this.year = other.year && this.month > other.month) ||
    (this.year = other.year && this.month = other.month && this.day > other.day);

  fact CorrectDate
    = always forall d:Date | (
        d.year >= 1900 && d.year <= 2200 &&
        d.month > 0 && d.month < 13 &&
        d.day > 0 && 
        if d.month = 1 then d.day < 32 else
        if d.month = 2 then d.day < 30 else
        if d.month = 3 then d.day < 32 else
        if d.month = 4 then d.day < 31 else
        if d.month = 5 then d.day < 32 else
        if d.month = 6 then d.day < 31 else 
        if d.month = 7 then d.day < 32 else
        if d.month = 8 then d.day < 32 else
        if d.month = 9 then d.day < 31 else
        if d.month = 10 then d.day < 32 else
        if d.month = 11 then d.day < 31 else 
        d.day < 32);  
  
assert SomeInitializedDate = eventually exists d: Date | d.after(Date[NOW]);

config SomeDates = d1: Date; 
 
run SomeInitializedDate from SomeDates in max 0 steps;
      