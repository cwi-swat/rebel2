module paper::example::Account

import paper::example::AccountNumber
import paper::example::Date

spec Account
  nr: AccountNumber,  
  balance: Integer,
  openedOn: Date; 
   
  init event open(nr: AccountNumber, openedOn: Date)
    post: this.nr' = nr, this.balance' = 0, this.openedOn' = openedOn;
    
  event isBalance(balance: Integer) 
    pre: this.balance = balance;  
    
  event deposit(amount: Integer)
    pre: amount > 0;
    post: this.balance' = this.balance + amount;
    
  event withdraw(amount: Integer)
    pre: amount > 0, this.balance >= amount;
    post: this.balance' = this.balance - amount;
    
  event payInterest(rate: Integer)
    post: this.balance' = this.balance + ((this.balance * rate) / 100);
    
  event block()
  
  event unblock()  

  final event forceClose()
    
  final event close() 
    pre: this.balance = 0; 

  assume AllAccountsHaveUniqueAccountNumbers 
    = always forall ac1, ac2: Account | (ac1 is initialized && ac2 is initialized && ac1.nr = ac2.nr => ac1 = ac2);
  
  states: 
    (*) -> opened: open;
    opened -> opened: deposit, withdraw, payInterest, isBalance;
    opened -> blocked: block;
    blocked -> blocked: isBalance;
    blocked -> opened: unblock;
    blocked -> (*): forceClose;   
    opened -> (*): close;

assert BalanceOfAllAccountsShouldBeZero = always forall ac1,ac2,ac3:{ac:Account | ac is initialized} | ac1 != ac2 && ac2 != ac3 && ac1 != ac3 && 
  ac1.balance + ac2.balance + ac3.balance = 0;     

assert CanPayInterestAndClose = eventually exists ac:Account | payInterest on ac && eventually close on ac;
assert CanOpenAccount         = eventually exists ac:Account | ac is initialized;
assert CanCloseAccount        = eventually exists ac:Account | ac is finalized;
    
config Basic = ac: Account is uninitialized, aNr:AccountNumber, d1,d2:Date;

assert CantOverdrawAccount = always forall a:Account | (a is initialized => a.balance >= 0);

config Sliced = ac: Account forget nr, openedOn is uninitialized;
     
check CantOverdrawAccount from Sliced in max 5 steps;  
run CanOpenAccount from Sliced in max 3 steps;     
run CanCloseAccount from Sliced in max 5 steps;     

check CantOverdrawAccount from Basic in max 4 steps;  
run CanPayInterestAndClose from Basic in max 8 steps; 
run CanOpenAccount from Basic in max 3 steps; 