module paper::els::Actuators

import paper::els::Sensors
import paper::els::Timer
 
spec Light[ON,OFF]

spec DirectionLights
  sensors: SensorValues,
  cycle: Integer,
  left: Integer, 
  lastBlinkAt: Integer,
  right: Integer; 
  
  event startBlinkLeft() 
    post: this.left' = 100, this.right' = 0, 
          this.lastBlinkAt' = Timer[NOW].timepast;

  event startBlinkRight() 
    post: this.left' = 0, this.right' = 100, 
          this.lastBlinkAt' = Timer[NOW].timepast;
            
  event startFlashBlinkLeft() 
    post: this.cycle' = 0, this.left' = 100, this.right' = 0, 
          this.lastBlinkAt' = Timer[NOW].timepast;
    
  event startFlashBlinkRight() 
    post: this.cycle' = 0, this.left' = 0, this.right' = 100, 
          this.lastBlinkAt' = Timer[NOW].timepast;
  
  event startHazardLights()
    post: if (this.sensors.key' = KeyState[IN_IGNITION_ON]) 
          then (this.left' = 100 && this.right' = 100)  
          else (this.left' = 50 && this.right' = 50),
          this.lastBlinkAt' = Timer[NOW].timepast;
      
  event blink()
    pre:  this.sensors.key = KeyState[IN_IGNITION_ON], 
          Timer[NOW].timepast - this.lastBlinkAt = 500; // 500 ms per blink cycle 
    post: this.sensors.key' = KeyState[IN_IGNITION_ON], 
          this.lastBlinkAt' = Timer[NOW].timepast;
    
    variant left
      pre:  this is blinkLeft;
      post: this.left' = 100 - this.left;
            
    variant right
      pre:  this is blinkRight;
      post: this.right' = 100 - this.right;
    
    variant hazard
      pre:  this is hazardLightsOn;
      post: this.right' = 100 - this.right, this.left' = 100 - this.left; 
  
  event hazardBlinkWhenOff()
    pre:  this.sensors.key != KeyState[IN_IGNITION_ON],
          Timer[NOW].timepast - this.lastBlinkAt = 500; // 500 ms per blink cycle
    post: this.sensors.key' != KeyState[IN_IGNITION_ON],
          this.lastBlinkAt' = Timer[NOW].timepast,
          (this is hazardLightsOn::dark => (this.right' = 50 && this.left' = 50)),
          (this is hazardLightsOn::bright => (this.right' = 0 && this.left' = 0));
  
  event flashBlink()
    pre:  this.sensors.key = KeyState[IN_IGNITION_ON],
          Timer[NOW].timepast - this.lastBlinkAt = 500; // 500 ms per blink cycle;
    post: this.sensors.key' = KeyState[IN_IGNITION_ON],
          this.lastBlinkAt' = Timer[NOW].timepast;
  
    variant left
      pre:  this.cycle < 6;  // ELS-2 && ELS-5: After 3 cycles (from dark to bright and back) the indicators should be turned off again (only transition left that is possible)    
      post: this.cycle' = this.cycle + 1,
            this.left' = 100 - this.left;

    variant right
      pre:  this.cycle < 6;  // ELS-2 && ELS-5: After 3 cycles (from dark to bright and back) the indicators should be turned off again (only transition left that is possible)    
      post: this.cycle' = this.cycle + 1,
            this.right' = 100 - this.right;

  event stopFlashBlink()
    pre: this.cycle = 6;
    post: this.cycle' = 0, this.left' = 0, this.right' = 0, 
          Timer[NOW].timepast' = Timer[NOW].timepast + 1; // The stop follows quickly after the ending of the tip blinking cycle
  
  event restartFlashBlinking()
    variant bright
      post: this.cycle' = 0;
    variant dark
      post: this.cycle' = -1;
           
  event stop()
    post: this.left' = 0, this.right' = 0;
    
  event skip()
      
  //// ELS-1: 60 flashes per minute, dark/bright cycle takes 1 second. After 500 ms always a transition from dark/bright or vice versa  
  //assume Cycle = always forall d:DirectionLights | 
  //  ((blink on d || flashBlink on d) => ((Timer[NOW].timepast' - Timer[NOW].timepast >= 500) && (Timer[NOW].timepast' - Timer[NOW].timepast <= 505)));

  // (Tip)Blinking only allowed when key is in ignition on position
  assume KeyInIgnitionDefinesBlinking = always forall d:DirectionLights | 
    (d.sensors.key != KeyState[IN_IGNITION_ON] => (d is off || d is hazardLightsOn));

  // Tip blinking stops after a completed cycle
  assume TipBlinkingStopsAfterCycleComplete = eventually forall d:DirectionLights | 
    (d.cycle = 6 => next stopFlashBlink on d); 
         
  states:
    off -> off: skip;
    
    blinkLeft {
      bright -> dark: blink::left;
      dark -> bright: blink::left;
      
      bright -> off: stop;
      bright -> hazardLightsOn::bright: startHazardLights;
    }

    blinkRight {
      bright -> dark: blink::right;
      dark -> bright: blink::right;
      
      bright -> off: stop;
      bright -> hazardLightsOn::bright: startHazardLights;
    }

    flashBlinkLeft {
      bright -> dark: flashBlink::left;
      dark -> bright: flashBlink::left; 

      dark -> dark: restartFlashBlinking::dark;
      bright -> bright: restartFlashBlinking::bright;
      
      bright -> blinkLeft::bright: startBlinkLeft;
      bright -> hazardLightsOn::bright: startHazardLights;
      bright -> off: stopFlashBlink;
    }

    flashBlinkRight {
      bright -> dark: flashBlink::right;
      dark -> bright: flashBlink::right; 

      dark -> dark: restartFlashBlinking::dark;
      bright -> bright: restartFlashBlinking::bright;
      
      bright -> off: stopFlashBlink;
      bright -> blinkRight::bright: startBlinkRight;
      bright -> hazardLightsOn::bright: startHazardLights;
    }
    
    hazardLightsOn {
      dark -> bright: blink::hazard, hazardBlinkWhenOff; 
      bright -> dark: blink::hazard, hazardBlinkWhenOff;
      
      bright -> off: stop;
    }

    off -> blinkLeft::bright: startBlinkLeft;
    off -> blinkRight::bright: startBlinkRight;

    off -> flashBlinkLeft::bright: startFlashBlinkLeft; 
    off -> flashBlinkRight::bright: startFlashBlinkRight;

    off -> hazardLightsOn::bright: startHazardLights;
        
spec KeyOnlySensor
  key: KeyState;
  
config DirectionLightsAndKeySensor = d: DirectionLights is off with left = 0, right = 0, cycle = 0, s: KeyOnlySensor mocks SensorValues;
//config DirectionLightsAndKeySensor = d: DirectionLights is off with left = 0, right = 0, cycle = 0, s: SensorValues;

assert WhenInDarkCycleNoLights = always forall d:DirectionLights | 
  ((d is blinkLeft::dark || d is blinkRight::dark || d is flashBlinkLeft::dark || d is flashBlinkRight::dark || d is hazardLightsOn::dark) => (d.left = 0 && d.right = 0));
check WhenInDarkCycleNoLights from DirectionLightsAndKeySensor in max 5 steps expect no trace;

assert SimWhenInDarkCycleNoLights = eventually exists d:DirectionLights | 
  (d is blinkLeft::dark || d is blinkRight::dark || d is flashBlinkLeft::dark || d is flashBlinkRight::dark || d is hazardLightsOn::dark) && d.left = 0 && d.right = 0;
run SimWhenInDarkCycleNoLights from DirectionLightsAndKeySensor in max 5 steps expect trace;
    
assert BlinkingStopsWhenKeyIsRemoved = always exists d:DirectionLights, s:SensorValues | 
  ((s.key = KeyState[IN_IGNITION_ON] && 
  (next (s.key' != KeyState[IN_IGNITION_ON])) &&  
  (d is blinkLeft::bright || d is blinkLeft::dark || d is blinkRight::bright || d is blinkRight::dark)) => next (d is off || d is hazardLightsOn::bright));
check BlinkingStopsWhenKeyIsRemoved from DirectionLightsAndKeySensor in max 5 steps expect no trace;   

assert SimBlinkingStopsWhenKeyIsRemoved = eventually exists d:DirectionLights, s:SensorValues | 
  s.key = KeyState[IN_IGNITION_ON] && 
  (d is blinkLeft::bright || d is blinkLeft::dark || d is blinkRight::bright || d is blinkRight::dark) &&
  next (s.key != KeyState[IN_IGNITION_ON] && !(d is off));
run SimBlinkingStopsWhenKeyIsRemoved from DirectionLightsAndKeySensor in max 4 steps expect trace;   
 
assert HazardLightIntensityLoweredWhenKeyIsRemoved = exists d:DirectionLights, s:SensorValues | 
  (((d is hazardLightsOn::bright && s.key != KeyState[IN_IGNITION_ON]) => (d.left = 50 && d.right = 50)) until s.key = KeyState[IN_IGNITION_ON]); 
check HazardLightIntensityLoweredWhenKeyIsRemoved from DirectionLightsAndKeySensor in max 5 steps;   

assert SimHazardLightIntensityLoweredWhenKeyIsRemoved = exists d:DirectionLights, s:SensorValues | 
  eventually (d is hazardLightsOn::bright && s.key != KeyState[IN_IGNITION_ON] && d.left = 100);
run SimHazardLightIntensityLoweredWhenKeyIsRemoved from DirectionLightsAndKeySensor in max 5 steps with infinite trace expect no trace;   

assert IntensityAlwaysInRange = always forall d:DirectionLights | 
  (d.left = 0 || d.left = 50 || d.left = 100) && (d.right = 0 || d.right = 50 || d.right = 100); 
check IntensityAlwaysInRange from DirectionLightsAndKeySensor in max 10 steps expect no trace;

// ELS-2 
assert CanCompleteFlashBlinkCycle = eventually exists d:DirectionLights | d is flashBlinkLeft::bright && eventually (d.cycle = 6 && d is off);
run CanCompleteFlashBlinkCycle from DirectionLightsAndKeySensor in max 10 steps expect trace;

assert CanResetFlashBlinkCycle = exists d:DirectionLights | eventually (d.cycle = 4 && eventually d.cycle = 1);
run CanResetFlashBlinkCycle from DirectionLightsAndKeySensor in max 10 steps expect trace;

assert NoFlashBlinkingWhenCycleIsComplete = always exists d:DirectionLights | (d is flashBlinkLeft::bright => d.cycle < 7); 
check NoFlashBlinkingWhenCycleIsComplete from DirectionLightsAndKeySensor in max 10 steps expect no trace;

assert CanBlinkLeft = eventually exists d:DirectionLights | d is blinkLeft::bright && Timer[NOW].timepast = 1000 && 
  next (d is blinkLeft::dark && Timer[NOW].timepast = 1500 && 
  next (d is blinkRight::bright && Timer[NOW].timepast = 2000));
run CanBlinkLeft from DirectionLightsAndKeySensor in max 4 steps expect trace;

assert CanBlinkRight = eventually exists d:DirectionLights | (d is blinkRight::bright && Timer[NOW].timepast = 2000) && next (d is blinkRight::dark && next (d is blinkRight::bright && Timer[NOW].timepast = 3000));
run CanBlinkRight from DirectionLightsAndKeySensor in max 4 steps expect trace;

assert CanStartBlinkingAtRandomPointInTime = exists d:DirectionLights | eventually (startBlinkRight on d && Timer[NOW].timepast = 603);
run CanStartBlinkingAtRandomPointInTime from DirectionLightsAndKeySensor in max 3 steps expect trace;

assert CanStopFlashBlinkLeft = eventually exists d:DirectionLights | stopFlashBlink on d;
run CanStopFlashBlinkLeft from DirectionLightsAndKeySensor in max 10 steps expect trace; 