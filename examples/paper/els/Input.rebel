module paper::els::Input

import paper::els::Actuators
import paper::els::Timer
import paper::els::Sensors

spec HazardLightSwitch
  dirLights: DirectionLights;
  
  event turnOn() 
    post: this.dirLights.startHazardLights();
  
  event turnOff()
    post: this.dirLights.stop();
  
  states:
    off -> onn: turnOn;
    onn -> off: turnOff;

spec PitmanArm
  sensors: SensorValues,
  dirLights: DirectionLights;
  
  event startTipBlinkLeft()
    pre: if this.sensors.key = KeyState[IN_IGNITION_ON] then this.dirLights.startFlashBlinkLeft() else this.dirLights.skip();
      
  event startTipBlinkRight()
    pre: if this.sensors.key = KeyState[IN_IGNITION_ON] then this.dirLights.startFlashBlinkRight() else this.dirLights.skip(); 
    
  event releaseArm()
  
  event holdArm()
    variant left
      pre: if this.sensors.key = KeyState[IN_IGNITION_ON] then this.dirLights.startBlinkLeft() else this.dirLights.skip(); 
      
    variant right
      pre: if this.sensors.key = KeyState[IN_IGNITION_ON] then this.dirLights.startBlinkRight() else this.dirLights.skip(); 
  
  event startBlink()
    variant left
      pre: if this.sensors.key = KeyState[IN_IGNITION_ON] then this.dirLights.startBlinkLeft() else this.dirLights.skip();
    variant right
      pre: if this.sensors.key = KeyState[IN_IGNITION_ON] then this.dirLights.startBlinkRight() else this.dirLights.skip();
  
  event stop()
    pre: this.dirLights.stop();
  
  fact ReleaseArmIfTipBlinkingLeft = exists p: PitmanArm, d: DirectionLights, s:SensorValues | 
    always ((s.key = KeyState[IN_IGNITION_ON] && startTipBlinkLeft on p) => 
      if (Timer[NOW].timepast' - Timer[NOW].timepast < 500)
        then (next releaseArm on p)
        else (next holdArm on p || (next holdArm on p))
      );
      
  fact ReleaseArmIfTipBlinkingRight = exists p: PitmanArm, d: DirectionLights | 
    always ((startTipBlinkRight on p && d.cycle = 0 && next (p is tipBlinkingRight && flashBlink on d && next flashBlink on d)) => next holdArm on p);

  states:
    neutral -> tipBlinkingLeft: startTipBlinkLeft;
    tipBlinkingLeft -> neutral: releaseArm;
    tipBlinkingLeft -> tipBlinkingLeft: holdArm::left; 

    neutral -> tipBlinkingRight: startTipBlinkRight;
    tipBlinkingRight -> neutral: releaseArm;
    tipBlinkingRight -> tipBlinkingRight: holdArm::right; 

    neutral -> blinkingLeft: startBlink::left;
    blinkingLeft -> neutral: stop;  
    
 config Simple = s: KeyOnlySensor abstracts SensorValues,
                 d:DirectionLights is off with left = 0, right = 0, cycle = 0, sensors = s, 
                 p: PitmanArm is neutral with dirLights = d;
 
 assert CanDoTipBlinkingCycle = exists d:DirectionLights, p:PitmanArm, s:SensorValues | 
  eventually (startTipBlinkLeft on p && s.key = KeyState[IN_IGNITION_ON]) && 
    next (s.key = KeyState[IN_IGNITION_ON]) &&
      eventually (d.cycle = 6 && 
        eventually (d is off));
 run CanDoTipBlinkingCycle from Simple in max 10 steps;
 
 assert CheckHoldArmBehaviour = exists d:DirectionLights, p:PitmanArm, s:SensorValues |
  eventually (startTipBlinkLeft on p && s.key = KeyState[IN_IGNITION_ON]) && 
    next (s.key = KeyState[IN_IGNITION_ON]) &&
      eventually (d is lBright);   
 
 run CheckHoldArmBehaviour from Simple in max 5 steps;
 