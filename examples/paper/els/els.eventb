MACHINE M2
REFINES M1
SEES C2
VARIABLES
headingState
pitmanArmUD
pitmanArmUDP
hazardWarningSwitchOn
keyState
keyStateP
blinkRightP
blinkLeftP
currentTime
INVARIANTS
inv1: nbreCycles ∈ N ∧ blinkLef tP ∈ 0 .. 100 ∧ blinkRightP ∈ 0 .. 100
inv2:
tailLampsF lash ∈ tailLamps 7→ BOOL ∧
(
(marketCode ∈ {001, 002} ⇒ dom(tailLampsF lash) = tailLamps)
∧
(marketCode = 003 ⇒ dom(tailLampsF lash) = ∅)
)
inv3: direcIndF lash ∈ directionIndicators → BOOL
inv4: f lashingRatio ∈ direcIndF lash−1
[{T RUE}] ∪ tailLampsF lash−1
[{T RUE}] → f lashRatio
inv5:
(((pitmanArmUD ∈ Downward∨(nbreCycles 6= 0∧pitmanArmUDP ∈ Downward))∧keyState =
KeyInIgnitionOnP osition)
∨
hazardW arningSwitchOn = T RUE) ∧ marketCode ∈ {001, 002}
⇔
tailLampsF lash[{tailLampLef t}] = {T RUE}
inv6:
(((pitmanArmUD ∈ U pward ∨ (nbreCycles 6= 0 ∧ pitmanArmUDP ∈ U pward)) ∧ keyState =
KeyInIgnitionOnP osition)
∨
hazardW arningSwitchOn = T RUE) ∧ marketCode ∈ {001, 002}
⇔
tailLampsF lash[{tailLampRight}] = {T RUE}
15.01.2020 09:46 Page 1 of 11
An Event-B Specification of M2
inv7:
((pitmanArmUD ∈ Downward ∨ (nbreCycles 6= 0 ∧ pitmanArmUDP ∈ Downward)) ∧ keyState =
KeyInIgnitionOnP osition)
∨
hazardW arningSwitchOn = T RUE
⇔
direcIndF lash(blinkLef t) = T RUE
inv8:
((pitmanArmUD ∈ U pward ∨ (nbreCycles 6= 0 ∧ pitmanArmUDP ∈ U pward)) ∧ keyState =
KeyInIgnitionOnP osition)
∨
hazardW arningSwitchOn = T RUE
⇔
direcIndF lash(blinkRight) = T RUE
inv9:
headingState(blinkRight) = 100 ∧ blinkRightP = 0
⇒
direcIndF lash(blinkRight) = T RUE ∧
(nbreCycles 6= 0 ∨
(pitmanArmUD ∈ U pward∧keyState = KeyInIgnitionOnP osition)∨hazardW arningSwitchOn =
T RUE)
∧
(marketCode /∈ {001, 002} ∨
(headingState(tailLampRight) = 100 ∧ tailLampsF lash[{tailLampRight}] = {T RUE}))
inv10:
headingState(blinkLef t) = 100 ∧ blinkLef tP = 0
⇒
direcIndF lash(blinkLef t) = T RUE ∧
(nbreCycles 6= 0 ∨
(pitmanArmUD ∈ Downward∧keyState = KeyInIgnitionOnP osition)∨hazardW arningSwitchOn =
T RUE)
∧
(marketCode /∈ {001, 002} ∨
(headingState(tailLampLef t) = 100 ∧ tailLampsF lash[{tailLampLef t}] = {T RUE}))
inv11:
hazardW arningSwitchOn = T RUE ⇒
nbreCycles = 0 ∧
direcIndF lash(blinkLef t) = T RUE ∧ direcIndF lash(blinkRight) = T RUE ∧
(marketCode ∈ {001, 002} ⇔
({tailLampLef t, tailLampRight} ⊆ dom(tailLampsF lash) ∧
tailLampsF lash[{tailLampLef t, tailLampRight}] = {T RUE})
) ∧
(keyState 6= NoKeyInserted ⇒ ran(f lashingRatio) = {11})
∧
(keyState = NoKeyInserted ⇒ ran(f lashingRatio) = {12})
inv12:
brakeP edal > 30 ∨ (brakeLightP = 100 ∧ brakeP edal ≥ 10)
⇔
headingState[{brakeLef t, brakeRight}] = {100}
ELS-39-1
inv13:
(brakeP edal > 30 ∧ brakeP edal ≤ 400 ∧ brakeM idF lashing = F ALSE)
⇒
headingState(brakeM id) = (100)
ELS-39-3
inv14:
brakeP edal > 400 ∨ (brakeM idF lashingP = T RUE ∧ brakeP edal > 0)
⇔
brakeM idF lashing = T RUE
15.01.2020 09:46 Page 2 of 11
An Event-B Specification of M2
ELS-40-1
inv15: headingState(brakeLef t) = headingState(brakeRight)
inv16: pitmanArmUD 6= Neutral ⇒ nbreCycles = 0
inv17:
nbreCycles = 1 ∧ headingState(blinkRight) = 100
⇒
direcIndF lash(blinkRight) = T RUE
∧
(marketCode ∈ {001, 002} ⇒ tailLampsF lash(tailLampRight) = T RUE)
inv18:
nbreCycles = 1 ∧ headingState(blinkLef t) = 100
⇒
direcIndF lash(blinkLef t) = T RUE
∧
(marketCode ∈ {001, 002} ⇒ tailLampsF lash(tailLampLef t) = T RUE)
EVENTS
Initialisation hextendedi
begin
act1: headingState := HeadLights × {0}
act2: pitmanArmUD := Neutral
act3: pitmanArmUDP := Neutral
act4: hazardW arningSwitchOn := F ALSE
act5: keyState := NoKeyInserted
act6: keyStateP := NoKeyInserted
act7: reverseGear := F ALSE
act8: brakeP edal := 0
act9: lightSwitch := Off
act10: lightSwitchP := Off
act11: voltageBattery := 0
act12: darknessModeSwitchOn := F ALSE
act13: brightnessSensor := 0
act14: allDoorsClosed := T RUE
act15: allDoorsClosedP := T RUE
act16: currentT ime := 0
act17: f lashingRatio := ∅
act18: nbreCycles := 0
act19: direcIndF lash := directionIndicators × {F ALSE}
act20: tailLampsF lash := {T RUE 7→ ∅, F ALSE 7→ tailLamps× {F ALSE}}(bool(marketCode =
003))
act21: brakeLightP := 0
act22: brakeM idF lashing := F ALSE
act23: brakeM idF lashingP := F ALSE
act24: blinkLef tP := 0
act25: blinkRightP := 0
end
Event moveKey hordinaryi =b
extends moveKey
any
hl
valkey
left
right
where
grd1:
hl ∈
LowBeams ∪ tailLamps ∪ directionIndicators ∪ {corneringLightLef t, corneringLightRight}
7→
LigntnessLevel
15.01.2020 09:46 Page 3 of 11
An Event-B Specification of M2
grd2:
(keyState = NoKeyInserted ⇒ valkey = KeyInserted)
∧
(keyState = KeyInserted ⇒ valkey ∈ {NoKeyInserted, KeyInIgnitionOnP osition})
∧
(keyState = KeyInIgnitionOnP osition ⇒ valkey = KeyInserted)
grd3: right = bool(pitmanArmUD ∈ U pward ∧ valkey = KeyInIgnitionOnP osition)
grd4: lef t = bool(pitmanArmUD ∈ Downward ∧ valkey = KeyInIgnitionOnP osition)
grd5:
(hazardW arningSwitchOn = T RUE ∨ right = T RUE ∨ lef t = T RUE)
⇒
{blinkRight 7→ headingState(blinkRight),
blinkLef t 7→ headingState(blinkLef t)} ⊆ hl
grd6:
(hazardW arningSwitchOn = F ALSE ∧ right = F ALSE ∧ lef t = F ALSE)
⇒
(directionIndicators) × {0} ⊆ hl
grd7:
hazardW arningSwitchOn = T RUE ∧ marketCode ∈ {001, 002}
⇒
{tailLampRight 7→ headingState(tailLampRight),
tailLampLef t 7→ headingState(tailLampLef t)} ⊆ hl
grd8:
right = T RUE ∧ marketCode ∈ {001, 002}
⇒
tailLampRight 7→ headingState(tailLampRight) ∈ hl
grd9:
lef t = T RUE ∧ marketCode ∈ {001, 002}
⇒
tailLampLef t 7→ headingState(tailLampLef t) ∈ hl
then
act1: headingState := headingState C− hl
act2: keyState := valkey
act3: keyStateP := keyState
act4: pitmanArmUDP := pitmanArmUD
act5:
direcIndF lash :=
{T RUE 7→ {blinkRight 7→ right, blinkLef t 7→ lef t},
F ALSE 7→ directionIndicators × {T RUE}
}(bool(hazardW arningSwitchOn = F ALSE))
act6:
tailLampsF lash :=
{T RUE 7→ {T RUE 7→ {tailLampRight 7→ right, tailLampLef t 7→ lef t},
F ALSE 7→ tailLamps × {T RUE}}(bool(hazardW arningSwitchOn = F ALSE)),
F ALSE 7→ ∅
}(bool(marketCode ∈ {001, 002}))
act7:
f lashingRatio :=
{T RUE 7→ {T RUE 7→ {blinkRight 7→ 11}, F ALSE 7→ ∅}(right) ∪ {T RUE 7→ {blinkLef t 7→
11}, F ALSE 7→ ∅}(lef t),
F ALSE 7→ directionIndicators×({T RUE 7→ {12}, F ALSE 7→ {11}}(bool(valkey = NoKeyInserted)))
}(bool(hazardW arningSwitchOn = F ALSE))
∪
{T RUE 7→ {
T RUE 7→ {T RUE 7→ {tailLampRight 7→ 11}, F ALSE 7→ ∅}(right) ∪
{T RUE 7→ {tailLampLef t 7→ 11}, F ALSE 7→ ∅}(lef t),
F ALSE 7→ ∅
}(bool(marketCode ∈ {001, 002})),
F ALSE 7→ {
15.01.2020 09:46 Page 4 of 11
An Event-B Specification of M2
T RUE 7→ {T RUE 7→ tailLamps×{12}, F ALSE 7→ tailLamps×{11}}(bool(valkey = NoKeyInserted)),
F ALSE 7→ ∅
}
(bool(marketCode ∈ {001, 002}))
}(bool(hazardW arningSwitchOn = F ALSE))
act8: nbreCycles := 0
end
Event movePitmanUD hordinaryi =b
extends movePitmanUD
any
hl
val
nbc
right
left
where
grd1:
hl ∈
(LowBeams ∪ tailLamps ∪ {corneringLightLef t, corneringLightRight})
→
LigntnessLevel
grd2: val ∈ pitManP os ∧ val 6= pitmanArmUD
grd3:
pitmanArmUD 6= Neutral ⇒
(pitmanArmUD ∈ U pward ∧ val ∈ U pward)
∨
(pitmanArmUD ∈ Downward ∧ val ∈ Downward)
∨
val = Neutral
grd4: htheoremi directionIndicators ∩ dom(hl) = ∅
grd5: nbc ∈ {0, 3}
grd6: (pitmanArmUD ∈ {U pward5, Downward5} ∧ val = Neutral) ⇒ nbc ∈ {0, 3}
grd7: nbc = 3 ⇒ (pitmanArmUD ∈ {U pward5, Downward5} ∧ val = Neutral)
grd8: (pitmanArmUD ∈ {U pward7, Downward7} ∨ val 6= Neutral) ⇒ nbc = 0
grd9: right = bool(((pitmanArmUD = U pward5 ∧ nbc = 3) ∨ val ∈ U pward) ∧ keyState =
KeyInIgnitionOnP osition)
grd10: lef t = bool(((pitmanArmUD = Downward5 ∧ nbc = 3) ∨ val ∈ Downward) ∧ keyState =
KeyInIgnitionOnP osition)
grd11:
marketCode ∈ {001, 002} ∧ (right = T RUE ∨ tailLampsF lash[{tailLampRight}] = {T RUE})
⇒
tailLampRight 7→ headingState(tailLampRight) ∈ hl
grd12:
marketCode ∈ {001, 002} ∧ (lef t = T RUE ∨ tailLampsF lash[{tailLampLef t}] = {T RUE})
⇒
tailLampLef t 7→ headingState(tailLampLef t) ∈ hl
then
act1: headingState := headingState C− hl
act2: pitmanArmUD := val
act3: pitmanArmUDP := pitmanArmUD
act4:
direcIndF lash :=
{T RUE 7→ directionIndicators × {T RUE},
F ALSE 7→ {blinkRight 7→ right, blinkLef t 7→ lef t}}(bool(hazardW arningSwitchOn = T RUE))
act5:
tailLampsF lash :=
{T RUE 7→ {T RUE 7→ {tailLampRight 7→ right, tailLampLef t 7→ lef t},
F ALSE 7→ tailLamps × {T RUE}}(bool(hazardW arningSwitchOn = F ALSE)),
15.01.2020 09:46 Page 5 of 11
An Event-B Specification of M2
F ALSE 7→ ∅
}(bool(marketCode ∈ {001, 002}))
act6:
f lashingRatio :=
{T RUE 7→ {T RUE 7→ {blinkRight 7→ 11}, F ALSE 7→ ∅}(right) ∪ {T RUE 7→ {blinkLef t 7→
11}, F ALSE 7→ ∅}(lef t),
F ALSE 7→ directionIndicators×({T RUE 7→ {12}, F ALSE 7→ {11}}(bool(keyState = NoKeyInserted)))
}(bool(hazardW arningSwitchOn = F ALSE))
∪
{T RUE 7→ {
T RUE 7→ {T RUE 7→ {tailLampRight 7→ 11}, F ALSE 7→ ∅}(right) ∪
{T RUE 7→ {tailLampLef t 7→ 11}, F ALSE 7→ ∅}(lef t),
F ALSE 7→ ∅
}(bool(marketCode ∈ {001, 002})),
F ALSE 7→ {
T RUE 7→ {T RUE 7→ tailLamps×{12}, F ALSE 7→ tailLamps×{11}}(bool(keyState = NoKeyInserted)),
F ALSE 7→ ∅
}
(bool(marketCode ∈ {001, 002}))
}(bool(hazardW arningSwitchOn = F ALSE))
act7:
nbreCycles := {T RUE 7→ {T RUE 7→ nbc, F ALSE 7→ nbc + 1}
(bool(nbreCycles = 0 ∨ nbc = 0)),
F ALSE 7→ 0}(bool(hazardW arningSwitchOn = F ALSE∧keyState = KeyInIgnitionOnP osition))
act8: blinkLef tP := headingState(blinkLef t)
act9: blinkRightP := headingState(blinkRight)
end
Event flashingBrigt hordinaryi =b
refines headLightSet
any
hl
where
grd1: hl ∈ tailLamps ∪ directionIndicators → LigntnessLevel
grd2: (direcIndF lash(blinkRight) = T RUE ∨ direcIndF lash(blinkLef t) = T RUE)
grd3: headingState[directionIndicators] = {0}
grd4: keyState = KeyInIgnitionOnP osition
grd5:
{
T RUE 7→ {blinkRight 7→ 100} ∪
{T RUE 7→ {tailLampRight 7→ 100}, F ALSE 7→ {tailLampRight 7→ headingState(tailLampRight)}}
(bool(marketCode ∈ {001, 002})),
F ALSE 7→ {blinkRight, tailLampRight} C headingState
}(bool(direcIndF lash(blinkRight) = T RUE))
∪
{
T RUE 7→ {blinkLef t 7→ 100} ∪
{T RUE 7→ {tailLampLef t 7→ 100}, F ALSE 7→ {tailLampLef t 7→ headingState(tailLampLef t)}}
(bool(marketCode ∈ {001, 002})),
F ALSE 7→ {blinkLef t, tailLampLef t} C headingState
}(bool(direcIndF lash(blinkLef t) = T RUE))
⊆ hl
then
act1: headingState := headingState C− hl
act2: allDoorsClosedP := allDoorsClosed
act3: keyStateP := keyState
act4: blinkLef tP := 0
act5: blinkRightP := 0
15.01.2020 09:46 Page 6 of 11
An Event-B Specification of M2
end
Event flashingDark hordinaryi =b
refines progress
any
hl
ind
tails
step
where
grd1: hl ∈ LowBeams∪tailLamps∪directionIndicators∪{corneringLightLef t, corneringLightRight}→
LigntnessLevel
grd2: ind = headingState−1
[{100}] ∩ directionIndicators ∧ ind 6= ∅
grd3: directionIndicators × {0} ⊆ hl
grd4:
tails = {T RUE 7→ {blinkRight 7→ tailLampRight, blinkLef t 7→ tailLampLef t}[ind],
F ALSE 7→ ∅}(bool(marketCode ∈ {001, 002}))
grd5: nbreCycles 6= 1 ⇒ tails × {0} ⊆ hl
grd6: htheoremi (brakeLight ∪ {reverseLight}) ∩ dom(hl) = ∅
grd7: step ∈ N1
then
act1: headingState := headingState C− hl
act2: allDoorsClosedP := allDoorsClosed
act3: keyStateP := keyState
act4: direcIndF lash := direcIndF lashC−{T RUE 7→ ind×{F ALSE}, F ALSE 7→ ∅}(bool(nbreCycles =
1))
act5: tailLampsF lash := tailLampsF lashC−{T RUE 7→ tails×{F ALSE}, F ALSE 7→ ∅}(bool(nbreCycles =
1))
act6: f lashingRatio := ({T RUE 7→ tails∪ind, F ALSE 7→ ∅}(bool(nbreCycles = 1)))−Cf lashingRatio
act7: nbreCycles := {T RUE 7→ (nbreCycles − 1), F ALSE 7→ 0}(bool(nbreCycles > 0))
act8: currentT ime := currentT ime + step
act9: lightSwitchP := lightSwitch
end
Event putOnOffHazardSwitch hordinaryi =b
extends putOnOffHazardSwitch
any
hl
left
right
where
grd1:
hl ∈ {corneringLightLef t, corneringLightRight}
→
LigntnessLevel
grd2: right = bool(pitmanArmUD ∈ U pward ∧ keyState = KeyInIgnitionOnP osition)
grd3: lef t = bool(pitmanArmUD ∈ Downward ∧ keyState = KeyInIgnitionOnP osition)
then
act1: headingState := headingState C− hl
act2: hazardW arningSwitchOn := {T RUE 7→ F ALSE, F ALSE 7→ T RUE}(hazardW arningSwitchOn)
act3: pitmanArmUDP := pitmanArmUD
act4:
direcIndF lash :=
{T RUE 7→ {blinkRight 7→ right, blinkLef t 7→ lef t},
F ALSE 7→ directionIndicators × {T RUE}
}(bool(hazardW arningSwitchOn = T RUE))
act5:
tailLampsF lash :=
{T RUE 7→ {T RUE 7→ {tailLampRight 7→ right, tailLampLef t 7→ lef t},
15.01.2020 09:46 Page 7 of 11
An Event-B Specification of M2
F ALSE 7→ tailLamps × {T RUE}}(bool(hazardW arningSwitchOn = T RUE)),
F ALSE 7→ ∅
}(bool(marketCode ∈ {001, 002}))
act6:
f lashingRatio :=
{T RUE 7→ {T RUE 7→ {blinkRight 7→ 11}, F ALSE 7→ ∅}(right) ∪ {T RUE 7→ {blinkLef t 7→
11}, F ALSE 7→ ∅}(lef t),
F ALSE 7→ directionIndicators×({T RUE 7→ {12}, F ALSE 7→ {11}}(bool(keyState = NoKeyInserted)))
}(bool(hazardW arningSwitchOn = T RUE))
∪
{T RUE 7→ {
T RUE 7→ {T RUE 7→ {tailLampRight 7→ 11}, F ALSE 7→ ∅}(right) ∪
{T RUE 7→ {tailLampLef t 7→ 11}, F ALSE 7→ ∅}(lef t),
F ALSE 7→ ∅
}(bool(marketCode ∈ {001, 002})),
F ALSE 7→ {
T RUE 7→ {T RUE 7→ tailLamps×{12}, F ALSE 7→ tailLamps×{11}}(bool(keyState = NoKeyInserted)),
F ALSE 7→ ∅
}
(bool(marketCode ∈ {001, 002}))
}(bool(hazardW arningSwitchOn = T RUE))
act7: nbreCycles := 0
act8: blinkLef tP := headingState(blinkLef t)
act9: blinkRightP := headingState(blinkRight)
end
Event progress hordinaryi =b
refines progress
any
hl
step
where
grd1:
hl ∈ LowBeams ∪ tailLamps ∪ {corneringLightLef t, corneringLightRight}
→
LigntnessLevel
grd2: step ∈ N1
grd3: dom(hl) ∩ directionIndicators = ∅
grd4:
marketCode ∈ {001, 002} ∧ tailLampsF lash(tailLampRight) = T RUE
⇒
tailLampRight 7→ headingState(tailLampRight) ∈ hl
grd5:
marketCode ∈ {001, 002} ∧ tailLampsF lash(tailLampLef t) = T RUE
⇒
tailLampLef t 7→ headingState(tailLampLef t) ∈ hl
then
act1: headingState := headingState C− hl
act2: currentT ime := currentT ime + step
act3: keyStateP := keyState
act4: lightSwitchP := lightSwitch
act5: allDoorsClosedP := allDoorsClosed
end