module paper::performance::rebel::RiverCrossing

spec Cargo
  eats: ?Cargo;
  
  internal event crossToFar()
  internal event crossToNear()
       
  assume DontBeAloneWithFood = always forall c1:Cargo, c2: Cargo, f:Farmer | (c2 = c1.eats =>  
    if (c1 is near &&  c2 is near) then f is near 
    else if (c1 is far && c2 is far) then f is far);
     
  states:
    near -> far: crossToFar;
    far -> near: crossToNear;

spec Farmer
  event crossAlone()
  
  event crossToFar(cargo: Cargo)
    pre: cargo.crossToFar();
  
  event crossToNear(cargo: Cargo)
      pre: cargo.crossToNear();

  states:
    near -> far: crossAlone, crossToFar;
    far -> near: crossAlone, crossToNear;

config Game = f: Farmer is near, fox, chicken, grain: Cargo is near,
              fox with eats = chicken, chicken with eats = grain, grain with eats = none;  

assert CanGetEverybodyAcross = eventually forall f:Farmer, c:Cargo | f is far && c is far;  
run CanGetEverybodyAcross from Game in max 8 steps expect trace;
 