// Static configuration of state machines
// Define the specs that can take place in the transition system
Tailer (spec:id) = {<tailer>}
Follower (spec:id) = {<follower>}
Leader (spec:id) = {<leader>}

// Define all possible states for all machines
State (state:id) = {<state_uninitialized>,<state_finalized>,<state_tailer_active>,<state_tailer_waiting>,<state_follower_active>,<state_leader_active>}
initialized (state:id) = {<state_tailer_active>,<state_tailer_waiting>,<state_follower_active>,<state_leader_active>}
finalized (state:id) = {<state_finalized>}
uninitialized (state:id) = {<state_uninitialized>}
StateTailerWaiting (state:id) = {<state_tailer_waiting>}StateTailerActive (state:id) = {<state_tailer_active>}
StateFollowerActive (state:id) = {<state_follower_active>}
StateLeaderActive (state:id) = {<state_leader_active>}

// Define which transitions are allowed (in the form of `from a state` -> ` via an event` -> `to a state`
allowedTransitions (from:id, to:id, event:id) = {<state_tailer_waiting,state_tailer_active,event_tailer_connected>,<state_uninitialized,state_tailer_waiting,event_tailer_start>,<state_tailer_active,state_tailer_active,event_tailer_hit>,<state_follower_active,state_follower_active,event_follower_hit>,<state_uninitialized,state_follower_active,event_follower_start>,<state_uninitialized,state_leader_active,event_leader_start>,<state_leader_active,state_leader_active,event_leader_hit>}
// Define each event as single relation so that the events can be used as variables in the constraints 
EventTailerConnected (event:id) = {<event_tailer_connected>}

EventTailerStart (event:id) = {<event_tailer_start>}
EventLeaderStart (event:id) = {<event_leader_start>}
EventFollowerStart (event:id) = {<event_follower_start>}
EventLeaderHit (event:id) = {<event_leader_hit>}
EventFollowerHit (event:id) = {<event_follower_hit>}
EventTailerHit (event:id) = {<event_tailer_hit>}

// Dynamic configuration of state machines
Config (config:id) >= {<c1>} <= {<c1>,<c2>,<c3>,<c4>,<c5>,<c6>,<c7>,<c8>,<c9>}
order (cur:id, nxt:id) <= {<c1,c2>,<c2,c3>,<c3,c4>,<c4,c5>,<c5,c6>,<c6,c7>,<c7,c8>,<c8,c9>}
InitialConfig (config:id) = {<c1>}

Instance (spec:id, instance:id) = {<follower,f1>,<follower,f2>,<tailer,t2>,<tailer,t1>,<leader,l1>,<leader,l2>}
instanceInState (config:id, instance:id, state:id) >= {<c1,f1,state_uninitialized>,<c1,f2,state_uninitialized>,<c1,t2,state_uninitialized>,<c1,t1,state_uninitialized>,<c1,l1,state_uninitialized>,<c1,l2,state_uninitialized>}<= {<c1,t1,state_uninitialized>,<c1,t1,state_finalized>,<c1,t1,state_tailer_waiting>,<c1,t1,state_tailer_active>,<c1,t2,state_uninitialized>,<c1,t2,state_finalized>,<c1,t2,state_tailer_waiting>,<c1,t2,state_tailer_active>,<c1,f1,state_uninitialized>,<c1,f1,state_finalized>,<c1,f1,state_follower_active>,<c1,f2,state_uninitialized>,<c1,f2,state_finalized>,<c1,f2,state_follower_active>,<c1,l1,state_uninitialized>,<c1,l1,state_leader_active>,<c1,l1,state_finalized>,<c1,l2,state_uninitialized>,<c1,l2,state_leader_active>,<c1,l2,state_finalized>,<c2,t1,state_uninitialized>,<c2,t1,state_finalized>,<c2,t1,state_tailer_waiting>,<c2,t1,state_tailer_active>,<c2,t2,state_uninitialized>,<c2,t2,state_finalized>,<c2,t2,state_tailer_waiting>,<c2,t2,state_tailer_active>,<c2,f1,state_uninitialized>,<c2,f1,state_finalized>,<c2,f1,state_follower_active>,<c2,f2,state_uninitialized>,<c2,f2,state_finalized>,<c2,f2,state_follower_active>,<c2,l1,state_uninitialized>,<c2,l1,state_leader_active>,<c2,l1,state_finalized>,<c2,l2,state_uninitialized>,<c2,l2,state_leader_active>,<c2,l2,state_finalized>,<c3,t1,state_uninitialized>,<c3,t1,state_finalized>,<c3,t1,state_tailer_waiting>,<c3,t1,state_tailer_active>,<c3,t2,state_uninitialized>,<c3,t2,state_finalized>,<c3,t2,state_tailer_waiting>,<c3,t2,state_tailer_active>,<c3,f1,state_uninitialized>,<c3,f1,state_finalized>,<c3,f1,state_follower_active>,<c3,f2,state_uninitialized>,<c3,f2,state_finalized>,<c3,f2,state_follower_active>,<c3,l1,state_uninitialized>,<c3,l1,state_leader_active>,<c3,l1,state_finalized>,<c3,l2,state_uninitialized>,<c3,l2,state_leader_active>,<c3,l2,state_finalized>,<c4,t1,state_uninitialized>,<c4,t1,state_finalized>,<c4,t1,state_tailer_waiting>,<c4,t1,state_tailer_active>,<c4,t2,state_uninitialized>,<c4,t2,state_finalized>,<c4,t2,state_tailer_waiting>,<c4,t2,state_tailer_active>,<c4,f1,state_uninitialized>,<c4,f1,state_finalized>,<c4,f1,state_follower_active>,<c4,f2,state_uninitialized>,<c4,f2,state_finalized>,<c4,f2,state_follower_active>,<c4,l1,state_uninitialized>,<c4,l1,state_leader_active>,<c4,l1,state_finalized>,<c4,l2,state_uninitialized>,<c4,l2,state_leader_active>,<c4,l2,state_finalized>,<c5,t1,state_uninitialized>,<c5,t1,state_finalized>,<c5,t1,state_tailer_waiting>,<c5,t1,state_tailer_active>,<c5,t2,state_uninitialized>,<c5,t2,state_finalized>,<c5,t2,state_tailer_waiting>,<c5,t2,state_tailer_active>,<c5,f1,state_uninitialized>,<c5,f1,state_finalized>,<c5,f1,state_follower_active>,<c5,f2,state_uninitialized>,<c5,f2,state_finalized>,<c5,f2,state_follower_active>,<c5,l1,state_uninitialized>,<c5,l1,state_leader_active>,<c5,l1,state_finalized>,<c5,l2,state_uninitialized>,<c5,l2,state_leader_active>,<c5,l2,state_finalized>,<c6,t1,state_uninitialized>,<c6,t1,state_finalized>,<c6,t1,state_tailer_waiting>,<c6,t1,state_tailer_active>,<c6,t2,state_uninitialized>,<c6,t2,state_finalized>,<c6,t2,state_tailer_waiting>,<c6,t2,state_tailer_active>,<c6,f1,state_uninitialized>,<c6,f1,state_finalized>,<c6,f1,state_follower_active>,<c6,f2,state_uninitialized>,<c6,f2,state_finalized>,<c6,f2,state_follower_active>,<c6,l1,state_uninitialized>,<c6,l1,state_leader_active>,<c6,l1,state_finalized>,<c6,l2,state_uninitialized>,<c6,l2,state_leader_active>,<c6,l2,state_finalized>,<c7,t1,state_uninitialized>,<c7,t1,state_finalized>,<c7,t1,state_tailer_waiting>,<c7,t1,state_tailer_active>,<c7,t2,state_uninitialized>,<c7,t2,state_finalized>,<c7,t2,state_tailer_waiting>,<c7,t2,state_tailer_active>,<c7,f1,state_uninitialized>,<c7,f1,state_finalized>,<c7,f1,state_follower_active>,<c7,f2,state_uninitialized>,<c7,f2,state_finalized>,<c7,f2,state_follower_active>,<c7,l1,state_uninitialized>,<c7,l1,state_leader_active>,<c7,l1,state_finalized>,<c7,l2,state_uninitialized>,<c7,l2,state_leader_active>,<c7,l2,state_finalized>,<c8,t1,state_uninitialized>,<c8,t1,state_finalized>,<c8,t1,state_tailer_waiting>,<c8,t1,state_tailer_active>,<c8,t2,state_uninitialized>,<c8,t2,state_finalized>,<c8,t2,state_tailer_waiting>,<c8,t2,state_tailer_active>,<c8,f1,state_uninitialized>,<c8,f1,state_finalized>,<c8,f1,state_follower_active>,<c8,f2,state_uninitialized>,<c8,f2,state_finalized>,<c8,f2,state_follower_active>,<c8,l1,state_uninitialized>,<c8,l1,state_leader_active>,<c8,l1,state_finalized>,<c8,l2,state_uninitialized>,<c8,l2,state_leader_active>,<c8,l2,state_finalized>,<c9,t1,state_uninitialized>,<c9,t1,state_finalized>,<c9,t1,state_tailer_waiting>,<c9,t1,state_tailer_active>,<c9,t2,state_uninitialized>,<c9,t2,state_finalized>,<c9,t2,state_tailer_waiting>,<c9,t2,state_tailer_active>,<c9,f1,state_uninitialized>,<c9,f1,state_finalized>,<c9,f1,state_follower_active>,<c9,f2,state_uninitialized>,<c9,f2,state_finalized>,<c9,f2,state_follower_active>,<c9,l1,state_uninitialized>,<c9,l1,state_leader_active>,<c9,l1,state_finalized>,<c9,l2,state_uninitialized>,<c9,l2,state_leader_active>,<c9,l2,state_finalized>}
raisedEvent (cur:id, nxt:id, event:id, instance:id) <= {<c1,c2,event_tailer_start,t1>,<c1,c2,event_tailer_connected,t1>,<c1,c2,event_tailer___frame,t1>,<c1,c2,event_tailer_hit,t1>,<c2,c3,event_tailer_start,t1>,<c2,c3,event_tailer_connected,t1>,<c2,c3,event_tailer___frame,t1>,<c2,c3,event_tailer_hit,t1>,<c3,c4,event_tailer_start,t1>,<c3,c4,event_tailer_connected,t1>,<c3,c4,event_tailer___frame,t1>,<c3,c4,event_tailer_hit,t1>,<c4,c5,event_tailer_start,t1>,<c4,c5,event_tailer_connected,t1>,<c4,c5,event_tailer___frame,t1>,<c4,c5,event_tailer_hit,t1>,<c5,c6,event_tailer_start,t1>,<c5,c6,event_tailer_connected,t1>,<c5,c6,event_tailer___frame,t1>,<c5,c6,event_tailer_hit,t1>,<c6,c7,event_tailer_start,t1>,<c6,c7,event_tailer_connected,t1>,<c6,c7,event_tailer___frame,t1>,<c6,c7,event_tailer_hit,t1>,<c7,c8,event_tailer_start,t1>,<c7,c8,event_tailer_connected,t1>,<c7,c8,event_tailer___frame,t1>,<c7,c8,event_tailer_hit,t1>,<c8,c9,event_tailer_start,t1>,<c8,c9,event_tailer_connected,t1>,<c8,c9,event_tailer___frame,t1>,<c8,c9,event_tailer_hit,t1>,<c1,c2,event_tailer_start,t2>,<c1,c2,event_tailer_connected,t2>,<c1,c2,event_tailer___frame,t2>,<c1,c2,event_tailer_hit,t2>,<c2,c3,event_tailer_start,t2>,<c2,c3,event_tailer_connected,t2>,<c2,c3,event_tailer___frame,t2>,<c2,c3,event_tailer_hit,t2>,<c3,c4,event_tailer_start,t2>,<c3,c4,event_tailer_connected,t2>,<c3,c4,event_tailer___frame,t2>,<c3,c4,event_tailer_hit,t2>,<c4,c5,event_tailer_start,t2>,<c4,c5,event_tailer_connected,t2>,<c4,c5,event_tailer___frame,t2>,<c4,c5,event_tailer_hit,t2>,<c5,c6,event_tailer_start,t2>,<c5,c6,event_tailer_connected,t2>,<c5,c6,event_tailer___frame,t2>,<c5,c6,event_tailer_hit,t2>,<c6,c7,event_tailer_start,t2>,<c6,c7,event_tailer_connected,t2>,<c6,c7,event_tailer___frame,t2>,<c6,c7,event_tailer_hit,t2>,<c7,c8,event_tailer_start,t2>,<c7,c8,event_tailer_connected,t2>,<c7,c8,event_tailer___frame,t2>,<c7,c8,event_tailer_hit,t2>,<c8,c9,event_tailer_start,t2>,<c8,c9,event_tailer_connected,t2>,<c8,c9,event_tailer___frame,t2>,<c8,c9,event_tailer_hit,t2>,<c1,c2,event_follower_start,f1>,<c1,c2,event_follower___frame,f1>,<c1,c2,event_follower_hit,f1>,<c2,c3,event_follower_start,f1>,<c2,c3,event_follower___frame,f1>,<c2,c3,event_follower_hit,f1>,<c3,c4,event_follower_start,f1>,<c3,c4,event_follower___frame,f1>,<c3,c4,event_follower_hit,f1>,<c4,c5,event_follower_start,f1>,<c4,c5,event_follower___frame,f1>,<c4,c5,event_follower_hit,f1>,<c5,c6,event_follower_start,f1>,<c5,c6,event_follower___frame,f1>,<c5,c6,event_follower_hit,f1>,<c6,c7,event_follower_start,f1>,<c6,c7,event_follower___frame,f1>,<c6,c7,event_follower_hit,f1>,<c7,c8,event_follower_start,f1>,<c7,c8,event_follower___frame,f1>,<c7,c8,event_follower_hit,f1>,<c8,c9,event_follower_start,f1>,<c8,c9,event_follower___frame,f1>,<c8,c9,event_follower_hit,f1>,<c1,c2,event_follower_start,f2>,<c1,c2,event_follower___frame,f2>,<c1,c2,event_follower_hit,f2>,<c2,c3,event_follower_start,f2>,<c2,c3,event_follower___frame,f2>,<c2,c3,event_follower_hit,f2>,<c3,c4,event_follower_start,f2>,<c3,c4,event_follower___frame,f2>,<c3,c4,event_follower_hit,f2>,<c4,c5,event_follower_start,f2>,<c4,c5,event_follower___frame,f2>,<c4,c5,event_follower_hit,f2>,<c5,c6,event_follower_start,f2>,<c5,c6,event_follower___frame,f2>,<c5,c6,event_follower_hit,f2>,<c6,c7,event_follower_start,f2>,<c6,c7,event_follower___frame,f2>,<c6,c7,event_follower_hit,f2>,<c7,c8,event_follower_start,f2>,<c7,c8,event_follower___frame,f2>,<c7,c8,event_follower_hit,f2>,<c8,c9,event_follower_start,f2>,<c8,c9,event_follower___frame,f2>,<c8,c9,event_follower_hit,f2>,<c1,c2,event_leader_hit,l1>,<c1,c2,event_leader_start,l1>,<c1,c2,event_leader___frame,l1>,<c2,c3,event_leader_hit,l1>,<c2,c3,event_leader_start,l1>,<c2,c3,event_leader___frame,l1>,<c3,c4,event_leader_hit,l1>,<c3,c4,event_leader_start,l1>,<c3,c4,event_leader___frame,l1>,<c4,c5,event_leader_hit,l1>,<c4,c5,event_leader_start,l1>,<c4,c5,event_leader___frame,l1>,<c5,c6,event_leader_hit,l1>,<c5,c6,event_leader_start,l1>,<c5,c6,event_leader___frame,l1>,<c6,c7,event_leader_hit,l1>,<c6,c7,event_leader_start,l1>,<c6,c7,event_leader___frame,l1>,<c7,c8,event_leader_hit,l1>,<c7,c8,event_leader_start,l1>,<c7,c8,event_leader___frame,l1>,<c8,c9,event_leader_hit,l1>,<c8,c9,event_leader_start,l1>,<c8,c9,event_leader___frame,l1>,<c1,c2,event_leader_hit,l2>,<c1,c2,event_leader_start,l2>,<c1,c2,event_leader___frame,l2>,<c2,c3,event_leader_hit,l2>,<c2,c3,event_leader_start,l2>,<c2,c3,event_leader___frame,l2>,<c3,c4,event_leader_hit,l2>,<c3,c4,event_leader_start,l2>,<c3,c4,event_leader___frame,l2>,<c4,c5,event_leader_hit,l2>,<c4,c5,event_leader_start,l2>,<c4,c5,event_leader___frame,l2>,<c5,c6,event_leader_hit,l2>,<c5,c6,event_leader_start,l2>,<c5,c6,event_leader___frame,l2>,<c6,c7,event_leader_hit,l2>,<c6,c7,event_leader_start,l2>,<c6,c7,event_leader___frame,l2>,<c7,c8,event_leader_hit,l2>,<c7,c8,event_leader_start,l2>,<c7,c8,event_leader___frame,l2>,<c8,c9,event_leader_hit,l2>,<c8,c9,event_leader_start,l2>,<c8,c9,event_leader___frame,l2>}
//syncedEvent (cur:id, nxt:id, rootEvent:id, rootInst:id, event:id, instance:id)

changedInstance (cur:id, nxt:id, instance:id) <= {<c1,c2,l1>,<c1,c2,l2>,<c1,c2,f1>,<c1,c2,f2>,<c1,c2,t1>,<c1,c2,t2>,<c2,c3,l1>,<c2,c3,l2>,<c2,c3,f1>,<c2,c3,f2>,<c2,c3,t1>,<c2,c3,t2>,<c3,c4,l1>,<c3,c4,l2>,<c3,c4,f1>,<c3,c4,f2>,<c3,c4,t1>,<c3,c4,t2>,<c4,c5,l1>,<c4,c5,l2>,<c4,c5,f1>,<c4,c5,f2>,<c4,c5,t1>,<c4,c5,t2>,<c5,c6,l1>,<c5,c6,l2>,<c5,c6,f1>,<c5,c6,f2>,<c5,c6,t1>,<c5,c6,t2>,<c6,c7,l1>,<c6,c7,l2>,<c6,c7,f1>,<c6,c7,f2>,<c6,c7,t1>,<c6,c7,t2>,<c7,c8,l1>,<c7,c8,l2>,<c7,c8,f1>,<c7,c8,f2>,<c7,c8,t1>,<c7,c8,t2>,<c8,c9,l1>,<c8,c9,l2>,<c8,c9,f1>,<c8,c9,f2>,<c8,c9,t1>,<c8,c9,t2>}

syncedInstances (instance:id, event:id, syncedWith:id) = {<f1,event_follower_start,f1>,<f2,event_follower_start,f2>,<f1,event_follower_start,t1>,<f1,event_follower_start,t2>,<f2,event_follower_start,t1>,<f2,event_follower_start,t2>}

SVTailerOnePrims (config:id, instance:id, nrOfHits:int) <= {<c1,t1,?>,<c1,t2,?>,<c2,t1,?>,<c2,t2,?>,<c3,t1,?>,<c3,t2,?>,<c4,t1,?>,<c4,t2,?>,<c5,t1,?>,<c5,t2,?>,<c6,t1,?>,<c6,t2,?>,<c7,t1,?>,<c7,t2,?>,<c8,t1,?>,<c8,t2,?>,<c9,t1,?>,<c9,t2,?>}

SVFollowerOnePrims (config:id, instance:id, times:int) <= {<c1,f1,?>,<c1,f2,?>,<c2,f1,?>,<c2,f2,?>,<c3,f1,?>,<c3,f2,?>,<c4,f1,?>,<c4,f2,?>,<c5,f1,?>,<c5,f2,?>,<c6,f1,?>,<c6,f2,?>,<c7,f1,?>,<c7,f2,?>,<c8,f1,?>,<c8,f2,?>,<c9,f1,?>,<c9,f2,?>}
SVFollowerTailer (config:id, instance:id, tailer:id) <= {<c1,f1,t1>,<c1,f1,t2>,<c1,f2,t1>,<c1,f2,t2>,<c2,f1,t1>,<c2,f1,t2>,<c2,f2,t1>,<c2,f2,t2>,<c3,f1,t1>,<c3,f1,t2>,<c3,f2,t1>,<c3,f2,t2>,<c4,f1,t1>,<c4,f1,t2>,<c4,f2,t1>,<c4,f2,t2>,<c5,f1,t1>,<c5,f1,t2>,<c5,f2,t1>,<c5,f2,t2>,<c6,f1,t1>,<c6,f1,t2>,<c6,f2,t1>,<c6,f2,t2>,<c7,f1,t1>,<c7,f1,t2>,<c7,f2,t1>,<c7,f2,t2>,<c8,f1,t1>,<c8,f1,t2>,<c8,f2,t1>,<c8,f2,t2>,<c9,f1,t1>,<c9,f1,t2>,<c9,f2,t1>,<c9,f2,t2>}

SVLeaderOnePrims (config:id, instance:id, times:int) <= {<c1,l1,?>,<c1,l2,?>,<c2,l1,?>,<c2,l2,?>,<c3,l1,?>,<c3,l2,?>,<c4,l1,?>,<c4,l2,?>,<c5,l1,?>,<c5,l2,?>,<c6,l1,?>,<c6,l2,?>,<c7,l1,?>,<c7,l2,?>,<c8,l1,?>,<c8,l2,?>,<c9,l1,?>,<c9,l2,?>}
SVLeaderFollower (config:id, instance:id, follower:id) <= {<c1,l1,f1>,<c1,l1,f2>,<c1,l2,f1>,<c1,l2,f2>,<c2,l1,f1>,<c2,l1,f2>,<c2,l2,f1>,<c2,l2,f2>,<c3,l1,f1>,<c3,l1,f2>,<c3,l2,f1>,<c3,l2,f2>,<c4,l1,f1>,<c4,l1,f2>,<c4,l2,f1>,<c4,l2,f2>,<c5,l1,f1>,<c5,l1,f2>,<c5,l2,f1>,<c5,l2,f2>,<c6,l1,f1>,<c6,l1,f2>,<c6,l2,f1>,<c6,l2,f2>,<c7,l1,f1>,<c7,l1,f2>,<c7,l2,f1>,<c7,l2,f2>,<c8,l1,f1>,<c8,l1,f2>,<c8,l2,f1>,<c8,l2,f2>,<c9,l1,f1>,<c9,l1,f2>,<c9,l2,f1>,<c9,l2,f2>}

ParamsEventFollowerStartTailer (cur:id, nxt:id, tailer:id) <= {<c1,c2,t1>,<c1,c2,t2>,<c2,c3,t1>,<c2,c3,t2>,<c3,c4,t1>,<c3,c4,t2>,<c4,c5,t1>,<c4,c5,t2>,<c5,c6,t1>,<c5,c6,t2>,<c6,c7,t1>,<c6,c7,t2>,<c7,c8,t1>,<c7,c8,t2>,<c8,c9,t1>,<c8,c9,t2>,<c9,c10,t1>,<c9,c10,t2>}
ParamsEventLeaderStartFollower (cur:id, nxt:id, follower:id) <= {<c1,c2,f1>,<c1,c2,f2>,<c2,c3,f1>,<c2,c3,f2>,<c3,c4,f1>,<c3,c4,f2>,<c4,c5,f1>,<c4,c5,f2>,<c5,c6,f1>,<c5,c6,f2>,<c6,c7,f1>,<c6,c7,f2>,<c7,c8,f1>,<c7,c8,f2>,<c8,c9,f1>,<c8,c9,f2>,<c9,c10,f1>,<c9,c10,f2>}

// Generic 'Type' constraints
order ⊆ Config[config as cur] ⨯ Config[config as nxt] ∧ 
raisedEvent ⊆ order ⨯ allowedTransitions[event] ⨯ Instance[instance] ∧  
instanceInState ⊆ Instance[instance] ⨯ Config ⨯ State ∧ 
changedInstance ⊆ order ⨯ Instance[instance] 
    
// Machine specific `type` constraints
SVTailerOnePrims[config,instance] ⊆ Config ⨯ (Instance ⨝ Tailer)[instance]
SVFollowerOnePrims[config,instance] ⊆ Config ⨯ (Instance ⨝ Follower)[instance]
SVFollowerTailer ⊆ Config ⨯ (Instance ⨝ Follower)[instance] ⨯ (Instance ⨝ Tailer)[instance->tailer]
SVLeaderOnePrims[config,instance] ⊆ Config ⨯ (Instance ⨝ Leader)[instance]
SVLeaderFollower ⊆ Config ⨯ (Instance ⨝ Leader)[instance] ⨯ (Instance ⨝ Follower)[instance->follower]

ParamsEventFollowerStartTailer ⊆ order ⨯ (Instance ⨝ Tailer)[instance->tailer]
ParamsEventLeaderStartFollower ⊆ order ⨯ (Instance ⨝ Follower)[instance->follower]

// Specific per event
∀ o ∈ order ⨝ raisedEvent | (
  (some (o ⨝ EventFollowerStart) ⇔ one (o ⨝ ParamsEventFollowerStartTailer)) ∧
  (some (o ⨝ EventLeaderStart) ⇔ one (o ⨝ ParamsEventLeaderStartFollower))
)

// Generic: All configurations are reachable
∀ c ∈ Config ∖ InitialConfig | c ⊆ (InitialConfig[config as cur] ⨝ ^<cur,nxt>order)[nxt -> config]

// Generic: Every transition can only happen by exactly one event
∀ o ∈ order | one o ⨝ raisedEvent

// Generic: In every configuration all machines have a state
∀ c ∈ Config, inst ∈ Instance | one instanceInState ⨝ c ⨝ inst

// Specific per machine: In every configuration iff a machine is in an initialized state then it must have values
∀ c ∈ Config, inst ∈ (Instance ⨝ Tailer)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇔ one SVTailerOnePrims ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Follower)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇔ one SVFollowerOnePrims ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Follower)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇒ one SVFollowerTailer ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Follower)[instance] | (no (((c ⨯ inst) ⨝ instanceInState)[state] ∩ initialized) ⇒ no SVFollowerTailer ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Leader)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇔ one SVLeaderOnePrims ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Leader)[instance] | (((c ⨯ inst) ⨝ instanceInState)[state] ⊆ initialized ⇒ one SVLeaderFollower ⨝ c ⨝ inst)
∀ c ∈ Config, inst ∈ (Instance ⨝ Leader)[instance] | (no (((c ⨯ inst) ⨝ instanceInState)[state] ∩ initialized) ⇒ no SVLeaderFollower ⨝ c ⨝ inst)

// Generic: Transitions are only allowed between if an event is specified between two states
∀ o ∈ order ⨝ raisedEvent | (o[cur as config] ⨝ instanceInState)[state->from] ⨯ (o[nxt as config] ⨝ instanceInState)[state->to] ⨯ o[event] ⊆ allowedTransitions

// Generic predicates
pred forceState[curState: (state:id), nxtState: (state:id), raisedEvent: (event:id)]
  = nxtState = (curState[state as from] ⨝ (allowedTransitions ⨝ raisedEvent))[to->state]

pred inState[config: (config:id), instance: (instance:id), state: (state:id)]
  = ((instance ⨯ config) ⨝ instanceInState)[state] ⊆ state

pred eventTailerConnected[step: (cur:id, nxt:id), tailer: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curPrims = (SVTailerOnePrims ⨝ cur ⨝ tailer)[nrOfHits->curNrOfHits], 
        nxtPrims = (SVTailerOnePrims ⨝ nxt ⨝ tailer)[nrOfHits->nxtNrOfHits] | 
    (some (curPrims ⨯ nxtPrims) where (nxtNrOfHits = curNrOfHits))    
  ∧ forceState[(instanceInState ⨝ tailer ⨝ cur)[state], (instanceInState ⨝ tailer ⨝ nxt)[state], EventTailerConnected]
  ∧ tailer ⊆ (changedInstance ⨝ step)[instance]

pred eventTailerHit[step: (cur:id, nxt:id), tailer: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curPrims = (SVTailerOnePrims ⨝ cur ⨝ tailer)[nrOfHits->curNrOfHits], 
        nxtPrims = (SVTailerOnePrims ⨝ nxt ⨝ tailer)[nrOfHits->nxtNrOfHits] | 
      (some (curPrims ⨯ nxtPrims) where (nxtNrOfHits = curNrOfHits + 1))    
    ∧ forceState[(instanceInState ⨝ tailer ⨝ cur)[state], (instanceInState ⨝ tailer ⨝ nxt)[state], EventTailerHit]
    ∧ tailer ⊆ (changedInstance ⨝ step)[instance] 

pred eventTailerStart[step: (cur:id, nxt:id), tailer: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ tailer ⨝ cur)[state],
        nxtState = (instanceInState ⨝ tailer ⨝ nxt)[state],        
        curPrims = (SVTailerOnePrims ⨝ cur ⨝ tailer)[nrOfHits->curNrOfHits], 
        nxtPrims = (SVTailerOnePrims ⨝ nxt ⨝ tailer)[nrOfHits->nxtNrOfHits] | 
    (some nxtPrims where (nxtNrOfHits = 0))    
    ∧ forceState[curState, nxtState, EventTailerStart]
    ∧ tailer ⊆ (changedInstance ⨝ step)[instance]
    
pred frameTailer[step : (cur:id, nxt:id), tailer: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ tailer ⨝ cur)[state],
        nxtState = (instanceInState ⨝ tailer ⨝ nxt)[state],
        curFlat = (SVTailerOnePrims ⨝ cur ⨝ tailer)[nrOfHits->curNrOfHits], 
        nxtFlat = (SVTailerOnePrims ⨝ nxt ⨝ tailer)[nrOfHits->nxtNrOfHits] |
      nxtState = curState 
    ∧ (no curFlat ∨ some (curFlat ⨯ nxtFlat) where nxtNrOfHits = curNrOfHits)
           
pred tailerTransFunc[step: (cur:id, nxt:id)]
  = ∀ inst ∈ (Instance ⨝ Tailer)[instance] | // Events from Tailer    
      (some inst ∩ ((raisedEvent ⨝ step)[instance]) ⇔ // Iff this is the instance that raised the event then one of the transitions must have happened  
        (eventTailerConnected[step, inst] ∧ 
        (step ⨝ raisedEvent)[event] = EventTailerConnected ∧ 
        (changedInstance ⨝ step)[instance] ⊆ inst)
        ∨ 
        (eventTailerHit[step, inst] ∧ 
        (step ⨝ raisedEvent)[event] = EventTailerHit ∧ 
        (changedInstance ⨝ step)[instance] ⊆ inst)
        ∨ 
        (eventTailerStart[step, inst] ∧ 
        (step ⨝ raisedEvent)[event] = EventTailerStart ∧ 
        (changedInstance ⨝ step)[instance] ⊆ inst)
      )
      ∧ // Iff it is not a transitioning instance, frame the values
      (no inst ∩ (changedInstance ⨝ step)[instance] ⇔ frameTailer[step, inst])
  
pred eventFollowerHit[step: (cur:id, nxt:id), follower: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ follower ⨝ cur)[state],
        nxtState = (instanceInState ⨝ follower ⨝ nxt)[state],
        curFlat = (SVFollowerOnePrims ⨝ cur ⨝ follower)[times->curTimes], 
        nxtFlat = (SVFollowerOnePrims ⨝ nxt ⨝ follower)[times->nxtTimes],
        curTailer = (SVFollowerTailer ⨝ cur ⨝ follower)[tailer],
        nxtTailer = (SVFollowerTailer ⨝ nxt ⨝ follower)[tailer] |
    eventTailerHit[step, curTailer[tailer as instance]] ∧ 
    nxtTailer = curTailer ∧ 
    some (nxtFlat ⨯ curFlat) where (nxtTimes = curTimes + 1) ∧
    forceState[curState, nxtState, EventFollowerHit] ∧
    follower ⊆ (changedInstance ⨝ step)[instance]    

pred eventFollowerStart[step: (cur:id, nxt:id), follower: (instance:id), tailer: (tailer:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ follower ⨝ cur)[state],
        nxtState = (instanceInState ⨝ follower ⨝ nxt)[state],
        curFlat = (SVFollowerOnePrims ⨝ cur ⨝ follower)[times->curTimes], 
        nxtFlat = (SVFollowerOnePrims ⨝ nxt ⨝ follower)[times->nxtTimes],
        curTailer = (SVFollowerTailer ⨝ cur ⨝ follower)[tailer],
        nxtTailer = (SVFollowerTailer ⨝ nxt ⨝ follower)[tailer] |
      inState[cur, tailer[tailer as instance], StateTailerWaiting] ∧
      eventTailerConnected[step, tailer[tailer as instance]] ∧
      some nxtFlat where nxtTimes = 0 ∧
      nxtTailer = tailer ∧ 
      forceState[curState, nxtState, EventFollowerStart] ∧ 
      follower ⊆ (changedInstance ⨝ step)[instance]
   
pred frameFollower[step : (cur:id, nxt:id), follower: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ follower ⨝ cur)[state],
        nxtState = (instanceInState ⨝ follower ⨝ nxt)[state],
        curFlat = (SVFollowerOnePrims ⨝ cur ⨝ follower)[times->curTimes], 
        nxtFlat = (SVFollowerOnePrims ⨝ nxt ⨝ follower)[times->nxtTimes],
        curTailer = (SVFollowerTailer ⨝ cur ⨝ follower)[tailer],
        nxtTailer = (SVFollowerTailer ⨝ nxt ⨝ follower)[tailer] |
      nxtState = curState  ∧
      (no curFlat ∨ (some (curFlat ⨯ nxtFlat) where nxtTimes = curTimes ∧ nxtTailer = curTailer))
        
pred followerTransFunc[step : (cur:id, nxt:id)]
  = ∀ inst ∈ (Instance ⨝ Follower)[instance] |  
      (some inst ∩ ((raisedEvent ⨝ step)[instance]) ⇔ 
        (eventFollowerHit[step,inst] ∧
        (step ⨝ raisedEvent)[event] = EventFollowerHit ∧ 
        (changedInstance ⨝ step)[instance] ⊆ (inst ∪ (SVFollowerTailer ⨝ inst)[tailer->instance])) 
        ∨ 
        (eventFollowerStart[step, inst, (step ⨝ ParamsEventFollowerStartTailer)[tailer]] ∧ 
        (step ⨝ raisedEvent)[event] = EventFollowerStart ∧ 
        (changedInstance ⨝ step)[instance] ⊆ (inst ∪ (SVFollowerTailer ⨝ inst)[tailer->instance])
        //some (changedInstance ⨝ step)[instance][count() as nci] where nci = 2)
        ) 
      ) 
      ∧ // Iff it is not a transitioning instance, frame the values
      (no inst ∩ (changedInstance ⨝ step)[instance] ⇔ frameFollower[step, inst])

pred eventLeaderStart[step: (cur:id, nxt:id), leader: (instance:id), follower: (follower:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ leader ⨝ cur)[state],
        nxtState = (instanceInState ⨝ leader ⨝ nxt)[state],
        curFlat = (SVLeaderOnePrims ⨝ cur ⨝ leader)[times->curTimes], 
        nxtFlat = (SVLeaderOnePrims ⨝ nxt ⨝ leader)[times->nxtTimes],
        curFollower = (SVLeaderFollower ⨝ cur ⨝ leader)[follower],
        nxtFollower = (SVLeaderFollower ⨝ nxt ⨝ leader)[follower] |
      inState[cur, follower[follower as instance], StateFollowerActive]  ∧ 
      nxtFollower = follower ∧
      (some (nxtFlat) where (nxtTimes = 0)) ∧ 
      forceState[curState, nxtState, EventLeaderStart] ∧
      leader ⊆ (changedInstance ⨝ step)[instance]
    
pred eventLeaderHit[step: (cur:id, nxt: id), leader: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ leader ⨝ cur)[state],
        nxtState = (instanceInState ⨝ leader ⨝ nxt)[state],
        curFlat = (SVLeaderOnePrims ⨝ cur ⨝ leader)[times->curTimes], 
        nxtFlat = (SVLeaderOnePrims ⨝ nxt ⨝ leader)[times->nxtTimes],
        curFollower = (SVLeaderFollower ⨝ cur ⨝ leader)[follower],
        nxtFollower = (SVLeaderFollower ⨝ nxt ⨝ leader)[follower] |
     eventFollowerHit[step, curFollower[follower as instance]] ∧
     nxtFollower = curFollower ∧
     (some (curFlat ⨯ nxtFlat) where (nxtTimes = curTimes + 1)) ∧ 
     forceState[curState, nxtState, EventLeaderHit] ∧
     leader ⊆ (changedInstance ⨝ step)[instance]

pred frameLeader[step: (cur:id, nxt:id), leader: (instance:id)]
  = let cur = step[cur->config],
        nxt = step[nxt->config],
        curState = (instanceInState ⨝ leader ⨝ cur)[state],
        nxtState = (instanceInState ⨝ leader ⨝ nxt)[state],
        curFlat = (SVLeaderOnePrims ⨝ cur ⨝ leader)[times->curTimes], 
        nxtFlat = (SVLeaderOnePrims ⨝ nxt ⨝ leader)[times->nxtTimes],
        curFollower = (SVLeaderFollower ⨝ cur ⨝ leader)[follower],
        nxtFollower = (SVLeaderFollower ⨝ nxt ⨝ leader)[follower] |
      nxtState = curState  ∧
      (no curFlat ∨ (some (curFlat ⨯ nxtFlat) where nxtTimes = curTimes ∧ nxtFollower = curFollower))
     
 pred leaderTransFunc[step: (cur:id, nxt:id)] 
  = ∀ inst ∈ (Instance ⨝ Leader)[instance] |  
      // Iff this is the instance that raised the event then one of the transitions must have happened 
      (some inst ∩ ((raisedEvent ⨝ step)[instance]) ⇔ 
        (eventLeaderStart[step, inst, (ParamsEventLeaderStartFollower ⨝ step)[follower]] ∧
        (step ⨝ raisedEvent)[event] = EventLeaderStart ∧ 
        (changedInstance ⨝ step)[instance] ⊆ inst)
        ∨ 
        (eventLeaderHit[step, inst] ∧
        (step ⨝ raisedEvent)[event] = EventLeaderHit ∧ 
        let syncedFollowers = (SVLeaderFollower ⨝ inst)[follower->instance], syncedTailers = (SVFollowerTailer ⨝ syncedFollowers)[tailer->instance] |
          (changedInstance ⨝ step)[instance] ⊆ (inst ∪ syncedFollowers ∪ syncedTailers)
        )
      ) 
      ∧
      (no inst ∩ (changedInstance ⨝ step)[instance] ⇔ frameLeader[step, inst])
 
// Transition function
∀ step ∈ order | (tailerTransFunc[step] ∧ followerTransFunc[step] ∧ leaderTransFunc[step]) 

// Asserts: this is where the checks get added
∃ c ∈ Config | (some (c ⨝ SVLeaderOnePrims) where times = 2)
∃ c ∈ Config | ∀ l ∈ (Instance ⨝ Tailer)[instance] | (l ⨝ instanceInState ⨝ c)[state] ⊆ StateTailerActive

objectives: minimize Config[count()]

