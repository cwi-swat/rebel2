module CoffeeMachine

spec CoffeeMachine
  selected: CoffeeType,
  amountNeeded: Integer;
   
  event powerOn() 
    post: this.amountNeeded' = 0, this.selected' = CoffeeType[NONE];
    
  event powerOff()
  
  event select()
    variant americano
      post: this.amountNeeded' = 130, this.selected' = CoffeeType[AMERICANO];
    
    variant espresso
      post: this.amountNeeded' = 120, this.selected' = CoffeeType[ESPRESSO];
    
    variant normal
      post: this.amountNeeded' = 95, this.selected' = CoffeeType[NORMAL];
    
    variant latte  
      post: this.amountNeeded' = 150, this.selected' = CoffeeType[LATTE];
       
  event pay(amount: Integer)
    pre: (amount = 5 || amount = 10 || amount = 20 || amount = 50);
    post: this.amountNeeded' = this.amountNeeded - amount;
  
    variant amountNotMet
      pre: this.amountNeeded - amount > 0;
      
    variant amountMet
      pre: this.amountNeeded - amount = 0;
      post: this.selected' = CoffeeType[NONE];
                 
  event cancel() 
    post: this.amountNeeded' = 0, this.selected' = CoffeeType[NONE];

  states:
    active {
      waiting -> acceptingPayment: select::americano, select::espresso, select::normal, select::latte;
      acceptingPayment -> serve: pay::amountMet;
      acceptingPayment -> acceptingPayment: pay::amountNotMet;
      acceptingPayment -> waiting: cancel;
      serve -> waiting: empty;
    }
    
    active -> (*): powerOff;  
    (*) -> waiting: powerOn;  

spec CoffeeType[NONE,NORMAL,ESPRESSO,AMERICANO,LATTE]
 
config InitialMachine = cm: CoffeeMachine is uninitialized;
   
assert MachineIsServing = eventually exists m: CoffeeMachine | m is serve;  
run MachineIsServing from InitialMachine in max 10 steps;

assert CanServeNormalCoffee  
  = eventually exists m: CoffeeMachine | m.selected = CoffeeType[NORMAL] && eventually m is serve;
run CanServeNormalCoffee from InitialMachine in max 10 steps;
  
assert MachineWillServeOrCancel = always exists m: CoffeeMachine | (m is acceptingPayment => eventually m is serve || cancel on m);    
run MachineWillServeOrCancel from InitialMachine in max 7 steps with infinite trace;

    