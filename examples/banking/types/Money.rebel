module banking::types::Money

spec Money
  amount: Integer,
  currency: Currency;

  internal event zero() 
    pre: this.amount = 0;
    
  internal event positive()
    pre: this.amount >= 0;
   
  internal event negative()
    pre: this.amount < 0;   

  internal event equal(other: Money) 
    pre: this.currency = other.currency, this.amount = other.amount;

  internal event gt(other: Money) 
    pre: this.currency = other.currency, this.amount > other.amount;    

  internal event gte(other: Money) 
    pre: this.currency = other.currency, this.amount >= other.amount;    

  internal event lt(other: Money)
    pre: this.currency = other.currency, this.amount < other.amount;

  internal event lte(other: Money)
    pre: this.currency = other.currency, this.amount <= other.amount;
    
  internal event minIfGte(other: Money)
    pre: this.currency = other.currency, this.amount >= other.amount;
    post: this.amount' = this.amount - other.amount;  
 
  internal event plus(other: Money)
    pre: this.currency = other.currency;
    post: this.amount' = this.amount + other.amount;  

  internal event addInterest(rate: Integer) 
    post: this.amount' = this.amount + ((this.amount * rate) / 100);

  assume FiniteMoney = always forall m: Money | m.amount > -1000000000 && m.amount < 1000000000;
      
  states:   
    created -> created: gt, gte, lt, lte, minIfGte, plus, equal, zero, addInterest, positive, negative;
    
spec Currency [EUR,USD] 
    
config SomeMoney = m1,m2: Money with amount = 100;

assert SomeMoneyIsMoreThanOther = eventually exists m1,m2:Money | m1.gt(m2);
assert InterestCanBeAdded = eventually exists m1:Money | addInterest on m1;

check SomeMoneyIsMoreThanOther from SomeMoney in max 1 steps; 
check InterestCanBeAdded from SomeMoney in max 2 steps;