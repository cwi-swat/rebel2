module small::Optional

spec Person
  name: String,
  agee: PersonAge;
  
  init event create(name: String, agee: PersonAge) 
    pre: agee is initialized;
    post: this.agee' = agee, this.name' = name;

  fact AlwaysAtLeastOneAdult = always exists p: Person | (p is initialized => p.agee.value > 17); 
     
  states:
    (*) -> created: create;
        
spec PersonAge
  value: Integer;
  
  init event create(value: Integer)
    post: this.value' = value;
  
  states:
    (*) -> created: create;
  
config Basic = p1,p2:Person is uninitialized, pa1,pa2: PersonAge is uninitialized;

assert CanCreatePerson = eventually exists p1,p2:Person | p1 is initialized && p2 is initialized && p1.agee.value != p2.agee.value && p1.agee.value < 18;
assert CanCreatePersonAge = eventually exists pa:PersonAge | pa is initialized;

check CanCreatePerson from Basic in max 4 steps;    
check CanCreatePersonAge from Basic in max 1 steps;