test SetId [[ 
  module Simple
  
  spec Simple
    id: Integer;
    
    init final event start(id: Integer) 
      post: this.id' = id;
    
    states:
      (*) -> started: start;
      started -> (*): start;  
]] 

test EventVariant [[
  module EV
  
  spec EV
    init final event base() 
      variant var
  
  states:
    (*) -> started: base::var;
    started -> (*): base;
]]

test NestedStateMachines [[
  module NSM
  
  spec NSM
    init final event base() 
  
  states:
    [a,b,c]
    
    (*) -> a: base;
    a -> b::x: base;

    b {
      [x,y]
      x -> y: base;
    }
        
    b -> c: base;
    c -> (*): base;
]]

test EmptyEvents [[
  module EE
  
  spec EE
  
  states:
    (*) -> created: empty;
]]

test DoubleNestedStateMachine [[
  module DNSM
  
  spec DNSM
  
  event ev()
  
  states:
    a {
      b {
        c -> d: ev;
        d -> c: ev;
      }
      
      e->a::b::d: ev;
    }
    
    f->a::b::c: ev; 
]]     

test MultipleSpecs [[
  module Multiple 
  
  spec Leader 
    follower: Follower;
    
    init event start(follower: Follower) 
      post: this.follower' = follower;
  
    states:
      (*) -> active: start;
      
  spec Follower
]]

test SetOfFollowers [[
  module Multiple
  
  spec Leader
    followers: set Follower;
    
    init event start()
      post: this.followers' = {};
      
    event add(follower: Follower)
      post: this.followers' = this.followers + follower; 

    event hit()
      pre: forall f: this.followers | f.hit();
    
    states:
      (*)->active: start;
      active->active: add, hit; 
            
  spec Follower
    event hit()
    
    states:
      a->a: hit;
]]

test SimpleCorrectConfig [[
  module Account
  
  spec Money
  
  spec Account
    balance: Money;
  
  config Simple = ac: Account, m: Money;
]]

test ForgetField [[
  module Account
  
  spec Money
  
  spec Account
    balance: Money;
  
  config Simple = ac: Account forget balance, m: Money;
]]

test FieldReferenceOptional [[
  module FRO
  
  spec ADT
    f: Integer;
    
  spec Ref
    a: ?ADT;
    
    event refOp() 
      pre: this.a.f = 0;
      post: this.a.f' = 10; 
      
    states:
      b->b: refOp;
]]

